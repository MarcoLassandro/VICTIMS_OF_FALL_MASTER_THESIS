[{"experiment_name": "Experiment_6_21_12_21", "dataset_variant": "complete", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.296218487394958, "f1_micro": 0.296218487394958, "f1_macro": 0.2796490880734578, "neg_root_mean_squared_error": -2.0405320264664146, "neg_mean_absolute_error": -1.469579831932773}, "mean_train_score": {"accuracy": 0.8911360200975069, "f1_micro": 0.8911360200975069, "f1_macro": 0.8909280032215342, "neg_root_mean_squared_error": -0.6609487099445074, "neg_mean_absolute_error": -0.2307625981988887}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 21, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=21), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=14), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=7), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=7), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}]", "cv_results": "{'fit_time': array([14.31619024, 14.7400713 , 14.55108953, 13.72399759, 13.56400418,\n       13.4140017 , 14.13703299, 15.73003459, 15.76104784, 14.63775015]), 'score_time': array([0.00999904, 0.01399803, 0.0140028 , 0.00899935, 0.00899601,\n       0.00999856, 0.0139997 , 0.01999879, 0.01100159, 0.01199865]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.35294118, 0.41176471, 0.17647059, 0.26470588,\n       0.32352941, 0.29411765, 0.17647059, 0.32352941, 0.35294118]), 'train_accuracy': array([0.7875817 , 1.        , 0.7980456 , 0.7752443 , 0.77198697,\n       0.94788274, 0.98371336, 0.96742671, 0.88273616, 0.99674267]), 'test_f1_micro': array([0.28571429, 0.35294118, 0.41176471, 0.17647059, 0.26470588,\n       0.32352941, 0.29411765, 0.17647059, 0.32352941, 0.35294118]), 'train_f1_micro': array([0.7875817 , 1.        , 0.7980456 , 0.7752443 , 0.77198697,\n       0.94788274, 0.98371336, 0.96742671, 0.88273616, 0.99674267]), 'test_f1_macro': array([0.23683261, 0.32625153, 0.35491889, 0.15054945, 0.25      ,\n       0.29489796, 0.3133438 , 0.18606473, 0.3255887 , 0.35804322]), 'train_f1_macro': array([0.78625896, 1.        , 0.79876149, 0.7748829 , 0.77217789,\n       0.94810968, 0.98327908, 0.96822683, 0.88094225, 0.99664095]), 'test_neg_root_mean_squared_error': array([-1.85933936, -1.5718105 , -1.80684971, -2.26222171, -2.01465221,\n       -2.33892886, -1.84709629, -2.52050415, -1.94784949, -2.23606798]), 'train_neg_root_mean_squared_error': array([-1.11290705, -0.        , -1.0288984 , -1.25819787, -1.0367828 ,\n       -0.562104  , -0.12761914, -0.38285742, -1.0430474 , -0.05707301]), 'test_neg_mean_absolute_error': array([-1.34285714, -1.05882353, -1.20588235, -1.64705882, -1.47058824,\n       -1.64705882, -1.41176471, -2.        , -1.38235294, -1.52941176]), 'train_neg_mean_absolute_error': array([-0.44117647, -0.        , -0.40716612, -0.51465798, -0.42996743,\n       -0.11400651, -0.01628664, -0.06188925, -0.31921824, -0.00325733])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_21_12_21", "dataset_variant": "only_totals", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.34327731092436975, "f1_micro": 0.34327731092436975, "f1_macro": 0.3329290154290155, "neg_root_mean_squared_error": -1.8862256332144693, "neg_mean_absolute_error": -1.3521848739495799}, "mean_train_score": {"accuracy": 0.6614198122245641, "f1_micro": 0.6614198122245641, "f1_macro": 0.659144231129686, "neg_root_mean_squared_error": -1.3759839232429454, "neg_mean_absolute_error": -0.7104074854697578}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([12.81499958, 12.81500316, 12.74004412, 12.57200098, 13.42373323,\n       13.98309803, 14.82538772, 17.90193772, 13.16100502, 13.15355897]), 'score_time': array([0.00900078, 0.0090003 , 0.01300001, 0.0109961 , 0.01199937,\n       0.01000261, 0.01399922, 0.00899744, 0.01099753, 0.01099586]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTreeClassifier(),\n                                                                 n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__est...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.35294118, 0.38235294, 0.17647059, 0.47058824,\n       0.41176471, 0.55882353, 0.23529412, 0.29411765, 0.26470588]), 'train_accuracy': array([0.55882353, 0.51465798, 0.59934853, 0.59934853, 0.57003257,\n       0.56026059, 0.74267101, 0.89576547, 0.89576547, 0.67752443]), 'test_f1_micro': array([0.28571429, 0.35294118, 0.38235294, 0.17647059, 0.47058824,\n       0.41176471, 0.55882353, 0.23529412, 0.29411765, 0.26470588]), 'train_f1_micro': array([0.55882353, 0.51465798, 0.59934853, 0.59934853, 0.57003257,\n       0.56026059, 0.74267101, 0.89576547, 0.89576547, 0.67752443]), 'test_f1_macro': array([0.27743368, 0.30515873, 0.37356136, 0.18015873, 0.45025768,\n       0.4109462 , 0.53602826, 0.24139353, 0.27341706, 0.28093494]), 'train_f1_macro': array([0.55510581, 0.50947303, 0.59726179, 0.59280184, 0.5694903 ,\n       0.56123082, 0.74262895, 0.89601259, 0.89576833, 0.67166885]), 'test_neg_root_mean_squared_error': array([-1.69030851, -1.87867287, -1.77399516, -2.28164028, -1.79049779,\n       -1.70638938, -1.54348727, -2.36394486, -1.86295148, -1.97036873]), 'train_neg_root_mean_squared_error': array([-1.68325082, -1.76280795, -1.55150447, -1.46512109, -1.61729255,\n       -1.57959299, -1.08888372, -0.85609522, -0.82903342, -1.32625701]), 'test_neg_mean_absolute_error': array([-1.25714286, -1.35294118, -1.26470588, -1.85294118, -1.20588235,\n       -1.08823529, -0.91176471, -1.82352941, -1.35294118, -1.41176471]), 'train_neg_mean_absolute_error': array([-0.95098039, -1.06188925, -0.83713355, -0.80456026, -0.93485342,\n       -0.91205212, -0.48208469, -0.23127036, -0.23778502, -0.6514658 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_21_12_21", "dataset_variant": "only_binary", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2815126050420168, "f1_micro": 0.2815126050420168, "f1_macro": 0.2647149745679157, "neg_root_mean_squared_error": -1.9723144082982138, "neg_mean_absolute_error": -1.454873949579832}, "mean_train_score": {"accuracy": 0.6937429477762876, "f1_micro": 0.6937429477762876, "f1_macro": 0.6914451000159818, "neg_root_mean_squared_error": -1.3930054732414936, "neg_mean_absolute_error": -0.6789838410934407}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 2, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}]", "cv_results": "{'fit_time': array([13.87499952, 14.05600429, 15.3880558 , 16.24505568, 15.19207931,\n       13.21000409, 13.42523456, 12.98699999, 15.87683201, 13.91400003]), 'score_time': array([0.01400065, 0.01400161, 0.0189991 , 0.01600337, 0.00999975,\n       0.012995  , 0.00900173, 0.00899696, 0.01000309, 0.00999737]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=DecisionTr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.35294118, 0.14705882, 0.20588235, 0.35294118,\n       0.41176471, 0.29411765, 0.20588235, 0.20588235, 0.35294118]), 'train_accuracy': array([0.79084967, 0.56351792, 0.57980456, 0.84039088, 0.41042345,\n       0.72312704, 0.88599349, 0.64495114, 0.78175896, 0.71661238]), 'test_f1_micro': array([0.28571429, 0.35294118, 0.14705882, 0.20588235, 0.35294118,\n       0.41176471, 0.29411765, 0.20588235, 0.20588235, 0.35294118]), 'train_f1_micro': array([0.79084967, 0.56351792, 0.57980456, 0.84039088, 0.41042345,\n       0.72312704, 0.88599349, 0.64495114, 0.78175896, 0.71661238]), 'test_f1_macro': array([0.22063492, 0.34730983, 0.10912698, 0.20351474, 0.32222222,\n       0.40475794, 0.31782107, 0.22176871, 0.15849673, 0.3414966 ]), 'train_f1_macro': array([0.79266142, 0.56150313, 0.57961223, 0.84139714, 0.39391558,\n       0.72108819, 0.88657724, 0.64194961, 0.78142142, 0.71432504]), 'test_neg_root_mean_squared_error': array([-1.8283482 , -1.45521375, -2.09340702, -2.57818906, -1.85504083,\n       -1.89426379, -1.71498585, -1.99263349, -2.18282063, -2.12824147]), 'train_neg_root_mean_squared_error': array([-1.21939661, -1.67953771, -1.59396255, -1.22673795, -1.82544448,\n       -1.3815914 , -0.86743472, -1.48499553, -1.20260304, -1.44835074]), 'test_neg_mean_absolute_error': array([-1.34285714, -1.05882353, -1.67647059, -2.        , -1.32352941,\n       -1.17647059, -1.29411765, -1.55882353, -1.64705882, -1.47058824]), 'train_neg_mean_absolute_error': array([-0.48039216, -0.93811075, -0.89250814, -0.43648208, -1.22149837,\n       -0.63192182, -0.25081433, -0.77850163, -0.49511401, -0.66449511])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]