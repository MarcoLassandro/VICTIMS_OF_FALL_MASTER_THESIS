[{"experiment_name": "Experiment_5_21_12_21", "dataset_variant": "complete", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3080672268907563, "f1_micro": 0.3080672268907563, "f1_macro": 0.29332588046873764, "neg_root_mean_squared_error": -2.2224349813242608, "neg_mean_absolute_error": -1.6386554621848741}, "mean_train_score": {"accuracy": 0.7850077707521663, "f1_micro": 0.7850077707521663, "f1_macro": 0.782282012251345, "neg_root_mean_squared_error": -1.1110787923467746, "neg_mean_absolute_error": -0.4736337314513211}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 21, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=21), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=6), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=7), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 5, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=10), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([ 7.93636775, 10.98752546,  8.05900073,  8.11500192,  6.94800401,\n        7.0180006 ,  7.07504296,  6.97200513,  6.78299928,  6.86199808]), 'score_time': array([0.01000571, 0.00399613, 0.0070014 , 0.00900817, 0.00499868,\n       0.0060091 , 0.00599694, 0.00499749, 0.00500226, 0.00501227]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=21)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=7)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.38235294, 0.35294118, 0.20588235, 0.35294118,\n       0.32352941, 0.26470588, 0.38235294, 0.26470588, 0.29411765]), 'train_accuracy': array([0.97385621, 0.91530945, 0.66775244, 0.93485342, 0.74267101,\n       0.84039088, 0.50162866, 0.85993485, 0.82736156, 0.58631922]), 'test_f1_micro': array([0.25714286, 0.38235294, 0.35294118, 0.20588235, 0.35294118,\n       0.32352941, 0.26470588, 0.38235294, 0.26470588, 0.29411765]), 'train_f1_micro': array([0.97385621, 0.91530945, 0.66775244, 0.93485342, 0.74267101,\n       0.84039088, 0.50162866, 0.85993485, 0.82736156, 0.58631922]), 'test_f1_macro': array([0.2165739 , 0.36662544, 0.32356532, 0.20861678, 0.36792414,\n       0.31832612, 0.20979021, 0.36118326, 0.26584844, 0.29480519]), 'train_f1_macro': array([0.97366158, 0.91420439, 0.66412845, 0.93341347, 0.73925571,\n       0.83615412, 0.49126273, 0.86076834, 0.82699364, 0.58297769]), 'test_neg_root_mean_squared_error': array([-2.34825163, -1.68906518, -2.10042013, -2.55527137, -2.06511643,\n       -2.30089497, -2.20293921, -2.34520788, -2.59524452, -2.0219385 ]), 'train_neg_root_mean_squared_error': array([-0.38348249, -0.79082689, -1.46845218, -0.79698128, -1.2607841 ,\n       -1.04927461, -1.69977964, -0.93258074, -1.11839811, -1.6102279 ]), 'test_neg_mean_absolute_error': array([-1.85714286, -1.20588235, -1.41176471, -1.88235294, -1.44117647,\n       -1.64705882, -1.73529412, -1.67647059, -1.97058824, -1.55882353]), 'train_neg_mean_absolute_error': array([-0.05555556, -0.19543974, -0.74918567, -0.17915309, -0.54723127,\n       -0.36482085, -1.05211726, -0.29641694, -0.39739414, -0.8990228 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_5_21_12_21", "dataset_variant": "only_totals", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2843697478991597, "f1_micro": 0.2843697478991597, "f1_macro": 0.2751046572475143, "neg_root_mean_squared_error": -2.096027697079558, "neg_mean_absolute_error": -1.5389915966386554}, "mean_train_score": {"accuracy": 0.6999733878350473, "f1_micro": 0.6999733878350473, "f1_macro": 0.6947089029508736, "neg_root_mean_squared_error": -1.2638244271902646, "neg_mean_absolute_error": -0.6212311851993784}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}]", "cv_results": "{'fit_time': array([6.11800313, 6.82353497, 6.74557495, 6.28099895, 7.08608627,\n       6.24000406, 6.49804401, 6.23600411, 7.38161969, 6.69400096]), 'score_time': array([0.00599623, 0.00800014, 0.00399876, 0.00500035, 0.00500369,\n       0.00399947, 0.00900388, 0.0059998 , 0.00600767, 0.00399756]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionTreeClassifier(),\n                                                                  n_jobs=-1))]),\n                   n_iter=20,\n                   param_distributions={'estimator__es...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.31428571, 0.14705882, 0.35294118, 0.11764706, 0.32352941,\n       0.32352941, 0.44117647, 0.20588235, 0.32352941, 0.29411765]), 'train_accuracy': array([0.91830065, 0.62214984, 0.59934853, 0.6742671 , 0.66449511,\n       0.6286645 , 0.94788274, 0.65472313, 0.67752443, 0.61237785]), 'test_f1_micro': array([0.31428571, 0.14705882, 0.35294118, 0.11764706, 0.32352941,\n       0.32352941, 0.44117647, 0.20588235, 0.32352941, 0.29411765]), 'train_f1_micro': array([0.91830065, 0.62214984, 0.59934853, 0.6742671 , 0.66449511,\n       0.6286645 , 0.94788274, 0.65472313, 0.67752443, 0.61237785]), 'test_f1_macro': array([0.27132867, 0.12213976, 0.33571429, 0.09603175, 0.32745826,\n       0.30064935, 0.43639456, 0.2287633 , 0.32792208, 0.30464456]), 'train_f1_macro': array([0.91824384, 0.61698818, 0.59487353, 0.6686587 , 0.65488954,\n       0.6113012 , 0.94827036, 0.65371567, 0.67299566, 0.60715236]), 'test_neg_root_mean_squared_error': array([-2.39642591, -2.0436415 , -1.95538472, -2.3763541 , -1.72353945,\n       -2.0508248 , -1.83911744, -2.41928526, -2.15570379, -2.        ]), 'train_neg_root_mean_squared_error': array([-0.7253577 , -1.61325939, -1.44835074, -1.33238294, -1.29267543,\n       -1.50677082, -0.52308282, -1.35059403, -1.33360475, -1.51216565]), 'test_neg_mean_absolute_error': array([-1.74285714, -1.64705882, -1.29411765, -1.88235294, -1.26470588,\n       -1.5       , -1.14705882, -1.85294118, -1.58823529, -1.47058824]), 'train_neg_mean_absolute_error': array([-0.17973856, -0.85016287, -0.80781759, -0.65472313, -0.64820847,\n       -0.7980456 , -0.11074919, -0.69055375, -0.64495114, -0.82736156])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_5_21_12_21", "dataset_variant": "only_binary", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2927731092436975, "f1_micro": 0.2927731092436975, "f1_macro": 0.28362125969268825, "neg_root_mean_squared_error": -2.1105919141277734, "neg_mean_absolute_error": -1.5499159663865547}, "mean_train_score": {"accuracy": 0.7455898320240147, "f1_micro": 0.7455898320240147, "f1_macro": 0.7430686462526696, "neg_root_mean_squared_error": -1.1866646252516442, "neg_mean_absolute_error": -0.563879840752805}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 2, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=17), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 10, 'estimator__estimator__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([7.25500345, 8.12100267, 7.21499562, 7.35208702, 7.17399907,\n       6.46390271, 6.74500251, 6.76889706, 6.84737968, 6.85393977]), 'score_time': array([0.00399637, 0.00500107, 0.00500369, 0.00799274, 0.00499511,\n       0.00400019, 0.00399709, 0.00399995, 0.00900698, 0.00699878]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=DecisionT...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=18)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.45714286, 0.38235294, 0.44117647, 0.20588235, 0.23529412,\n       0.29411765, 0.17647059, 0.29411765, 0.26470588, 0.17647059]), 'train_accuracy': array([0.96078431, 0.94462541, 0.61237785, 0.74592834, 0.6286645 ,\n       0.71335505, 0.36807818, 0.92833876, 0.96416938, 0.58957655]), 'test_f1_micro': array([0.45714286, 0.38235294, 0.44117647, 0.20588235, 0.23529412,\n       0.29411765, 0.17647059, 0.29411765, 0.26470588, 0.17647059]), 'train_f1_micro': array([0.96078431, 0.94462541, 0.61237785, 0.74592834, 0.6286645 ,\n       0.71335505, 0.36807818, 0.92833876, 0.96416938, 0.58957655]), 'test_f1_macro': array([0.4317048 , 0.36219336, 0.42149279, 0.22871573, 0.22777778,\n       0.28720882, 0.13692657, 0.30804989, 0.24801587, 0.18412698]), 'train_f1_macro': array([0.9609498 , 0.94468877, 0.61011991, 0.74808856, 0.62622623,\n       0.70830243, 0.35019584, 0.92843148, 0.96429104, 0.58939239]), 'test_neg_root_mean_squared_error': array([-1.77281052, -2.20293921, -1.66274047, -1.79869234, -1.940285  ,\n       -2.242635  , -2.22287572, -2.413199  , -2.3763541 , -2.47338777]), 'train_neg_root_mean_squared_error': array([-0.62622429, -0.65819811, -1.57028598, -1.31639623, -1.53567776,\n       -1.45172031, -1.99674001, -0.6872501 , -0.43838614, -1.58576732]), 'test_neg_mean_absolute_error': array([-1.02857143, -1.5       , -1.11764706, -1.41176471, -1.47058824,\n       -1.67647059, -1.82352941, -1.76470588, -1.76470588, -1.94117647]), 'train_neg_mean_absolute_error': array([-0.11111111, -0.14006515, -0.83713355, -0.58631922, -0.80130293,\n       -0.68078176, -1.38110749, -0.15309446, -0.07491857, -0.87296417])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(DecisionTreeClassifier(), n_jobs = -1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__estimator__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]