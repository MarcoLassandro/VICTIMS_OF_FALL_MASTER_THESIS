[{"experiment_name": "Experiment_4_20_11_21", "dataset_variant": "complete", "estimator": "SVR(kernel = 'poly', C = 0.5)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.8107536296788027, "r2": 0.1409408004105788, "neg_mean_absolute_error": -1.4409567520348747}, "mean_train_score": {"neg_root_mean_squared_error": -1.387729220924459, "r2": 0.5077589054776512, "neg_mean_absolute_error": -0.9874665022423132}, "best_params": "[{'feature_extraction__n_components': 9, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.001, 'estimator__degree': 3}, {'feature_extraction__n_components': 16, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.01, 'estimator__degree': 3}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 11, 'estimator__tol': 0.01, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 15, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 1e-05, 'estimator__degree': 3}, {'feature_extraction__n_components': 15, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 1e-05, 'estimator__degree': 3}, {'feature_extraction__n_components': 17, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.001, 'estimator__degree': 3}, {'feature_extraction__n_components': 13, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.01, 'estimator__degree': 3}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.01, 'estimator__degree': 3}]", "cv_results": "{'fit_time': array([142.10699654, 139.85101748, 143.79097152, 141.00000048,\n       141.04801941, 134.40298104, 132.44299984, 134.3310039 ,\n       141.81597686, 141.74402213]), 'score_time': array([0.00300336, 0.00400162, 0.00400329, 0.0019958 , 0.00298548,\n       0.00199842, 0.00300407, 0.00302148, 0.00199986, 0.00299978]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.56281761, -1.61765597, -1.69306258, -1.92598773, -1.68676192,\n       -1.58340547, -1.71127555, -1.88006896, -1.89565614, -2.55084436]), 'train_neg_root_mean_squared_error': array([-1.39415016, -1.35932122, -1.44219167, -1.34527057, -1.36016935,\n       -1.42543638, -1.36571621, -1.32343588, -1.38770777, -1.47389301]), 'test_r2': array([ 0.40588987,  0.34080773,  0.26166917,  0.07921417,  0.26006487,\n        0.34796584,  0.23840171,  0.08630005,  0.07108674, -0.68199213]), 'train_r2': array([0.50085693, 0.52733165, 0.46933704, 0.5363958 , 0.52853822,\n       0.48220697, 0.52468508, 0.5533358 , 0.50889836, 0.4460032 ]), 'test_neg_mean_absolute_error': array([-1.30983742, -1.3113187 , -1.4014665 , -1.55280089, -1.37732401,\n       -1.31679703, -1.45159988, -1.49551981, -1.61878949, -1.57411381]), 'train_neg_mean_absolute_error': array([-1.00227358, -0.96319151, -1.04453871, -0.97331234, -0.94783524,\n       -1.03325852, -0.94288968, -0.92790904, -0.96754708, -1.07190934])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR(kernel = 'poly', C = 0.5)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__degree": "[3, 4, 5, 6]", "estimator__gamma": "['auto', 'scale']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_20_11_21", "dataset_variant": "only_totals", "estimator": "SVR(kernel = 'poly', C = 0.5)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.8039265299870977, "r2": 0.16018712463967708, "neg_mean_absolute_error": -1.4990451069333852}, "mean_train_score": {"neg_root_mean_squared_error": -1.6453862359685647, "r2": 0.30748782963175847, "neg_mean_absolute_error": -1.3548717498466831}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 1, 'estimator__tol': 0.01, 'estimator__gamma': 'scale', 'estimator__epsilon': 1e-05, 'estimator__degree': 3}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__gamma': 'auto', 'estimator__epsilon': 1e-05, 'estimator__degree': 3}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 1e-05, 'estimator__degree': 3}, {'feature_extraction__n_components': 1, 'estimator__tol': 0.001, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__gamma': 'auto', 'estimator__epsilon': 0.1, 'estimator__degree': 3}]", "cv_results": "{'fit_time': array([ 97.39900064,  99.83799911, 106.36699271, 100.07898998,\n       100.40699887, 100.84100318, 101.92700577,  99.01400018,\n       109.78123617, 104.27099943]), 'score_time': array([0.00299644, 0.00300455, 0.00199986, 0.00400162, 0.00299978,\n       0.00199294, 0.0029974 , 0.00300074, 0.00299788, 0.00399733]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500,\n                   param_distributions={'estimator__degree': [3, 4, 5, 6],\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.51627   , -1.80583408, -1.81635327, -1.96929836, -1.63426183,\n       -1.61521526, -1.95755203, -1.88722501, -1.76948026, -2.06777519]), 'train_neg_root_mean_squared_error': array([-1.66804135, -1.73369131, -1.65037915, -1.48764241, -1.75737618,\n       -1.60955275, -1.6247357 , -1.65478164, -1.64834251, -1.61931937]), 'test_r2': array([ 0.44075327,  0.17852289,  0.15022172,  0.03733622,  0.30540869,\n        0.32150463,  0.00341878,  0.07933124,  0.19062929, -0.10525548]), 'train_r2': array([0.28547149, 0.23112475, 0.30507128, 0.43307556, 0.21297235,\n       0.33980695, 0.32729297, 0.30167639, 0.30710049, 0.33128609]), 'test_neg_mean_absolute_error': array([-1.29281783, -1.57005506, -1.5583099 , -1.64780091, -1.37378551,\n       -1.30719996, -1.62834821, -1.60656676, -1.5309288 , -1.47463812]), 'train_neg_mean_absolute_error': array([-1.3952316 , -1.43384566, -1.37032827, -1.17516847, -1.47914616,\n       -1.29312772, -1.34643236, -1.36096779, -1.36382457, -1.3306449 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR(kernel = 'poly', C = 0.5)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__degree": "[3, 4, 5, 6]", "estimator__gamma": "['auto', 'scale']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_20_11_21", "dataset_variant": "only_binary", "estimator": "SVR(kernel = 'poly', C = 0.5)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6950021210323054, "r2": 0.2628012177527227, "neg_mean_absolute_error": -1.4035313177150401}, "mean_train_score": {"neg_root_mean_squared_error": -1.4555340780744928, "r2": 0.4582670295838899, "neg_mean_absolute_error": -1.0959622674177893}, "best_params": "[{'feature_extraction__n_components': 9, 'estimator__tol': 0.01, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 11, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 11, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 12, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.01, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.1, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__gamma': 'scale', 'estimator__epsilon': 0.0001, 'estimator__degree': 3}]", "cv_results": "{'fit_time': array([125.74847341, 144.45729613, 129.18910503, 122.14776683,\n       115.23599887, 115.34999681, 117.16452575, 115.10200047,\n       117.37322044, 113.97700143]), 'score_time': array([0.00200129, 0.00399899, 0.0039835 , 0.00199723, 0.00300193,\n       0.00299811, 0.00199819, 0.00299811, 0.00199866, 0.00199795]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              SVR(C=0.5, kernel='poly'))]),\n                   n_iter=500...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__gamma': ['auto', 'scale'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.6230999 , -1.52723296, -1.76025494, -1.90385574, -1.61529901,\n       -1.60747482, -1.7579933 , -1.78390748, -1.66766504, -1.70323801]), 'train_neg_root_mean_squared_error': array([-1.41151769, -1.39001121, -1.50077216, -1.35069077, -1.40507779,\n       -1.49175589, -1.48237995, -1.50757523, -1.49397856, -1.52158153]), 'test_r2': array([0.3591729 , 0.41244253, 0.20190217, 0.10025453, 0.32143427,\n       0.32799203, 0.1962509 , 0.17737729, 0.28109138, 0.25009419]), 'train_r2': array([0.48834339, 0.50574742, 0.42535142, 0.53265248, 0.49689196,\n       0.43290471, 0.44001088, 0.42039339, 0.43080108, 0.40957356]), 'test_neg_mean_absolute_error': array([-1.36155885, -1.24807349, -1.49089177, -1.54222895, -1.35939888,\n       -1.30732296, -1.38769444, -1.52881738, -1.41095532, -1.39837114]), 'train_neg_mean_absolute_error': array([-1.01469436, -1.01487153, -1.15449914, -0.98531647, -1.03677183,\n       -1.13761299, -1.16487888, -1.17030823, -1.12638769, -1.15428155])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR(kernel = 'poly', C = 0.5)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__degree": "[3, 4, 5, 6]", "estimator__gamma": "['auto', 'scale']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]