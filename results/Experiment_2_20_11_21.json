[{"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "complete", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5507225396141693, "r2": 0.37668412117563443, "neg_mean_absolute_error": -1.231774898881248}, "mean_train_score": {"neg_root_mean_squared_error": -1.5098148317640567, "r2": 0.41781616055891824, "neg_mean_absolute_error": -1.195257697491529}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 4, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 6, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 6, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 4, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 4, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 4, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 4, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.25}]", "cv_results": "{'fit_time': array([40.93702102, 41.39800167, 41.49399567, 41.51899886, 41.22199702,\n       41.50801778, 41.2340014 , 41.04900074, 41.62899661, 41.22400498]), 'score_time': array([0.00297928, 0.00297856, 0.00200152, 0.00199604, 0.00200176,\n       0.00197983, 0.00199819, 0.00199962, 0.0019958 , 0.0010016 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.28820663, -1.37677667, -1.70695227, -1.82345225, -1.33931092,\n       -1.48191114, -1.57282866, -1.74247562, -1.70534242, -1.46996881]), 'train_neg_root_mean_squared_error': array([-1.53651246, -1.52832665, -1.48353683, -1.48627139, -1.52653861,\n       -1.51742127, -1.51323971, -1.48678975, -1.49201947, -1.52749218]), 'test_r2': array([0.59633469, 0.52250726, 0.24950511, 0.17464576, 0.53350296,\n       0.42887602, 0.35664764, 0.21514495, 0.24823997, 0.44143685]), 'train_r2': array([0.3937132 , 0.40249065, 0.43847451, 0.43412004, 0.40615089,\n       0.4132233 , 0.41645281, 0.4362657 , 0.43229291, 0.40497758]), 'test_neg_mean_absolute_error': array([-1.03203758, -1.09083825, -1.32022146, -1.41043332, -1.02588455,\n       -1.13208899, -1.26865467, -1.44234326, -1.40228516, -1.19296175]), 'train_neg_mean_absolute_error': array([-1.22323665, -1.20850432, -1.17201955, -1.1825998 , -1.21651648,\n       -1.20187145, -1.19360527, -1.16633247, -1.17641913, -1.21147186])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "only_totals", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.544289634349036, "r2": 0.3827911116113514, "neg_mean_absolute_error": -1.226613358069002}, "mean_train_score": {"neg_root_mean_squared_error": -1.5225567336371193, "r2": 0.40788762869033707, "neg_mean_absolute_error": -1.206520871297704}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.25}]", "cv_results": "{'fit_time': array([3.66800475, 3.66400027, 3.76299834, 3.90100241, 3.83499789,\n       3.62700009, 3.75899887, 3.87899542, 3.71201634, 3.91799808]), 'score_time': array([0.00199699, 0.00200152, 0.00199986, 0.00099993, 0.00200248,\n       0.00199342, 0.00100112, 0.00200009, 0.00198436, 0.00100017]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.33527064, -1.40415451, -1.68639702, -1.81943642, -1.33699307,\n       -1.49374575, -1.44663278, -1.74505113, -1.71030937, -1.46490566]), 'train_neg_root_mean_squared_error': array([-1.55519908, -1.53297021, -1.49868095, -1.48467853, -1.53846525,\n       -1.52314996, -1.56657818, -1.49726917, -1.50175869, -1.5268173 ]), 'test_r2': array([0.56630045, 0.50332812, 0.26747131, 0.17827715, 0.53511623,\n       0.41971756, 0.45574469, 0.21282308, 0.24385447, 0.44527805]), 'train_r2': array([0.37887656, 0.39885427, 0.42695177, 0.43533231, 0.39683531,\n       0.40878445, 0.37459022, 0.4282909 , 0.42485725, 0.40550325]), 'test_neg_mean_absolute_error': array([-1.04796217, -1.1127748 , -1.28700903, -1.40227116, -1.05223769,\n       -1.14383009, -1.16155445, -1.4563737 , -1.41202616, -1.19009433]), 'train_neg_mean_absolute_error': array([-1.2353512 , -1.20843467, -1.19315391, -1.17705029, -1.22011547,\n       -1.20899668, -1.25265775, -1.17662898, -1.18284526, -1.20997452])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "only_binary", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.568531862255, "r2": 0.36271123244906556, "neg_mean_absolute_error": -1.2544607889736379}, "mean_train_score": {"neg_root_mean_squared_error": -1.5205522285740913, "r2": 0.40947840674457037, "neg_mean_absolute_error": -1.212336137779077}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 7, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 6, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 6, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 8, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 2, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.03125}]", "cv_results": "{'fit_time': array([32.24200106, 32.26599026, 32.1629827 , 32.15399694, 31.79600644,\n       32.27399993, 32.58799934, 32.22300124, 32.3120091 , 32.58899021]), 'score_time': array([0.00199938, 0.00202441, 0.00199509, 0.00100327, 0.00199771,\n       0.00200462, 0.00200438, 0.00199604, 0.00200105, 0.00200152]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.35514026, -1.33375411, -1.77115647, -1.82154375, -1.35762747,\n       -1.51588373, -1.53745712, -1.769084  , -1.68225317, -1.54141855]), 'train_neg_root_mean_squared_error': array([-1.5484331 , -1.53803722, -1.50207316, -1.48025341, -1.5498985 ,\n       -1.53261104, -1.52055731, -1.48908375, -1.51432354, -1.53025126]), 'test_r2': array([0.553297  , 0.5518831 , 0.19198607, 0.17637256, 0.52065599,\n       0.40239   , 0.38525912, 0.19099176, 0.26845887, 0.38581783]), 'train_r2': array([0.38426927, 0.39487371, 0.42435468, 0.43869331, 0.38783706,\n       0.40141694, 0.41079542, 0.43452477, 0.41519283, 0.40282608]), 'test_neg_mean_absolute_error': array([-1.07220268, -1.03892222, -1.41820727, -1.40383059, -1.05212598,\n       -1.18872753, -1.22538161, -1.49960482, -1.3904383 , -1.25516688]), 'train_neg_mean_absolute_error': array([-1.23786758, -1.22345109, -1.198033  , -1.18064477, -1.24476861,\n       -1.22663494, -1.21608206, -1.1704265 , -1.20824479, -1.21720803])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]