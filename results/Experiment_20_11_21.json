[{"experiment_name": "Experiment_20_11_21", "dataset_variant": "complete", "estimator": "Ridge()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5537440357072234, "r2": 0.37440090968046, "neg_mean_absolute_error": -1.2343656155946552}, "mean_train_score": {"neg_root_mean_squared_error": -1.5113673810571258, "r2": 0.4166042133898646, "neg_mean_absolute_error": -1.1958514612797098}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 0.25}]", "cv_results": "{'fit_time': array([198.12923908, 153.7990129 , 141.56746316, 157.39896584,\n       141.22405195, 147.2057991 , 132.43900204, 150.07452083,\n       156.02651978, 149.9840095 ]), 'score_time': array([0.00200081, 0.00199914, 0.00100064, 0.00199866, 0.00199723,\n       0.00099945, 0.00299931, 0.00199962, 0.00100112, 0.00200272]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.28796304, -1.39388291, -1.72635024, -1.79655156, -1.33320767,\n       -1.48735461, -1.56353767, -1.75004754, -1.71450375, -1.48404136]), 'train_neg_root_mean_squared_error': array([-1.5339102 , -1.53531807, -1.49359194, -1.47791672, -1.54015699,\n       -1.51432804, -1.51188258, -1.48300166, -1.49807529, -1.52549232]), 'test_r2': array([0.59648734, 0.510568  , 0.23235079, 0.1988184 , 0.53774494,\n       0.42467252, 0.364226  , 0.20830895, 0.24014116, 0.430691  ]), 'train_r2': array([0.3957651 , 0.39701146, 0.43083691, 0.44046404, 0.39550807,\n       0.41561313, 0.41749904, 0.43913464, 0.42767512, 0.40653462]), 'test_neg_mean_absolute_error': array([-1.01959973, -1.12024212, -1.30626737, -1.3786594 , -1.04233996,\n       -1.13572421, -1.26683965, -1.44393321, -1.41573639, -1.21431412]), 'train_neg_mean_absolute_error': array([-1.2185086 , -1.21123513, -1.18715544, -1.17158532, -1.22345151,\n       -1.20225046, -1.1934145 , -1.16559419, -1.17929841, -1.20602105])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 1000, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__fit_intercept": "[True, False]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__solver": "['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs']", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_20_11_21", "dataset_variant": "only_totals", "estimator": "Ridge()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.556675000732298, "r2": 0.37249370508019897, "neg_mean_absolute_error": -1.2365204244492196}, "mean_train_score": {"neg_root_mean_squared_error": -1.5272058583189225, "r2": 0.40431853025511055, "neg_mean_absolute_error": -1.2074960658003988}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'lsqr', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.015625}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'lsqr', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'lsqr', 'estimator__fit_intercept': True, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__solver': 'lsqr', 'estimator__fit_intercept': True, 'estimator__alpha': 0.015625}]", "cv_results": "{'fit_time': array([ 88.20201206, 109.18836689, 107.26645041, 105.77280521,\n       112.32989955, 119.02697206, 119.1768086 , 119.29923177,\n       118.61123657, 121.52029753]), 'score_time': array([0.00100017, 0.00199938, 0.0019927 , 0.00199962, 0.00199556,\n       0.00299644, 0.0010004 , 0.00299978, 0.00298524, 0.00198984]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.50...\n                                        'estimator__fit_intercept': [True,\n                                                                     False],\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.32521821, -1.42453472, -1.72097521, -1.78980975, -1.36448521,\n       -1.47969071, -1.453248  , -1.79281862, -1.73354689, -1.48242268]), 'train_neg_root_mean_squared_error': array([-1.55364026, -1.54354603, -1.50499938, -1.49932813, -1.54820575,\n       -1.53558234, -1.54438891, -1.49852872, -1.50720792, -1.53663113]), 'test_r2': array([0.57280599, 0.48880587, 0.23712354, 0.20482021, 0.51580117,\n       0.43058623, 0.45075573, 0.16913828, 0.22316778, 0.43193224]), 'train_r2': array([0.38012107, 0.39053117, 0.42210964, 0.42413398, 0.3891735 ,\n       0.39909372, 0.39218156, 0.42732861, 0.42067579, 0.39783627]), 'test_neg_mean_absolute_error': array([-1.0539696 , -1.14018758, -1.29763169, -1.40284793, -1.07310483,\n       -1.13193901, -1.15057127, -1.46719774, -1.4343134 , -1.21344119]), 'train_neg_mean_absolute_error': array([-1.23289517, -1.21444454, -1.19640108, -1.18260307, -1.22859778,\n       -1.21607551, -1.2258554 , -1.1795117 , -1.18473294, -1.21384347])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 1000, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__fit_intercept": "[True, False]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__solver": "['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs']", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_20_11_21", "dataset_variant": "only_binary", "estimator": "Ridge()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5500465367815512, "r2": 0.37721286692437433, "neg_mean_absolute_error": -1.2414510622941015}, "mean_train_score": {"neg_root_mean_squared_error": -1.512460088973017, "r2": 0.41569582843891684, "neg_mean_absolute_error": -1.2090122935286665}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 9, 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.001, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 0.0625}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.0001, 'estimator__solver': 'svd', 'estimator__fit_intercept': True, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__solver': 'sparse_cg', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__solver': 'lsqr', 'estimator__fit_intercept': True, 'estimator__alpha': 4.0}]", "cv_results": "{'fit_time': array([155.48865032, 156.13748837, 151.63788915, 156.93844414,\n       161.98252678, 157.97095823, 134.68028593, 157.27407241,\n       146.78534508, 151.8870461 ]), 'score_time': array([0.00300026, 0.00204706, 0.00199938, 0.00299835, 0.00299788,\n       0.00200057, 0.00199866, 0.00199819, 0.00400162, 0.00199819]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', Ridge())]),\n                   n_iter=1000,\n                   param_distribut...\n                                        'estimator__solver': ['auto', 'svd',\n                                                              'cholesky',\n                                                              'lsqr',\n                                                              'sparse_cg',\n                                                              'sag', 'saga',\n                                                              'lbfgs'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.36032352, -1.32670245, -1.75033481, -1.80281706, -1.27457706,\n       -1.47058199, -1.53202981, -1.74331452, -1.66139285, -1.57839129]), 'train_neg_root_mean_squared_error': array([-1.55099858, -1.53063041, -1.47990292, -1.47579845, -1.55856679,\n       -1.51467028, -1.51272274, -1.49740866, -1.49554664, -1.50835541]), 'test_r2': array([0.5498733 , 0.55660903, 0.21087237, 0.19322038, 0.57750822,\n       0.43757508, 0.3895916 , 0.21438904, 0.28648894, 0.35600071]), 'train_r2': array([0.38222726, 0.40068795, 0.44122205, 0.44206684, 0.38097048,\n       0.41534896, 0.41685146, 0.42818437, 0.42960558, 0.41979333]), 'test_neg_mean_absolute_error': array([-1.09922059, -1.04504138, -1.38345654, -1.38549385, -0.96548647,\n       -1.16130987, -1.23990138, -1.44349938, -1.39999701, -1.29110416]), 'train_neg_mean_absolute_error': array([-1.25330513, -1.21833821, -1.17757659, -1.17628553, -1.26374797,\n       -1.21155138, -1.20686221, -1.1925271 , -1.19119734, -1.19873147])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 1000, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__fit_intercept": "[True, False]", "estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__solver": "['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga', 'lbfgs']", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]