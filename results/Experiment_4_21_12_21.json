[{"experiment_name": "Experiment_4_21_12_21", "dataset_variant": "complete", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.346218487394958, "f1_micro": 0.346218487394958, "f1_macro": 0.3384340262911691, "neg_root_mean_squared_error": -1.8560580657234464, "neg_mean_absolute_error": -1.3225210084033612}, "mean_train_score": {"accuracy": 0.8361009984884291, "f1_micro": 0.8361009984884291, "f1_macro": 0.8361381588160237, "neg_root_mean_squared_error": -0.9454621433374168, "neg_mean_absolute_error": -0.37536565114645204}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 8.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.001}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 4.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 16.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 1e-05}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 0.0625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([383.35599852, 386.26100326, 418.96854281, 402.92912054,\n       440.52451754, 426.57263565, 449.99192214, 433.77950835,\n       406.28549361, 383.28210688]), 'score_time': array([0.20500135, 0.23100042, 0.21300125, 0.21500182, 0.22399712,\n       0.20800662, 0.20699883, 0.22900343, 0.19500422, 0.22999883]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.41176471, 0.38235294, 0.23529412, 0.32352941,\n       0.38235294, 0.47058824, 0.23529412, 0.32352941, 0.41176471]), 'train_accuracy': array([0.83006536, 0.80781759, 0.6970684 , 0.93159609, 0.78175896,\n       0.99674267, 0.62214984, 0.99674267, 0.71009772, 0.98697068]), 'test_f1_micro': array([0.28571429, 0.41176471, 0.38235294, 0.23529412, 0.32352941,\n       0.38235294, 0.47058824, 0.23529412, 0.32352941, 0.41176471]), 'train_f1_micro': array([0.83006536, 0.80781759, 0.6970684 , 0.93159609, 0.78175896,\n       0.99674267, 0.62214984, 0.99674267, 0.71009772, 0.98697068]), 'test_f1_macro': array([0.25687408, 0.38787879, 0.37899006, 0.23497217, 0.3276644 ,\n       0.3739229 , 0.47058259, 0.21788925, 0.32286761, 0.41269841]), 'train_f1_macro': array([0.82938486, 0.80676649, 0.70012999, 0.93094749, 0.78130876,\n       0.99673257, 0.62465083, 0.99681557, 0.70777247, 0.98687256]), 'test_neg_root_mean_squared_error': array([-1.87464282, -1.31730563, -1.74052054, -2.30089497, -1.94784949,\n       -1.69774938, -1.69774938, -2.35147013, -1.91741247, -1.71498585]), 'train_neg_root_mean_squared_error': array([-1.02899151, -1.16546394, -1.40612898, -0.89515526, -1.32502842,\n       -0.22829206, -1.47288191, -0.05707301, -1.40844359, -0.46716276]), 'test_neg_mean_absolute_error': array([-1.34285714, -0.91176471, -1.20588235, -1.76470588, -1.38235294,\n       -1.11764706, -1.17647059, -1.82352941, -1.38235294, -1.11764706]), 'train_neg_mean_absolute_error': array([-0.37254902, -0.43322476, -0.69381107, -0.21498371, -0.53745928,\n       -0.01302932, -0.7752443 , -0.00325733, -0.66123779, -0.04885993])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_21_12_21", "dataset_variant": "only_totals", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.33705882352941174, "f1_micro": 0.33705882352941174, "f1_macro": 0.32186805957814363, "neg_root_mean_squared_error": -1.8699843068682032, "neg_mean_absolute_error": -1.3438655462184874}, "mean_train_score": {"accuracy": 0.8331789827766067, "f1_micro": 0.8331789827766067, "f1_macro": 0.8323425722119021, "neg_root_mean_squared_error": -0.9482702038247529, "neg_mean_absolute_error": -0.3874145749505014}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 8.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.0625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}]", "cv_results": "{'fit_time': array([377.46904373, 376.63002205, 456.12804651, 503.19887233,\n       450.48582244, 484.54653883, 426.60447335, 436.05738688,\n       423.05849862, 415.93317032]), 'score_time': array([0.19400072, 0.26900244, 0.28999662, 0.23499703, 0.27999425,\n       0.23099852, 0.23400044, 0.20900297, 0.20799828, 0.3029995 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassifier(C=2,\n                                                                                         base_score=None,\n                                                                                         booster=None,\n                                                                                         colsample_bylevel=None,\n                                                                                         colsample_bynod...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.4       , 0.35294118, 0.32352941, 0.26470588, 0.26470588,\n       0.38235294, 0.5       , 0.26470588, 0.23529412, 0.38235294]), 'train_accuracy': array([0.85947712, 0.75895765, 0.68078176, 0.99348534, 0.63517915,\n       0.81758958, 0.99348534, 0.99674267, 0.97068404, 0.62540717]), 'test_f1_micro': array([0.4       , 0.35294118, 0.32352941, 0.26470588, 0.26470588,\n       0.38235294, 0.5       , 0.26470588, 0.23529412, 0.38235294]), 'train_f1_micro': array([0.85947712, 0.75895765, 0.68078176, 0.99348534, 0.63517915,\n       0.81758958, 0.99348534, 0.99674267, 0.97068404, 0.62540717]), 'test_f1_macro': array([0.36093873, 0.30661719, 0.31673882, 0.29433107, 0.23650794,\n       0.37887668, 0.46277056, 0.27655123, 0.22103175, 0.36431664]), 'train_f1_macro': array([0.85716303, 0.75668974, 0.67985585, 0.99367941, 0.63332599,\n       0.81890427, 0.99375638, 0.99699248, 0.97053558, 0.622523  ]), 'test_neg_root_mean_squared_error': array([-1.60356745, -1.27186755, -1.97781817, -2.11437656, -2.05798302,\n       -1.79869234, -1.63599223, -2.35147013, -1.95538472, -1.9326909 ]), 'train_neg_root_mean_squared_error': array([-1.10996673, -1.42796637, -1.45620094, -0.23531807, -1.49265302,\n       -1.18624033, -0.23531807, -0.05707301, -0.72417537, -1.55779013]), 'test_neg_mean_absolute_error': array([-1.08571429, -0.91176471, -1.44117647, -1.58823529, -1.58823529,\n       -1.17647059, -1.02941176, -1.82352941, -1.47058824, -1.32352941]), 'train_neg_mean_absolute_error': array([-0.3627451 , -0.61237785, -0.70684039, -0.01628664, -0.7752443 ,\n       -0.42996743, -0.01628664, -0.00325733, -0.11400651, -0.83713355])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_21_12_21", "dataset_variant": "only_binary", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3021848739495799, "f1_micro": 0.3021848739495799, "f1_macro": 0.2926502862217148, "neg_root_mean_squared_error": -1.956393702237212, "neg_mean_absolute_error": -1.4339495798319328}, "mean_train_score": {"accuracy": 0.8241031700410891, "f1_micro": 0.8241031700410891, "f1_macro": 0.8222526034423738, "neg_root_mean_squared_error": -0.9913701386347311, "neg_mean_absolute_error": -0.40847331332098535}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.5, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 32.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.001}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 4.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 16.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 32.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([385.24726725, 398.62663937, 393.82409263, 386.56012154,\n       391.35714436, 377.05461836, 384.84707427, 386.92454386,\n       387.59107971, 372.2511282 ]), 'score_time': array([0.20699644, 0.19500017, 0.19699526, 0.20599985, 0.19799829,\n       0.19499826, 0.21799803, 0.19800019, 0.19700003, 0.19501066]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=XGBClassif...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.26470588, 0.35294118, 0.23529412, 0.32352941,\n       0.41176471, 0.38235294, 0.20588235, 0.23529412, 0.35294118]), 'train_accuracy': array([0.99673203, 0.53420195, 0.98045603, 0.80130293, 0.63517915,\n       0.71661238, 0.92833876, 0.97394137, 0.98371336, 0.69055375]), 'test_f1_micro': array([0.25714286, 0.26470588, 0.35294118, 0.23529412, 0.32352941,\n       0.41176471, 0.38235294, 0.20588235, 0.23529412, 0.35294118]), 'train_f1_micro': array([0.99673203, 0.53420195, 0.98045603, 0.80130293, 0.63517915,\n       0.71661238, 0.92833876, 0.97394137, 0.98371336, 0.69055375]), 'test_f1_macro': array([0.2042735 , 0.23952714, 0.3644094 , 0.22368187, 0.31026513,\n       0.4064832 , 0.37728938, 0.22835498, 0.23809524, 0.33412302]), 'train_f1_macro': array([0.99668792, 0.53551591, 0.98077975, 0.79893599, 0.63058643,\n       0.71181877, 0.92650153, 0.97367846, 0.98348263, 0.68453863]), 'test_neg_root_mean_squared_error': array([-1.96396101, -1.60879933, -1.70638938, -1.94784949, -1.94784949,\n       -1.71498585, -2.18282063, -2.32631999, -2.0436415 , -2.12132034]), 'train_neg_root_mean_squared_error': array([-0.22866478, -1.89633626, -0.58482437, -1.08588816, -1.57856158,\n       -1.33482544, -0.71284172, -0.54444186, -0.43838614, -1.50893107]), 'test_neg_mean_absolute_error': array([-1.45714286, -1.23529412, -1.20588235, -1.5       , -1.38235294,\n       -1.11764706, -1.47058824, -1.88235294, -1.58823529, -1.5       ]), 'train_neg_mean_absolute_error': array([-0.0130719 , -1.11400651, -0.08143322, -0.41042345, -0.83061889,\n       -0.60912052, -0.16938111, -0.08143322, -0.04885993, -0.72638436])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]