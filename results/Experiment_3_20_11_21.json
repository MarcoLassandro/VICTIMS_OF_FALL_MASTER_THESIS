[{"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "complete", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5364430198871086, "r2": 0.38631165588657274, "neg_mean_absolute_error": -1.2090833728602886}, "mean_train_score": {"neg_root_mean_squared_error": -1.3954168349290648, "r2": 0.5021696977038506, "neg_mean_absolute_error": -1.02657015350802}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 0.5}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 1.0}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.25}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 0.5}, {'feature_extraction__n_components': 6, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.01, 'estimator__C': 0.0625}]", "cv_results": "{'fit_time': array([274.58900094, 252.72499895, 254.40700245, 245.28800011,\n       239.36299682, 242.10999775, 304.04200196, 259.2809999 ,\n       222.51699901, 274.8049984 ]), 'score_time': array([0.00499845, 0.00600863, 0.00399709, 0.00400186, 0.00499964,\n       0.00399971, 0.00499821, 0.00599957, 0.00599885, 0.0030036 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.27968681, -1.41301388, -1.61564772, -1.91915169, -1.34482894,\n       -1.51948232, -1.31697687, -1.8135898 , -1.61193974, -1.53011244]), 'train_neg_root_mean_squared_error': array([-1.41255624, -1.39774934, -1.32799912, -1.33308103, -1.40687263,\n       -1.38426158, -1.37483936, -1.42160517, -1.38000329, -1.51520058]), 'test_r2': array([0.60165648, 0.49704094, 0.32764548, 0.08573899, 0.52965107,\n       0.39954928, 0.54893164, 0.14977442, 0.32833357, 0.39479469]), 'train_r2': array([0.48759019, 0.50022914, 0.55004573, 0.54475921, 0.4956058 ,\n       0.51168862, 0.51831354, 0.48461315, 0.51433636, 0.41451524]), 'test_neg_mean_absolute_error': array([-0.99618927, -1.0538219 , -1.19407012, -1.4715757 , -1.10302307,\n       -1.20773543, -1.07811061, -1.52213949, -1.26553869, -1.19862945]), 'train_neg_mean_absolute_error': array([-1.04816946, -1.03253118, -0.92650879, -0.98079452, -1.0393291 ,\n       -1.00383828, -0.94770623, -1.10722556, -1.00926747, -1.17033096])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "only_totals", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5458543193049468, "r2": 0.3769918421218932, "neg_mean_absolute_error": -1.2095082313266765}, "mean_train_score": {"neg_root_mean_squared_error": -1.4062711952421831, "r2": 0.49416860957803965, "neg_mean_absolute_error": -1.0327991223513457}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 0.0625}]", "cv_results": "{'fit_time': array([166.16400123, 176.86800337, 173.05200124, 175.1310029 ,\n       167.43300176, 163.84400105, 174.84499097, 175.16400123,\n       178.00399923, 180.76500106]), 'score_time': array([0.00600028, 0.00299644, 0.0049994 , 0.00600266, 0.00600243,\n       0.00599957, 0.00599957, 0.00400305, 0.00600171, 0.00299716]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.3241216 , -1.36906411, -1.6247793 , -1.92411061, -1.2934102 ,\n       -1.6239453 , -1.29966208, -1.85308618, -1.67242089, -1.47394292]), 'train_neg_root_mean_squared_error': array([-1.44285557, -1.43541976, -1.40167122, -1.35574564, -1.42742016,\n       -1.35732038, -1.41772349, -1.32788256, -1.35981476, -1.53685841]), 'test_r2': array([0.57351269, 0.52784201, 0.32002375, 0.08100814, 0.56493051,\n       0.31415044, 0.5607144 , 0.11233872, 0.27698517, 0.43841258]), 'train_r2': array([0.46537205, 0.47292772, 0.49873761, 0.52914791, 0.48076475,\n       0.53051117, 0.48779526, 0.55032921, 0.5284423 , 0.39765812]), 'test_neg_mean_absolute_error': array([-0.97706239, -1.02518531, -1.23607059, -1.4724989 , -1.04826304,\n       -1.23912987, -1.03895183, -1.57806467, -1.3147172 , -1.16513851]), 'train_neg_mean_absolute_error': array([-1.0900916 , -1.07210875, -1.05111747, -1.01758692, -0.98196976,\n       -0.96101444, -1.0333057 , -0.94979235, -0.97838771, -1.19261651])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "only_binary", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6023562901157358, "r2": 0.3332777519210948, "neg_mean_absolute_error": -1.261596153091813}, "mean_train_score": {"neg_root_mean_squared_error": -1.4074529492893333, "r2": 0.4911884438613283, "neg_mean_absolute_error": -1.0560997319034358}, "best_params": "[{'feature_extraction__n_components': 7, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 12, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 1e-05, 'estimator__C': 0.0625}, {'feature_extraction__n_components': 7, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'sigmoid', 'estimator__epsilon': 0.1, 'estimator__C': 0.25}, {'feature_extraction__n_components': 11, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 8, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'sigmoid', 'estimator__epsilon': 0.001, 'estimator__C': 0.125}]", "cv_results": "{'fit_time': array([208.67500257, 221.09199882, 229.44399881, 226.01899767,\n       237.01899266, 211.83399963, 214.82999849, 213.46699762,\n       221.15401006, 219.28700209]), 'score_time': array([0.00299835, 0.00600052, 0.00300002, 0.00600863, 0.0030067 ,\n       0.00400662, 0.00400281, 0.00400662, 0.00398874, 0.00300002]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.31410824, -1.32949171, -1.79003764, -1.86041082, -1.51221527,\n       -1.56623755, -1.53287664, -1.91188826, -1.59498012, -1.61131665]), 'train_neg_root_mean_squared_error': array([-1.38923044, -1.28539881, -1.51235952, -1.32165487, -1.59952399,\n       -1.26871856, -1.37098139, -1.34006261, -1.4260062 , -1.56059311]), 'test_r2': array([0.57993873, 0.5547427 , 0.17466681, 0.14084938, 0.40527896,\n       0.36202842, 0.38891661, 0.05511044, 0.34239275, 0.32885273]), 'train_r2': array([0.5043735 , 0.57734294, 0.41644352, 0.55252972, 0.34800835,\n       0.5898043 , 0.5210131 , 0.54204214, 0.48141713, 0.37890975]), 'test_neg_mean_absolute_error': array([-1.11576262, -0.95250946, -1.42761831, -1.45551049, -1.16897885,\n       -1.15093788, -1.23345126, -1.61232673, -1.2556646 , -1.2432013 ]), 'train_neg_mean_absolute_error': array([-1.04571475, -0.8981523 , -1.18788172, -0.99132477, -1.2778003 ,\n       -0.89162356, -1.00128049, -0.9916979 , -1.03402374, -1.24149779])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]