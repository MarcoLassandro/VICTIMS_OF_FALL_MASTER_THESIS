[{"experiment_name": "Experiment_5_20_11_21", "dataset_variant": "complete", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5805887642641954, "r2": 0.35299521391814453, "neg_mean_absolute_error": -1.2617214415086933}, "mean_train_score": {"neg_root_mean_squared_error": -0.869979505556375, "r2": 0.7947658316691755, "neg_mean_absolute_error": -0.6814410706255014}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 20, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 150, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 6, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 5, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 4, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 5, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 150, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 5, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 11, 'estimator__n_estimators': 250, 'estimator__max_features': 'auto', 'estimator__max_depth': 5, 'estimator__criterion': 'squared_error'}]", "cv_results": "{'fit_time': array([833.43599558, 893.09500003, 833.9121089 , 872.88500166,\n       829.25900841, 858.97300673, 853.77000356, 837.53198218,\n       787.2630136 , 809.30802298]), 'score_time': array([0.03499913, 0.02500033, 0.01999736, 0.0249989 , 0.03099346,\n       0.02799726, 0.02500272, 0.0200007 , 0.03998852, 0.0299983 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegres...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.43060165, -1.31491081, -1.53739807, -1.88202533, -1.46387986,\n       -1.65262564, -1.46591425, -1.89700676, -1.59182093, -1.56970435]), 'train_neg_root_mean_squared_error': array([-0.8157493 , -0.59006231, -0.80235728, -0.64116673, -0.70840081,\n       -0.79953949, -1.26783993, -1.19671388, -0.81783504, -1.06013029]), 'test_r2': array([0.50216227, 0.56445567, 0.39119579, 0.12076995, 0.44268987,\n       0.28971108, 0.44113977, 0.0697626 , 0.34499523, 0.36306992]), 'train_r2': array([0.82910894, 0.91093479, 0.83574886, 0.8946899 , 0.87211529,\n       0.83709277, 0.59037224, 0.63477879, 0.82942838, 0.71338836]), 'test_neg_mean_absolute_error': array([-1.21128571, -1.0275    , -1.14823529, -1.44927835, -1.14849959,\n       -1.27654412, -1.24110294, -1.59313725, -1.29423529, -1.22739586]), 'train_neg_mean_absolute_error': array([-0.62989379, -0.46666124, -0.62920738, -0.49690131, -0.56024462,\n       -0.62749186, -0.99618078, -0.94185668, -0.62478176, -0.84119129])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 150, 200, 250]", "estimator__criterion": "['squared_error', 'absolute_error', 'poisson']", "estimator__max_depth": "[5, 10, 15, 20]", "estimator__max_features": "['auto', 'sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_5_20_11_21", "dataset_variant": "only_totals", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5719955586841734, "r2": 0.35797624912818643, "neg_mean_absolute_error": -1.2511055770144384}, "mean_train_score": {"neg_root_mean_squared_error": -0.8041991891396197, "r2": 0.8200285756466463, "neg_mean_absolute_error": -0.629199618342314}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 150, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 5, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 20, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 20, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 150, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 5, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 150, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 20, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 150, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}]", "cv_results": "{'fit_time': array([513.64700055, 509.78700352, 517.60209966, 586.00980067,\n       610.03952289, 614.84323025, 586.05883718, 575.78392029,\n       603.47896194, 611.51123929]), 'score_time': array([0.01400065, 0.0200026 , 0.03098655, 0.01400256, 0.02697849,\n       0.04099417, 0.01700258, 0.03100038, 0.02000117, 0.02600002]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolute_error',\n                                                                 'poisson'],\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.42682465, -1.32274048, -1.52024971, -1.9034838 , -1.34466618,\n       -1.6678859 , -1.57663127, -1.89649215, -1.6600253 , -1.40095614]), 'train_neg_root_mean_squared_error': array([-0.68269211, -0.69928489, -1.24056081, -0.57482184, -0.59627332,\n       -0.67727302, -1.2900197 , -0.7971019 , -0.66245204, -0.82151227]), 'test_r2': array([0.50478752, 0.55925331, 0.40470142, 0.10060604, 0.52976491,\n       0.27653297, 0.35353303, 0.07026723, 0.28766308, 0.49265298]), 'train_r2': array([0.8803106 , 0.87491057, 0.607347  , 0.91535631, 0.90939519,\n       0.88310712, 0.57591471, 0.83796717, 0.88808605, 0.82789105]), 'test_neg_mean_absolute_error': array([-1.16470065, -1.02029778, -1.14441176, -1.46683824, -1.09994118,\n       -1.26655244, -1.34029412, -1.55076471, -1.34343137, -1.11382353]), 'train_neg_mean_absolute_error': array([-0.53551535, -0.5493542 , -0.98571987, -0.44838762, -0.46439336,\n       -0.53256497, -1.01560261, -0.60633225, -0.51472313, -0.63940282])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 150, 200, 250]", "estimator__criterion": "['squared_error', 'absolute_error', 'poisson']", "estimator__max_depth": "[5, 10, 15, 20]", "estimator__max_features": "['auto', 'sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_5_20_11_21", "dataset_variant": "only_binary", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5520789780706603, "r2": 0.3755409890617426, "neg_mean_absolute_error": -1.2404654062372205}, "mean_train_score": {"neg_root_mean_squared_error": -0.7712834174374824, "r2": 0.8401168882665104, "neg_mean_absolute_error": -0.6034243227834895}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 15, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 150, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 20, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 5, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15, 'estimator__criterion': 'absolute_error'}]", "cv_results": "{'fit_time': array([ 939.93606162,  951.72288084, 1707.30606699, 1212.89946198,\n        913.7190001 ,  925.24198031,  979.15202403,  911.60998297,\n        936.7399931 ,  989.10299921]), 'score_time': array([0.03199744, 0.01900125, 0.01700163, 0.02499986, 0.03100133,\n       0.03200006, 0.02999568, 0.03100371, 0.04300213, 0.01400065]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=500,...\n                                        'estimator__max_depth': [5, 10, 15, 20],\n                                        'estimator__max_features': ['auto',\n                                                                    'sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 150,\n                                                                    200, 250],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.55443427, -1.25582694, -1.57413188, -1.92464087, -1.30603009,\n       -1.49917711, -1.59251281, -1.81324759, -1.52785472, -1.4729335 ]), 'train_neg_root_mean_squared_error': array([-0.56897122, -0.78999858, -0.80980821, -0.75894366, -0.81818639,\n       -0.63229006, -1.24706177, -0.76697111, -0.65991862, -0.66068455]), 'test_r2': array([0.41224668, 0.60271756, 0.3617553 , 0.08050155, 0.55639909,\n       0.41548999, 0.3404436 , 0.15009525, 0.39657936, 0.43918152]), 'train_r2': array([0.91686449, 0.84035146, 0.83268412, 0.8524473 , 0.8294055 ,\n       0.89811899, 0.6036887 , 0.84998546, 0.8889404 , 0.88868245]), 'test_neg_mean_absolute_error': array([-1.24505804, -0.97431373, -1.19647059, -1.52875   , -1.07423529,\n       -1.14129412, -1.31558824, -1.51894118, -1.22250289, -1.1875    ]), 'train_neg_mean_absolute_error': array([-0.44841011, -0.62040174, -0.62890879, -0.58977199, -0.63678827,\n       -0.50104235, -0.97960261, -0.59076221, -0.52207307, -0.51648208])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 150, 200, 250]", "estimator__criterion": "['squared_error', 'absolute_error', 'poisson']", "estimator__max_depth": "[5, 10, 15, 20]", "estimator__max_features": "['auto', 'sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]