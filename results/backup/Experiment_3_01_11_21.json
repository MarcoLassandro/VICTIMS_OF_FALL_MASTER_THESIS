[{"dataset_variant": "only_totals", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "4", "n_split_outer_kcv": 10}, "best_params": "{'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}", "mean_test_score": 0.7592436974789916, "cv_results": "{'mean_fit_time': array([3.93198490e-01, 3.58400750e-01, 3.85700130e-01, 4.86100578e-01,\n       5.25599766e-01, 1.00066662e-03, 4.55500960e-01, 4.54199934e-01,\n       4.36000633e-01, 4.52401042e-01, 4.75499868e-01, 1.10039711e-03,\n       4.42700267e-01, 4.56798697e-01, 4.50699878e-01, 4.44200420e-01,\n       4.74999452e-01, 1.09932423e-03, 4.20000005e-01, 4.38999772e-01,\n       4.52599359e-01, 4.47699714e-01, 4.63099933e-01, 1.00002289e-03,\n       6.50301337e-01, 8.16498995e-01, 7.62898874e-01, 5.83899307e-01,\n       5.92299676e-01, 9.99808311e-04, 6.68600726e-01, 7.00800896e-01,\n       5.99299169e-01, 5.67799616e-01, 4.00270014e+00, 1.00023746e-03,\n       6.86499166e-01, 7.50800180e-01, 7.58198476e-01, 7.38299847e-01,\n       8.03101158e-01, 9.53699756e-01]), 'std_fit_time': array([5.42340779e-02, 2.06261985e-02, 5.69565259e-02, 3.99494892e-02,\n       5.08090450e-02, 1.28591409e-06, 1.63228909e-02, 2.60528243e-02,\n       2.97824656e-02, 1.73332192e-02, 4.45092148e-02, 3.00615428e-04,\n       2.31224732e-02, 4.20182992e-02, 3.06521199e-02, 2.35667948e-02,\n       3.03040468e-02, 3.00578993e-04, 2.57140673e-02, 2.74965205e-02,\n       3.21758174e-02, 1.47713105e-02, 3.46275507e-02, 1.08316581e-06,\n       9.54883203e-02, 8.31439904e-02, 8.63439136e-02, 5.04999592e-02,\n       2.88486882e-02, 1.20277388e-06, 6.04431543e-02, 7.01161902e-02,\n       5.92910471e-02, 1.94304827e-02, 5.17003071e+00, 1.17310663e-06,\n       2.30926906e-02, 4.23659296e-02, 1.00671232e-02, 3.37790548e-02,\n       3.19552823e-02, 1.65603295e-01]), 'mean_score_time': array([0.00370092, 0.00319979, 0.00310051, 0.00320055, 0.00469983,\n       0.        , 0.00309942, 0.00350027, 0.0038003 , 0.00299957,\n       0.00289955, 0.        , 0.00449896, 0.00420125, 0.00400038,\n       0.00469904, 0.0033999 , 0.        , 0.00289958, 0.00330129,\n       0.00390046, 0.00300086, 0.00450072, 0.        , 0.00530031,\n       0.00340185, 0.00290122, 0.00290096, 0.00290022, 0.        ,\n       0.00320005, 0.0030998 , 0.00290153, 0.00310037, 0.00670006,\n       0.        , 0.05250003, 0.05429971, 0.051     , 0.05240052,\n       0.05509992, 0.05780089]), 'std_score_time': array([0.00045933, 0.00039966, 0.00069954, 0.0007496 , 0.00479686,\n       0.        , 0.00029931, 0.00067166, 0.00275057, 0.0004466 ,\n       0.00053821, 0.        , 0.00387912, 0.00240098, 0.00303322,\n       0.00303495, 0.00066384, 0.        , 0.00053835, 0.00064093,\n       0.00304851, 0.00044702, 0.00420144, 0.        , 0.00349482,\n       0.00048971, 0.00053933, 0.00053847, 0.00053821, 0.        ,\n       0.0004009 , 0.00053848, 0.00030073, 0.00053846, 0.00950916,\n       0.        , 0.012052  , 0.01176489, 0.00997942, 0.00588462,\n       0.00694859, 0.01611117]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 10, 10, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 1, 1, 1, 1, 1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.82857143, 0.85714286, 0.88571429, 0.88571429, 0.85714286,\n              nan, 0.85714286, 0.82857143, 0.88571429, 0.82857143,\n       0.88571429,        nan, 0.8       , 0.82857143, 0.85714286,\n       0.85714286, 0.88571429,        nan, 0.8       , 0.74285714,\n       0.8       , 0.68571429, 0.68571429,        nan, 0.77142857,\n       0.77142857, 0.88571429, 0.65714286, 0.68571429,        nan,\n       0.77142857, 0.77142857, 0.88571429, 0.65714286, 0.68571429,\n              nan, 0.68571429, 0.8       , 0.74285714, 0.85714286,\n       0.68571429, 0.82857143]), 'split1_test_score': array([0.58823529, 0.58823529, 0.61764706, 0.64705882, 0.61764706,\n              nan, 0.58823529, 0.58823529, 0.58823529, 0.61764706,\n       0.64705882,        nan, 0.58823529, 0.64705882, 0.58823529,\n       0.61764706, 0.64705882,        nan, 0.55882353, 0.58823529,\n       0.58823529, 0.67647059, 0.67647059,        nan, 0.5       ,\n       0.58823529, 0.61764706, 0.73529412, 0.73529412,        nan,\n       0.5       , 0.58823529, 0.61764706, 0.73529412, 0.73529412,\n              nan, 0.55882353, 0.67647059, 0.55882353, 0.70588235,\n       0.5       , 0.64705882]), 'split2_test_score': array([0.67647059, 0.67647059, 0.73529412, 0.70588235, 0.73529412,\n              nan, 0.70588235, 0.70588235, 0.70588235, 0.73529412,\n       0.73529412,        nan, 0.64705882, 0.70588235, 0.70588235,\n       0.73529412, 0.73529412,        nan, 0.70588235, 0.70588235,\n       0.70588235, 0.58823529, 0.55882353,        nan, 0.67647059,\n       0.67647059, 0.67647059, 0.67647059, 0.61764706,        nan,\n       0.67647059, 0.67647059, 0.67647059, 0.67647059, 0.61764706,\n              nan, 0.58823529, 0.61764706, 0.64705882, 0.73529412,\n       0.67647059, 0.70588235]), 'split3_test_score': array([0.82352941, 0.85294118, 0.79411765, 0.76470588, 0.76470588,\n              nan, 0.85294118, 0.82352941, 0.82352941, 0.76470588,\n       0.76470588,        nan, 0.85294118, 0.82352941, 0.82352941,\n       0.76470588, 0.76470588,        nan, 0.73529412, 0.73529412,\n       0.73529412, 0.61764706, 0.58823529,        nan, 0.70588235,\n       0.70588235, 0.70588235, 0.58823529, 0.58823529,        nan,\n       0.70588235, 0.70588235, 0.70588235, 0.58823529, 0.58823529,\n              nan, 0.70588235, 0.82352941, 0.64705882, 0.70588235,\n       0.67647059, 0.70588235]), 'split4_test_score': array([0.76470588, 0.73529412, 0.73529412, 0.79411765, 0.76470588,\n              nan, 0.76470588, 0.73529412, 0.76470588, 0.79411765,\n       0.79411765,        nan, 0.76470588, 0.73529412, 0.76470588,\n       0.70588235, 0.79411765,        nan, 0.85294118, 0.73529412,\n       0.73529412, 0.70588235, 0.73529412,        nan, 0.85294118,\n       0.73529412, 0.70588235, 0.70588235, 0.73529412,        nan,\n       0.85294118, 0.73529412, 0.70588235, 0.70588235, 0.73529412,\n              nan, 0.73529412, 0.82352941, 0.73529412, 0.73529412,\n       0.73529412, 0.73529412]), 'split5_test_score': array([0.79411765, 0.73529412, 0.76470588, 0.64705882, 0.73529412,\n              nan, 0.70588235, 0.70588235, 0.76470588, 0.70588235,\n       0.73529412,        nan, 0.73529412, 0.76470588, 0.76470588,\n       0.67647059, 0.73529412,        nan, 0.64705882, 0.64705882,\n       0.67647059, 0.55882353, 0.61764706,        nan, 0.67647059,\n       0.70588235, 0.67647059, 0.58823529, 0.55882353,        nan,\n       0.67647059, 0.70588235, 0.67647059, 0.58823529, 0.55882353,\n              nan, 0.79411765, 0.82352941, 0.76470588, 0.88235294,\n       0.85294118, 0.85294118]), 'split6_test_score': array([0.79411765, 0.85294118, 0.85294118, 0.79411765, 0.76470588,\n              nan, 0.79411765, 0.76470588, 0.79411765, 0.79411765,\n       0.79411765,        nan, 0.82352941, 0.76470588, 0.82352941,\n       0.79411765, 0.79411765,        nan, 0.64705882, 0.64705882,\n       0.67647059, 0.67647059, 0.67647059,        nan, 0.61764706,\n       0.61764706, 0.67647059, 0.61764706, 0.64705882,        nan,\n       0.61764706, 0.61764706, 0.67647059, 0.61764706, 0.64705882,\n              nan, 0.79411765, 0.76470588, 0.70588235, 0.79411765,\n       0.67647059, 0.76470588]), 'split7_test_score': array([0.70588235, 0.73529412, 0.73529412, 0.73529412, 0.76470588,\n              nan, 0.70588235, 0.73529412, 0.73529412, 0.73529412,\n       0.76470588,        nan, 0.70588235, 0.73529412, 0.76470588,\n       0.73529412, 0.76470588,        nan, 0.61764706, 0.61764706,\n       0.73529412, 0.73529412, 0.73529412,        nan, 0.64705882,\n       0.64705882, 0.73529412, 0.79411765, 0.79411765,        nan,\n       0.64705882, 0.64705882, 0.73529412, 0.79411765, 0.79411765,\n              nan, 0.67647059, 0.76470588, 0.70588235, 0.76470588,\n       0.64705882, 0.79411765]), 'split8_test_score': array([0.64705882, 0.70588235, 0.64705882, 0.73529412, 0.76470588,\n              nan, 0.64705882, 0.61764706, 0.64705882, 0.73529412,\n       0.73529412,        nan, 0.67647059, 0.64705882, 0.61764706,\n       0.73529412, 0.73529412,        nan, 0.64705882, 0.55882353,\n       0.58823529, 0.55882353, 0.70588235,        nan, 0.64705882,\n       0.55882353, 0.58823529, 0.55882353, 0.61764706,        nan,\n       0.64705882, 0.55882353, 0.58823529, 0.55882353, 0.61764706,\n              nan, 0.58823529, 0.67647059, 0.58823529, 0.64705882,\n       0.67647059, 0.67647059]), 'split9_test_score': array([0.70588235, 0.64705882, 0.64705882, 0.73529412, 0.67647059,\n              nan, 0.64705882, 0.67647059, 0.67647059, 0.73529412,\n       0.70588235,        nan, 0.64705882, 0.64705882, 0.61764706,\n       0.70588235, 0.73529412,        nan, 0.58823529, 0.64705882,\n       0.64705882, 0.67647059, 0.73529412,        nan, 0.61764706,\n       0.64705882, 0.67647059, 0.64705882, 0.70588235,        nan,\n       0.61764706, 0.64705882, 0.67647059, 0.64705882, 0.70588235,\n              nan, 0.70588235, 0.76470588, 0.70588235, 0.76470588,\n       0.67647059, 0.76470588]), 'mean_test_score': array([0.73285714, 0.73865546, 0.74151261, 0.74445378, 0.74453782,\n              nan, 0.72689076, 0.71815126, 0.73857143, 0.74462185,\n       0.75621849,        nan, 0.72411765, 0.72991597, 0.73277311,\n       0.73277311, 0.75915966,        nan, 0.68      , 0.66252101,\n       0.68882353, 0.64798319, 0.67151261,        nan, 0.6712605 ,\n       0.66537815, 0.69445378, 0.65689076, 0.66857143,        nan,\n       0.6712605 , 0.66537815, 0.69445378, 0.65689076, 0.66857143,\n              nan, 0.68327731, 0.75352941, 0.68016807, 0.7592437 ,\n       0.68033613, 0.74756303]), 'std_test_score': array([0.07669047, 0.08726558, 0.0835568 , 0.0678297 , 0.05968162,\n              nan, 0.08491138, 0.07420906, 0.08320554, 0.05506536,\n       0.05962296,        nan, 0.08182393, 0.06492183, 0.09117163,\n       0.06175756, 0.0577638 ,        nan, 0.0884781 , 0.06158603,\n       0.06435466, 0.05934874, 0.060143  ,        nan, 0.0897468 ,\n       0.0630821 , 0.07548838, 0.06960099, 0.07106303,        nan,\n       0.0897468 , 0.0630821 , 0.07548838, 0.06960099, 0.07106303,\n              nan, 0.07868028, 0.06897419, 0.06439541, 0.06741177,\n       0.08157513, 0.06261175]), 'rank_test_score': array([12, 10,  9,  8,  7, 40, 16, 18, 11,  6,  3, 41, 17, 15, 14, 13,  2,\n       39, 25, 33, 21, 36, 26, 42, 27, 31, 19, 34, 29, 37, 27, 31, 19, 34,\n       29, 38, 22,  4, 24,  1, 23,  5]), 'split0_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.82026144, 0.82026144,\n       0.83333333, 0.84313725, 0.85294118,        nan, 0.83986928,\n       0.85294118, 0.8627451 , 0.8627451 , 0.8627451 ,        nan,\n       0.83986928, 0.85294118, 0.8627451 , 0.8627451 , 0.8627451 ,\n              nan, 0.83333333, 0.86928105, 0.99673203, 1.        ,\n       1.        , 1.        ]), 'split1_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83387622, 0.85667752,\n       0.8534202 , 0.85016287, 0.84690554,        nan, 0.8534202 ,\n       0.86970684, 0.88925081, 0.86319218, 0.86970684,        nan,\n       0.8534202 , 0.86970684, 0.88925081, 0.86319218, 0.86970684,\n              nan, 0.84364821, 0.87296417, 0.99348534, 1.        ,\n       1.        , 1.        ]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.85993485, 0.85667752,\n       0.85667752, 0.84690554, 0.86319218,        nan, 0.86970684,\n       0.86319218, 0.86319218, 0.86644951, 0.89576547,        nan,\n       0.86970684, 0.86319218, 0.86319218, 0.86644951, 0.89576547,\n              nan, 0.83387622, 0.85667752, 0.99348534, 1.        ,\n       1.        , 1.        ]), 'split3_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83061889, 0.82736156,\n       0.83387622, 0.83061889, 0.83387622,        nan, 0.85667752,\n       0.85667752, 0.86319218, 0.87947883, 0.86970684,        nan,\n       0.85667752, 0.85667752, 0.86319218, 0.87947883, 0.86970684,\n              nan, 0.83713355, 0.86970684, 0.99674267, 1.        ,\n       1.        , 1.        ]), 'split4_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.81107492, 0.82736156,\n       0.83061889, 0.84690554, 0.85667752,        nan, 0.87947883,\n       0.84690554, 0.8534202 , 0.87947883, 0.8762215 ,        nan,\n       0.87947883, 0.84690554, 0.8534202 , 0.87947883, 0.8762215 ,\n              nan, 0.85993485, 0.8534202 , 0.99348534, 0.99348534,\n       1.        , 1.        ]), 'split5_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83387622, 0.83713355,\n       0.84690554, 0.83387622, 0.84364821,        nan, 0.86970684,\n       0.8762215 , 0.8762215 , 0.85667752, 0.8762215 ,        nan,\n       0.86970684, 0.8762215 , 0.8762215 , 0.85667752, 0.8762215 ,\n              nan, 0.8534202 , 0.8534202 , 1.        , 1.        ,\n       1.        , 1.        ]), 'split6_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.82084691, 0.83387622,\n       0.8534202 , 0.84364821, 0.85016287,        nan, 0.83713355,\n       0.85016287, 0.86319218, 0.84690554, 0.85667752,        nan,\n       0.83713355, 0.85016287, 0.86319218, 0.84690554, 0.85667752,\n              nan, 0.8534202 , 0.8534202 , 1.        , 1.        ,\n       1.        , 1.        ]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83387622, 0.83713355,\n       0.83387622, 0.83387622, 0.83713355,        nan, 0.85993485,\n       0.87296417, 0.87947883, 0.86644951, 0.86644951,        nan,\n       0.85993485, 0.87296417, 0.87947883, 0.86644951, 0.86644951,\n              nan, 0.82410423, 0.84364821, 0.99348534, 1.        ,\n       1.        , 1.        ]), 'split8_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83713355, 0.84364821,\n       0.86644951, 0.85016287, 0.85016287,        nan, 0.8762215 ,\n       0.88273616, 0.89576547, 0.86644951, 0.87947883,        nan,\n       0.8762215 , 0.88273616, 0.89576547, 0.86644951, 0.87947883,\n              nan, 0.85016287, 0.86644951, 0.99674267, 1.        ,\n       1.        , 1.        ]), 'split9_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83713355, 0.83061889,\n       0.83387622, 0.83387622, 0.84364821,        nan, 0.85667752,\n       0.85667752, 0.85016287, 0.84364821, 0.86644951,        nan,\n       0.85667752, 0.85667752, 0.85016287, 0.84364821, 0.86644951,\n              nan, 0.84039088, 0.86644951, 0.99674267, 1.        ,\n       1.        , 1.        ]), 'mean_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.83186328, 0.837075  ,\n       0.84424539, 0.84131698, 0.84783483,        nan, 0.85988269,\n       0.86281855, 0.86966213, 0.86314747, 0.87194226,        nan,\n       0.85988269, 0.86281855, 0.86966213, 0.86314747, 0.87194226,\n              nan, 0.84294245, 0.86054374, 0.99609014, 0.99934853,\n       1.        , 1.        ]), 'std_train_score': array([0.        , 0.        , 0.        , 0.        , 0.        ,\n              nan, 0.        , 0.        , 0.        , 0.        ,\n       0.        ,        nan, 0.        , 0.        , 0.        ,\n       0.        , 0.        ,        nan, 0.01243136, 0.01155441,\n       0.01204294, 0.0071292 , 0.00834407,        nan, 0.01350691,\n       0.01145971, 0.0142195 , 0.0111901 , 0.0102416 ,        nan,\n       0.01350691, 0.01145971, 0.0142195 , 0.0111901 , 0.0102416 ,\n              nan, 0.01063299, 0.00914859, 0.00243728, 0.0019544 ,\n       0.        , 0.        ])}"}, {"dataset_variant": "complete", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "4", "n_split_outer_kcv": 10}, "best_params": "{'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}", "mean_test_score": 0.765126050420168, "cv_results": "{'mean_fit_time': array([0.52079811, 0.36140058, 0.36530106, 0.39310081, 0.44000113,\n       0.50940142, 0.51679971, 0.42179949, 0.40039995, 0.45230112,\n       0.4156002 , 0.43269968, 0.44619958, 0.40910063, 0.42740002,\n       0.42480001, 0.43860047, 0.41400123, 0.4516    , 0.48209894,\n       0.62850101, 0.59980114, 0.61609988, 0.48610005, 0.56559982,\n       0.64200053, 0.70750098, 0.59139991, 0.58140023, 0.57310038,\n       0.58840029, 0.59529841, 0.57200069, 0.56450021, 0.56279988,\n       3.69650104, 0.57840009, 0.61910048, 0.89209938, 1.00979991,\n       1.01290076, 1.01010194]), 'std_fit_time': array([0.06397797, 0.04200795, 0.03086622, 0.03834076, 0.04047039,\n       0.09864016, 0.0667839 , 0.02475397, 0.01859168, 0.01392974,\n       0.0176696 , 0.03642058, 0.04539096, 0.02414616, 0.03572964,\n       0.01926045, 0.02530289, 0.02398309, 0.03945565, 0.04973915,\n       0.0440762 , 0.04278737, 0.07420507, 0.02414345, 0.03793959,\n       0.08548933, 0.08084787, 0.08775705, 0.05584368, 0.04708794,\n       0.03579799, 0.04852518, 0.04030411, 0.05121057, 0.04419295,\n       4.56515049, 0.00917755, 0.06630747, 0.07357622, 0.02976231,\n       0.03914619, 0.06000536]), 'mean_score_time': array([0.00450065, 0.0043004 , 0.0035006 , 0.00319951, 0.00459955,\n       0.00389934, 0.00309975, 0.0031003 , 0.00299978, 0.00289915,\n       0.00269969, 0.00330081, 0.00290101, 0.00380027, 0.00289965,\n       0.00270007, 0.00319967, 0.00329969, 0.00339997, 0.00349998,\n       0.0037991 , 0.00330076, 0.00320036, 0.00280004, 0.00280073,\n       0.00310009, 0.00300047, 0.00420079, 0.00279944, 0.0027993 ,\n       0.0032002 , 0.00270007, 0.00310037, 0.00319996, 0.00320024,\n       0.01380017, 0.04059985, 0.0481997 , 0.0576005 , 0.05890071,\n       0.06689885, 0.06419976]), 'std_score_time': array([2.53905552e-03, 2.64802513e-03, 6.71697905e-04, 6.00322710e-04,\n       3.32298295e-03, 9.43165565e-04, 3.00784670e-04, 1.37479154e-03,\n       4.46915420e-04, 5.38361172e-04, 4.58043133e-04, 7.81543130e-04,\n       2.99752749e-04, 2.08794047e-03, 7.00305541e-04, 6.40465506e-04,\n       4.00977045e-04, 6.40784708e-04, 9.16773395e-04, 6.71376660e-04,\n       1.16663417e-03, 6.40542378e-04, 7.48406485e-04, 3.99676216e-04,\n       3.99783007e-04, 3.00206315e-04, 1.52084145e-06, 4.62121286e-03,\n       4.00091851e-04, 3.99721734e-04, 7.48387156e-04, 4.57876788e-04,\n       2.99225318e-04, 7.48482055e-04, 6.00752835e-04, 2.18441553e-02,\n       3.49826199e-03, 9.40016394e-03, 1.42210820e-02, 1.36270803e-02,\n       1.38460678e-02, 1.47960619e-02]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 10, 10, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 1, 1, 1, 1, 1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.8       , 0.85714286, 0.8       , 0.85714286, 0.82857143,\n       0.85714286, 0.82857143, 0.8       , 0.91428571, 0.85714286,\n       0.82857143, 0.85714286, 0.85714286, 0.8       , 0.88571429,\n       0.85714286, 0.82857143, 0.85714286, 0.82857143, 0.85714286,\n       0.85714286, 0.68571429, 0.65714286, 0.65714286, 0.88571429,\n       0.88571429, 0.91428571, 0.71428571, 0.65714286, 0.71428571,\n       0.88571429, 0.88571429, 0.91428571, 0.71428571, 0.65714286,\n       0.71428571, 0.74285714, 0.85714286, 0.77142857, 0.82857143,\n       0.74285714, 0.85714286]), 'split1_test_score': array([0.5       , 0.5       , 0.55882353, 0.61764706, 0.67647059,\n       0.55882353, 0.55882353, 0.55882353, 0.58823529, 0.58823529,\n       0.64705882, 0.58823529, 0.52941176, 0.55882353, 0.58823529,\n       0.58823529, 0.67647059, 0.58823529, 0.47058824, 0.47058824,\n       0.52941176, 0.64705882, 0.58823529, 0.58823529, 0.47058824,\n       0.47058824, 0.5       , 0.64705882, 0.61764706, 0.61764706,\n       0.47058824, 0.47058824, 0.5       , 0.64705882, 0.61764706,\n       0.61764706, 0.58823529, 0.73529412, 0.52941176, 0.70588235,\n       0.5       , 0.67647059]), 'split2_test_score': array([0.73529412, 0.79411765, 0.73529412, 0.64705882, 0.67647059,\n       0.73529412, 0.73529412, 0.76470588, 0.70588235, 0.73529412,\n       0.67647059, 0.73529412, 0.70588235, 0.73529412, 0.70588235,\n       0.70588235, 0.70588235, 0.76470588, 0.73529412, 0.79411765,\n       0.70588235, 0.64705882, 0.67647059, 0.67647059, 0.73529412,\n       0.73529412, 0.73529412, 0.67647059, 0.67647059, 0.67647059,\n       0.73529412, 0.73529412, 0.73529412, 0.67647059, 0.67647059,\n       0.67647059, 0.64705882, 0.70588235, 0.67647059, 0.70588235,\n       0.67647059, 0.73529412]), 'split3_test_score': array([0.79411765, 0.82352941, 0.82352941, 0.79411765, 0.76470588,\n       0.70588235, 0.76470588, 0.82352941, 0.85294118, 0.76470588,\n       0.73529412, 0.67647059, 0.76470588, 0.85294118, 0.85294118,\n       0.76470588, 0.73529412, 0.67647059, 0.64705882, 0.70588235,\n       0.70588235, 0.73529412, 0.70588235, 0.67647059, 0.67647059,\n       0.73529412, 0.73529412, 0.73529412, 0.67647059, 0.64705882,\n       0.67647059, 0.73529412, 0.73529412, 0.73529412, 0.67647059,\n       0.64705882, 0.70588235, 0.82352941, 0.67647059, 0.70588235,\n       0.67647059, 0.76470588]), 'split4_test_score': array([0.79411765, 0.82352941, 0.76470588, 0.76470588, 0.76470588,\n       0.70588235, 0.79411765, 0.82352941, 0.76470588, 0.76470588,\n       0.73529412, 0.76470588, 0.82352941, 0.82352941, 0.76470588,\n       0.73529412, 0.73529412, 0.76470588, 0.82352941, 0.82352941,\n       0.76470588, 0.73529412, 0.70588235, 0.73529412, 0.82352941,\n       0.82352941, 0.73529412, 0.70588235, 0.73529412, 0.64705882,\n       0.82352941, 0.82352941, 0.73529412, 0.70588235, 0.73529412,\n       0.64705882, 0.76470588, 0.79411765, 0.70588235, 0.73529412,\n       0.70588235, 0.73529412]), 'split5_test_score': array([0.82352941, 0.79411765, 0.79411765, 0.76470588, 0.73529412,\n       0.73529412, 0.73529412, 0.73529412, 0.73529412, 0.79411765,\n       0.73529412, 0.70588235, 0.76470588, 0.67647059, 0.70588235,\n       0.79411765, 0.76470588, 0.70588235, 0.64705882, 0.61764706,\n       0.61764706, 0.64705882, 0.70588235, 0.67647059, 0.64705882,\n       0.64705882, 0.64705882, 0.64705882, 0.73529412, 0.67647059,\n       0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.73529412,\n       0.67647059, 0.79411765, 0.79411765, 0.76470588, 0.88235294,\n       0.85294118, 0.88235294]), 'split6_test_score': array([0.79411765, 0.82352941, 0.82352941, 0.82352941, 0.79411765,\n       0.82352941, 0.76470588, 0.79411765, 0.79411765, 0.82352941,\n       0.76470588, 0.82352941, 0.79411765, 0.79411765, 0.79411765,\n       0.82352941, 0.85294118, 0.79411765, 0.73529412, 0.64705882,\n       0.70588235, 0.70588235, 0.70588235, 0.70588235, 0.67647059,\n       0.67647059, 0.73529412, 0.73529412, 0.79411765, 0.79411765,\n       0.67647059, 0.67647059, 0.73529412, 0.73529412, 0.79411765,\n       0.79411765, 0.73529412, 0.76470588, 0.70588235, 0.82352941,\n       0.70588235, 0.79411765]), 'split7_test_score': array([0.70588235, 0.70588235, 0.76470588, 0.73529412, 0.70588235,\n       0.76470588, 0.70588235, 0.73529412, 0.79411765, 0.73529412,\n       0.73529412, 0.76470588, 0.73529412, 0.73529412, 0.79411765,\n       0.73529412, 0.73529412, 0.76470588, 0.70588235, 0.70588235,\n       0.70588235, 0.67647059, 0.67647059, 0.67647059, 0.67647059,\n       0.70588235, 0.70588235, 0.64705882, 0.64705882, 0.64705882,\n       0.67647059, 0.70588235, 0.70588235, 0.64705882, 0.64705882,\n       0.64705882, 0.67647059, 0.76470588, 0.67647059, 0.76470588,\n       0.67647059, 0.76470588]), 'split8_test_score': array([0.58823529, 0.58823529, 0.61764706, 0.70588235, 0.76470588,\n       0.70588235, 0.58823529, 0.64705882, 0.61764706, 0.67647059,\n       0.76470588, 0.70588235, 0.58823529, 0.64705882, 0.61764706,\n       0.64705882, 0.76470588, 0.70588235, 0.61764706, 0.61764706,\n       0.61764706, 0.70588235, 0.70588235, 0.70588235, 0.61764706,\n       0.61764706, 0.67647059, 0.70588235, 0.70588235, 0.64705882,\n       0.61764706, 0.61764706, 0.67647059, 0.70588235, 0.70588235,\n       0.64705882, 0.58823529, 0.61764706, 0.67647059, 0.64705882,\n       0.64705882, 0.64705882]), 'split9_test_score': array([0.64705882, 0.64705882, 0.61764706, 0.76470588, 0.79411765,\n       0.70588235, 0.64705882, 0.67647059, 0.67647059, 0.67647059,\n       0.67647059, 0.67647059, 0.64705882, 0.64705882, 0.67647059,\n       0.70588235, 0.70588235, 0.64705882, 0.67647059, 0.70588235,\n       0.67647059, 0.76470588, 0.73529412, 0.70588235, 0.61764706,\n       0.64705882, 0.67647059, 0.76470588, 0.73529412, 0.64705882,\n       0.61764706, 0.64705882, 0.67647059, 0.76470588, 0.73529412,\n       0.64705882, 0.73529412, 0.70588235, 0.67647059, 0.79411765,\n       0.70588235, 0.79411765]), 'mean_test_score': array([0.71823529, 0.73571429, 0.73      , 0.74747899, 0.7505042 ,\n       0.72983193, 0.71226891, 0.73588235, 0.74436975, 0.74159664,\n       0.72991597, 0.72983193, 0.7210084 , 0.72705882, 0.73857143,\n       0.73571429, 0.7505042 , 0.72689076, 0.6887395 , 0.69453782,\n       0.68865546, 0.69504202, 0.68630252, 0.68042017, 0.68268908,\n       0.69445378, 0.70613445, 0.69789916, 0.69806723, 0.67142857,\n       0.68268908, 0.69445378, 0.70613445, 0.69789916, 0.69806723,\n       0.67142857, 0.69781513, 0.75630252, 0.68596639, 0.75932773,\n       0.6889916 , 0.76512605]), 'std_test_score': array([0.10251002, 0.11435135, 0.0913736 , 0.07049439, 0.04867055,\n       0.0760272 , 0.08367081, 0.08152737, 0.09624604, 0.0748147 ,\n       0.04984716, 0.07371645, 0.09922018, 0.08875143, 0.0920883 ,\n       0.07622201, 0.05210416, 0.07402593, 0.09930711, 0.10844977,\n       0.08423191, 0.03958233, 0.0387012 , 0.03749453, 0.10892922,\n       0.10841522, 0.09719536, 0.03983628, 0.05012103, 0.0477515 ,\n       0.10892922, 0.10841522, 0.09719536, 0.03983628, 0.05012103,\n       0.0477515 , 0.06760106, 0.06514638, 0.06265555, 0.06858729,\n       0.08281507, 0.0688986 ]), 'rank_test_score': array([20, 12, 13,  6,  4, 15, 21, 10,  7,  8, 14, 15, 19, 17,  9, 11,  4,\n       18, 34, 30, 35, 29, 36, 40, 38, 31, 22, 26, 24, 41, 38, 31, 22, 26,\n       24, 41, 28,  3, 37,  2, 33,  1]), 'split0_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.83006536, 0.84313725,\n       0.84640523, 0.84640523, 0.83986928, 0.83986928, 0.8627451 ,\n       0.86928105, 0.87581699, 0.87254902, 0.87581699, 0.87581699,\n       0.8627451 , 0.86928105, 0.87581699, 0.87254902, 0.87581699,\n       0.87581699, 0.84313725, 0.85947712, 0.99673203, 1.        ,\n       1.        , 1.        ]), 'split1_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85993485, 0.8534202 ,\n       0.86970684, 0.84364821, 0.84690554, 0.85667752, 0.87296417,\n       0.87296417, 0.88599349, 0.88599349, 0.88925081, 0.90553746,\n       0.87296417, 0.87296417, 0.88599349, 0.88599349, 0.88925081,\n       0.90553746, 0.86319218, 0.87296417, 1.        , 0.99674267,\n       1.        , 1.        ]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84690554, 0.85667752,\n       0.84364821, 0.8534202 , 0.8534202 , 0.8534202 , 0.86644951,\n       0.87947883, 0.84690554, 0.86970684, 0.87947883, 0.87947883,\n       0.86644951, 0.87947883, 0.84690554, 0.86970684, 0.87947883,\n       0.87947883, 0.84690554, 0.85667752, 0.99674267, 1.        ,\n       1.        , 1.        ]), 'split3_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85667752, 0.8534202 ,\n       0.85667752, 0.85667752, 0.86970684, 0.85667752, 0.8762215 ,\n       0.86970684, 0.8534202 , 0.85667752, 0.8762215 , 0.88273616,\n       0.8762215 , 0.86970684, 0.8534202 , 0.85667752, 0.8762215 ,\n       0.88273616, 0.85993485, 0.88273616, 1.        , 1.        ,\n       1.        , 1.        ]), 'split4_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84039088, 0.83061889,\n       0.86644951, 0.84690554, 0.86319218, 0.87296417, 0.86644951,\n       0.8534202 , 0.86970684, 0.85667752, 0.85993485, 0.87947883,\n       0.86644951, 0.8534202 , 0.86970684, 0.85667752, 0.85993485,\n       0.87947883, 0.84364821, 0.86319218, 0.99674267, 0.99674267,\n       1.        , 1.        ]), 'split5_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.83713355, 0.84364821,\n       0.86644951, 0.84039088, 0.84690554, 0.83713355, 0.84690554,\n       0.85667752, 0.85993485, 0.86319218, 0.88273616, 0.8534202 ,\n       0.84690554, 0.85667752, 0.85993485, 0.86319218, 0.88273616,\n       0.8534202 , 0.86319218, 0.85993485, 0.99348534, 1.        ,\n       1.        , 1.        ]), 'split6_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84039088, 0.84364821,\n       0.84690554, 0.82736156, 0.82410423, 0.82410423, 0.85016287,\n       0.85016287, 0.85993485, 0.85667752, 0.86644951, 0.86644951,\n       0.85016287, 0.85016287, 0.85993485, 0.85667752, 0.86644951,\n       0.86644951, 0.86319218, 0.83713355, 1.        , 1.        ,\n       1.        , 1.        ]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84039088, 0.85993485,\n       0.87296417, 0.84039088, 0.83713355, 0.83713355, 0.88273616,\n       0.88599349, 0.90879479, 0.8762215 , 0.87947883, 0.88599349,\n       0.88273616, 0.88599349, 0.90879479, 0.8762215 , 0.87947883,\n       0.88599349, 0.81758958, 0.84364821, 0.99674267, 1.        ,\n       1.        , 1.        ]), 'split8_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85667752, 0.8534202 ,\n       0.85667752, 0.85016287, 0.85993485, 0.85993485, 0.87947883,\n       0.88925081, 0.90228013, 0.86970684, 0.88925081, 0.88599349,\n       0.87947883, 0.88925081, 0.90228013, 0.86970684, 0.88925081,\n       0.88599349, 0.8534202 , 0.88273616, 1.        , 1.        ,\n       1.        , 1.        ]), 'split9_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84690554, 0.85016287,\n       0.85016287, 0.84039088, 0.84039088, 0.84364821, 0.85993485,\n       0.85667752, 0.86319218, 0.85667752, 0.8534202 , 0.87296417,\n       0.85993485, 0.85667752, 0.86319218, 0.85667752, 0.8534202 ,\n       0.87296417, 0.85016287, 0.86970684, 1.        , 0.99674267,\n       1.        , 1.        ]), 'mean_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.84554725, 0.84880884,\n       0.85760469, 0.84457538, 0.84815631, 0.84815631, 0.8664048 ,\n       0.86836133, 0.87259799, 0.866408  , 0.87520385, 0.87878691,\n       0.8664048 , 0.86836133, 0.87259799, 0.866408  , 0.87520385,\n       0.87878691, 0.8504375 , 0.86282068, 0.99804454, 0.9990228 ,\n       1.        , 1.        ]), 'std_train_score': array([0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.00921251, 0.0081709 ,\n       0.01015195, 0.00783834, 0.01299636, 0.0135558 , 0.01129741,\n       0.01312307, 0.01956136, 0.00963557, 0.01128557, 0.01293994,\n       0.01129741, 0.01312307, 0.01956136, 0.00963557, 0.01128557,\n       0.01293994, 0.01333442, 0.01424204, 0.00216131, 0.0014927 ,\n       0.        , 0.        ])}"}]