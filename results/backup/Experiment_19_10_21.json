[{"dataset_variant": "complete", "experiment_setup": {"dataset_variants": ["complete", "only_binary", "only_totals"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "regressor": "[GradientBoostingRegressor(criterion = 'mse')]", "floor_labels": "True", "params": [{"reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler()]", "regressor__learning_rate": "[0.1, 1e-3]", "regressor__n_estimators": "[100, 200, 250]", "regressor__max_depth": "[5, 10, 15]", "regressor__min_samples_split": "[2, 8, 16]", "regressor__min_samples_leaf": "[1, 8, 16]"}], "metrics": "['neg_root_mean_squared_error']", "binarize": "False", "n_split_outer_kcv": 10, "hp_optimizer": "bayes"}, "best_params": "{'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}", "mean_test_score": -1.5854600795781815, "cv_results": "{'mean_fit_time': array([0.40110753, 0.4155781 , 0.55567989, 0.87509794, 0.26421175,\n       0.6857106 , 0.81919026, 0.23359795, 0.29257767, 0.26929934,\n       1.19439538, 0.40760164, 0.57510052, 0.88950129, 0.31500616,\n       0.38660555, 0.87470849, 0.42778692, 0.31599388, 0.57201478,\n       0.12090044, 0.53480227, 0.31700618, 0.50090971, 1.07611778,\n       0.63570313, 0.62020679, 0.76708703, 0.42411363, 0.43161902,\n       0.62471001, 1.062079  , 0.38381739, 0.48900511, 0.23399992,\n       1.19076238, 0.39520907, 1.21262403, 0.54611187, 0.33310907,\n       0.41612065, 0.45157976, 0.88465672, 0.97301197, 0.63440371,\n       0.86143456, 0.50200868, 0.30900428, 0.40227137, 0.22800701,\n       0.38736608, 0.1729073 , 0.33930676, 0.49840598, 0.1725003 ,\n       0.35166311, 0.82426443, 0.47210405, 0.15132506, 0.13274622,\n       0.26710374, 0.34611034, 0.29860215, 0.3435056 , 0.39470882,\n       0.28330648, 0.39920256, 0.14759934, 0.27007413, 0.57161055,\n       1.07214119, 0.31300538, 0.390008  , 0.31040757, 0.72799892,\n       0.22809503, 0.25190182, 0.21919739, 0.51421392, 0.23379765,\n       0.61630962, 0.57350779, 0.22610035, 0.20119886, 0.23110001,\n       0.38920722, 0.43171813, 0.41150067, 0.35150452, 0.45771484,\n       0.59979882, 0.1193996 , 0.24019949, 0.22740152, 0.74110813,\n       0.63379719, 0.41460347, 0.3027056 , 0.09279926, 0.45102217]), 'std_fit_time': array([0.03830355, 0.05754237, 0.03784875, 0.09388082, 0.0204543 ,\n       0.02982566, 0.11230705, 0.04159392, 0.02923694, 0.02466871,\n       0.09140165, 0.04708303, 0.07298231, 0.17988658, 0.03181126,\n       0.01674765, 0.03091104, 0.02937773, 0.02845693, 0.02095801,\n       0.01622639, 0.04645484, 0.03287481, 0.03364679, 0.142285  ,\n       0.03389587, 0.03901642, 0.03161678, 0.03128767, 0.01879702,\n       0.02258776, 0.18996606, 0.04946   , 0.06075841, 0.05403821,\n       0.03957708, 0.03825328, 0.037205  , 0.04830378, 0.02846958,\n       0.02753688, 0.03431784, 0.10250452, 0.04074627, 0.02500308,\n       0.05315995, 0.03332913, 0.01049487, 0.02432507, 0.02410545,\n       0.03085861, 0.0254606 , 0.02567738, 0.04299633, 0.03941602,\n       0.02884391, 0.0175555 , 0.0304476 , 0.03232734, 0.02069765,\n       0.03284361, 0.03547284, 0.03199643, 0.04542413, 0.02711949,\n       0.0131673 , 0.05670255, 0.03447264, 0.0375326 , 0.02989775,\n       0.09651223, 0.02819206, 0.01895504, 0.01068594, 0.0253644 ,\n       0.01138134, 0.00604564, 0.00748083, 0.01716878, 0.02347359,\n       0.03130159, 0.01350996, 0.02976042, 0.02032147, 0.00266329,\n       0.01005685, 0.00919847, 0.03662079, 0.02517627, 0.01417456,\n       0.02815764, 0.01449232, 0.02208836, 0.00395361, 0.02262446,\n       0.04033008, 0.02752433, 0.04623348, 0.01183862, 0.02506032]), 'mean_score_time': array([0.00130262, 0.00159867, 0.00210497, 0.00210128, 0.00110207,\n       0.00159748, 0.00180235, 0.00169973, 0.00149901, 0.00120153,\n       0.00220168, 0.00149972, 0.00149658, 0.0016053 , 0.00150282,\n       0.00120151, 0.00190263, 0.00150146, 0.00270038, 0.00140531,\n       0.00129955, 0.00200264, 0.00110126, 0.00149944, 0.00310755,\n       0.00279846, 0.00300019, 0.00210299, 0.00190473, 0.00160182,\n       0.00180635, 0.00209894, 0.00139894, 0.00210326, 0.00119956,\n       0.00190017, 0.00150125, 0.00200081, 0.00140274, 0.0013001 ,\n       0.00120087, 0.00180132, 0.00150275, 0.00210307, 0.00180249,\n       0.00170219, 0.00190251, 0.00160196, 0.00159695, 0.00140195,\n       0.00100257, 0.00159893, 0.00139894, 0.00140171, 0.00119979,\n       0.00100079, 0.00170248, 0.00150065, 0.00150025, 0.00130036,\n       0.00110245, 0.0013993 , 0.00130279, 0.00169969, 0.0010989 ,\n       0.00110176, 0.00120378, 0.00210397, 0.00127201, 0.0016006 ,\n       0.00170276, 0.00100012, 0.0011014 , 0.00120051, 0.00190294,\n       0.00109994, 0.00100036, 0.0012017 , 0.00120099, 0.00140338,\n       0.00120125, 0.0015018 , 0.00120046, 0.00120125, 0.00140004,\n       0.0016    , 0.00130081, 0.00120246, 0.00130143, 0.00140016,\n       0.00140312, 0.0011008 , 0.00100212, 0.00099919, 0.00140131,\n       0.00190368, 0.00199995, 0.00119934, 0.00130069, 0.001401  ]), 'std_score_time': array([4.57415090e-04, 6.65617124e-04, 1.45521662e-03, 6.98243539e-04,\n       3.00130209e-04, 6.62866520e-04, 5.99968445e-04, 1.00303341e-03,\n       4.96444209e-04, 3.99284844e-04, 7.48299758e-04, 8.02577000e-04,\n       7.99812843e-04, 6.69265383e-04, 4.97822732e-04, 3.99591975e-04,\n       2.96061848e-04, 5.00633910e-04, 3.00417825e-03, 4.92183614e-04,\n       4.58566563e-04, 2.79479054e-06, 2.98984769e-04, 6.72489747e-04,\n       1.14635271e-03, 1.16257607e-03, 1.10161729e-03, 7.01021408e-04,\n       8.30917796e-04, 1.02203479e-03, 1.27158035e-03, 1.21782673e-03,\n       4.91597895e-04, 9.45020044e-04, 4.00271282e-04, 2.99135886e-04,\n       6.69183574e-04, 6.31246676e-06, 6.67147427e-04, 4.58307837e-04,\n       3.99674424e-04, 8.70888074e-04, 9.23105032e-04, 5.37871622e-04,\n       5.99765398e-04, 6.39304491e-04, 5.35457111e-04, 4.91238817e-04,\n       9.16158380e-04, 4.91310385e-04, 5.91686515e-06, 6.57935707e-04,\n       6.61087071e-04, 6.62363105e-04, 4.00093073e-04, 7.14635580e-06,\n       4.58418780e-04, 5.03339588e-04, 6.69308051e-04, 4.58396539e-04,\n       2.99536980e-04, 4.88561526e-04, 4.61544305e-04, 6.41856549e-04,\n       3.00690095e-04, 3.00563920e-04, 4.03731210e-04, 1.14115365e-03,\n       4.22385948e-04, 6.63601334e-04, 4.57986321e-04, 7.52436344e-07,\n       3.00842534e-04, 3.99852026e-04, 3.00055276e-04, 2.99890908e-04,\n       2.03369790e-06, 4.00034506e-04, 4.00569978e-04, 4.89648622e-04,\n       4.01272213e-04, 4.99107449e-04, 3.99875715e-04, 3.99723636e-04,\n       4.89697215e-04, 4.89425674e-04, 4.60132836e-04, 3.99061201e-04,\n       4.57643481e-04, 4.89941352e-04, 4.89669014e-04, 3.00003860e-04,\n       1.63381974e-06, 3.38428434e-06, 4.89741490e-04, 3.00790342e-04,\n       7.08869398e-07, 3.95937079e-04, 4.58854110e-04, 4.89309033e-04]), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__n_estimators': masked_array(data=[250, 250, 250, 250, 200, 200, 250, 100, 200, 100, 250,\n                   250, 200, 250, 200, 200, 250, 200, 100, 200, 100, 200,\n                   100, 200, 250, 200, 250, 200, 100, 100, 200, 250, 250,\n                   250, 200, 250, 200, 250, 250, 200, 250, 250, 250, 200,\n                   200, 250, 250, 250, 250, 100, 250, 100, 100, 250, 100,\n                   100, 200, 200, 100, 100, 100, 200, 200, 250, 250, 100,\n                   200, 100, 250, 250, 250, 250, 100, 250, 250, 200, 100,\n                   100, 250, 100, 250, 250, 250, 100, 250, 250, 200, 200,\n                   200, 250, 200, 100, 100, 100, 250, 200, 250, 200, 100,\n                   200],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_split': masked_array(data=[8, 8, 2, 16, 16, 8, 16, 2, 2, 8, 16, 8, 2, 8, 16, 8, 8,\n                   8, 8, 16, 16, 2, 2, 16, 2, 8, 8, 8, 2, 16, 2, 16, 16,\n                   2, 8, 16, 16, 2, 8, 2, 16, 16, 2, 2, 16, 2, 8, 16, 8,\n                   8, 2, 8, 8, 8, 16, 2, 16, 16, 8, 16, 2, 2, 8, 2, 2, 8,\n                   8, 2, 2, 2, 8, 16, 2, 8, 8, 2, 8, 2, 8, 16, 16, 16, 8,\n                   8, 16, 8, 16, 16, 2, 16, 2, 2, 16, 8, 16, 2, 2, 16, 2,\n                   2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_leaf': masked_array(data=[8, 16, 8, 1, 16, 16, 8, 8, 16, 16, 8, 8, 16, 1, 8, 16,\n                   8, 1, 16, 16, 16, 1, 16, 8, 1, 16, 8, 16, 8, 8, 16, 1,\n                   8, 8, 16, 8, 8, 1, 16, 8, 8, 1, 8, 8, 1, 16, 16, 8, 16,\n                   8, 8, 1, 16, 8, 1, 16, 8, 8, 16, 16, 16, 1, 16, 16, 16,\n                   8, 8, 8, 16, 8, 1, 16, 8, 1, 1, 8, 16, 8, 1, 1, 1, 8,\n                   16, 1, 16, 16, 1, 16, 8, 1, 1, 16, 16, 16, 1, 1, 1, 8,\n                   1, 8],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__max_depth': masked_array(data=[5, 15, 10, 5, 10, 10, 10, 15, 10, 15, 10, 10, 15, 5, 5,\n                   15, 15, 5, 15, 15, 10, 10, 15, 5, 15, 15, 10, 15, 10,\n                   5, 5, 10, 10, 10, 5, 15, 10, 10, 15, 15, 5, 5, 15, 10,\n                   5, 15, 15, 5, 15, 10, 5, 15, 15, 10, 15, 15, 10, 5, 10,\n                   5, 15, 5, 15, 10, 10, 15, 10, 15, 5, 10, 10, 15, 10, 5,\n                   15, 15, 5, 15, 10, 15, 10, 5, 15, 5, 15, 10, 10, 10, 5,\n                   5, 5, 15, 10, 5, 15, 15, 15, 15, 5, 5],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__learning_rate': masked_array(data=[0.001, 0.001, 0.001, 0.1, 0.001, 0.1, 0.001, 0.1, 0.1,\n                   0.001, 0.1, 0.001, 0.001, 0.001, 0.1, 0.001, 0.1, 0.1,\n                   0.1, 0.1, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,\n                   0.001, 0.1, 0.1, 0.001, 0.001, 0.1, 0.001, 0.1, 0.001,\n                   0.001, 0.001, 0.001, 0.1, 0.001, 0.001, 0.1, 0.1, 0.1,\n                   0.1, 0.1, 0.001, 0.001, 0.001, 0.1, 0.1, 0.001, 0.001,\n                   0.1, 0.1, 0.1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.1,\n                   0.001, 0.1, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.1, 0.1, 0.001, 0.001, 0.1, 0.1, 0.001, 0.1, 0.001,\n                   0.1, 0.001, 0.1, 0.001, 0.1, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.1, 0.001, 0.001, 0.001, 0.1, 0.001,\n                   0.001, 0.001, 0.001],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[12, 9, 10, 22, 5, 21, 21, 5, 4, 20, 21, 7, 22, 22, 7,\n                   15, 13, 11, 19, 17, 3, 8, 19, 16, 14, 12, 5, 18, 21,\n                   23, 18, 18, 6, 5, 3, 20, 10, 23, 16, 8, 9, 10, 23, 21,\n                   21, 21, 10, 4, 10, 7, 7, 2, 21, 11, 5, 22, 21, 15, 6,\n                   7, 23, 8, 8, 4, 11, 12, 10, 1, 2, 14, 21, 7, 21, 5, 12,\n                   4, 21, 8, 8, 6, 13, 16, 2, 10, 4, 7, 11, 16, 11, 11,\n                   22, 4, 20, 21, 17, 12, 3, 6, 1, 16],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 9, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 22, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 20, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 22, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 22, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 23, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 20, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 23, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 9, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 23, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 22, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 23, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 22, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 20, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 21, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4)}], 'split0_test_score': array([-1.79793867, -1.86720441, -1.78121015, -1.73675671, -1.84635423,\n       -1.5321978 , -1.81617991, -1.64270194, -1.55351475, -1.9283612 ,\n       -1.42131087, -1.77045604, -1.87172846, -1.78773146, -1.52303822,\n       -1.87837135, -1.63327199, -1.76231539, -1.47071205, -1.58843976,\n       -1.93545352, -1.58702654, -1.4543612 , -1.4387238 , -1.4742288 ,\n       -1.57583545, -1.48027686, -1.45784916, -1.93357023, -1.47669004,\n       -1.44854617, -1.82048422, -1.77155317, -1.6229649 , -1.85644772,\n       -1.66888201, -1.88162558, -1.84979592, -1.8481513 , -1.80372742,\n       -1.54875454, -1.83781697, -1.80338798, -1.62595918, -1.67297517,\n       -1.57149515, -1.63421236, -1.46859577, -1.80344931, -1.91335293,\n       -1.79259538, -1.81071393, -1.54208134, -1.85225277, -1.95830447,\n       -1.48442275, -1.49999712, -1.72112082, -1.95490845, -1.92763342,\n       -1.93674541, -1.86393018, -1.89308998, -1.46675657, -1.86493724,\n       -1.45793334, -1.82524254, -1.92344166, -1.79551185, -1.80175654,\n       -1.82945922, -1.87422742, -1.3944112 , -1.66443853, -1.8620019 ,\n       -1.87145246, -1.53758852, -1.49446833, -1.85310151, -1.74973031,\n       -1.82167613, -1.60091525, -1.86560359, -1.52035956, -1.80934619,\n       -1.67217292, -1.87913774, -1.84222211, -1.86575358, -1.80253791,\n       -1.84026842, -1.36837019, -1.9283612 , -1.94102325, -1.8211763 ,\n       -1.4709716 , -1.85666886, -1.81505197, -1.95915472, -1.84077696]), 'split1_test_score': array([-1.78299545, -1.77681887, -1.78000263, -1.47697864, -1.80750147,\n       -1.40517349, -1.78897637, -1.41215006, -1.40908218, -1.88639769,\n       -1.50258059, -1.77559949, -1.82358453, -1.76030147, -1.45531751,\n       -1.8223976 , -1.49087446, -1.3835261 , -1.31337668, -1.36639872,\n       -1.89362188, -1.25029118, -1.38214626, -1.41309077, -1.89188226,\n       -1.49877334, -1.54089051, -1.45851104, -1.90226959, -1.3248309 ,\n       -1.31833621, -1.77207395, -1.77871661, -1.38951894, -1.80628963,\n       -1.49780138, -1.80516681, -1.83443921, -1.78463255, -1.82105046,\n       -1.5742533 , -1.76157619, -1.77808103, -1.50537685, -1.39418065,\n       -1.40147282, -1.57890441, -1.46057195, -1.76742103, -1.90420018,\n       -1.76840491, -1.59610187, -1.32251695, -1.76389278, -1.91171041,\n       -1.35054246, -1.43822014, -1.47472745, -1.90648611, -1.89596157,\n       -1.89929871, -1.81402757, -1.81399992, -1.45145985, -1.76639413,\n       -1.50001402, -1.82106168, -1.90992337, -1.7590543 , -1.77915672,\n       -1.73365265, -1.77632243, -1.50971334, -1.44564428, -1.81832161,\n       -1.80529866, -1.26959637, -1.59581   , -1.69442748, -1.23227125,\n       -1.80421706, -1.44691725, -1.78147707, -1.382578  , -1.7666364 ,\n       -1.4856181 , -1.8054044 , -1.82403003, -1.80446324, -1.76692058,\n       -1.84154278, -1.39349571, -1.88639769, -1.90956719, -1.77521658,\n       -1.55634054, -1.78440205, -1.81897736, -1.9502854 , -1.80686294]), 'split2_test_score': array([-1.75948028, -1.81466252, -1.76232876, -1.4376382 , -1.83884161,\n       -1.60037511, -1.77286199, -1.54804872, -1.81261215, -1.90177782,\n       -1.60956327, -1.7727941 , -1.8428189 , -1.79100992, -1.5429647 ,\n       -1.8431783 , -1.49056541, -1.46636779, -1.63992133, -1.6706738 ,\n       -1.89778433, -2.14212323, -1.65113288, -1.53888872, -2.21356712,\n       -1.64940707, -1.65832926, -1.65869364, -1.89535924, -1.48837309,\n       -1.63021596, -1.84641756, -1.76886292, -1.61108479, -1.83457203,\n       -1.579438  , -1.81930648, -1.85095678, -1.8067854 , -1.79697436,\n       -1.51275627, -1.77630039, -1.77668163, -1.57290593, -1.43750327,\n       -1.64647249, -1.66126565, -1.73228929, -1.82244275, -1.87446954,\n       -1.77614234, -1.60265375, -1.62816515, -1.78560985, -1.89129989,\n       -1.59811864, -1.52000679, -1.53804934, -1.89699363, -1.89830589,\n       -1.89332906, -1.82179852, -1.83829714, -1.79206043, -1.8043775 ,\n       -1.55704785, -1.79024933, -1.86552779, -1.79737403, -1.77512443,\n       -1.80585101, -1.81455828, -1.5880005 , -1.56235867, -1.68274912,\n       -1.80347292, -1.52744529, -1.51885603, -1.78405007, -1.49174611,\n       -1.76656253, -1.55016511, -1.8321778 , -1.3751952 , -1.8141546 ,\n       -1.73420634, -1.80867909, -1.83368965, -1.83036519, -1.77017784,\n       -1.78253662, -1.66977201, -1.90177782, -1.89454732, -1.72523925,\n       -2.3212884 , -1.80163565, -1.79797637, -1.9092946 , -1.80965528]), 'split3_test_score': array([-1.88420374, -1.91672907, -1.86833916, -2.11553241, -1.88307344,\n       -2.08241266, -1.87617375, -2.05160538, -2.10638699, -1.93944718,\n       -2.02512364, -1.87517612, -1.96072322, -1.87661397, -2.06535943,\n       -1.92244208, -2.06950461, -2.13365142, -2.00330494, -2.15466736,\n       -1.9364224 , -2.37171576, -2.01258731, -1.93628409, -2.41238837,\n       -2.16920479, -1.99806934, -2.10454414, -1.92246457, -1.92664288,\n       -2.06413245, -1.84761752, -1.87601641, -1.98674737, -1.88330595,\n       -2.18795436, -1.91326297, -1.90224419, -1.91617724, -1.89990733,\n       -2.02583583, -1.91869798, -1.93931058, -2.05769873, -2.16440427,\n       -2.09007542, -2.19771845, -1.94841309, -1.87227977, -1.94827677,\n       -1.87289856, -1.93917606, -2.05021611, -1.9022353 , -1.9627459 ,\n       -2.03314502, -2.07483616, -2.08224009, -1.95684528, -1.93648362,\n       -1.98554329, -1.92210066, -1.92795171, -2.06767434, -1.91154253,\n       -2.03167421, -1.89065267, -1.9381899 , -1.85882481, -1.87330031,\n       -1.89010106, -1.91668647, -1.9717595 , -1.91658953, -1.96394491,\n       -1.89215141, -2.00139808, -2.06103893, -1.90944   , -2.25159684,\n       -1.92726383, -2.06716529, -1.87699919, -2.04921248, -1.86141815,\n       -2.18236109, -1.91764101, -1.88146334, -1.91028558, -1.9011132 ,\n       -1.9646806 , -2.06963395, -1.93944718, -1.95706105, -1.90993285,\n       -2.53807402, -1.94834225, -1.90031781, -1.95970936, -1.88956568]), 'split4_test_score': array([-1.79815806, -1.81394236, -1.79268857, -1.68972158, -1.82577522,\n       -1.7427793 , -1.84129866, -1.51919068, -1.57452114, -1.89944486,\n       -1.66936895, -1.77780778, -1.85884825, -1.77470992, -1.52469261,\n       -1.83211816, -1.58278889, -1.66613696, -1.6896729 , -1.74610515,\n       -1.88938285, -1.99630681, -1.71946264, -1.67171743, -2.24256659,\n       -1.71043748, -1.50263463, -1.79300809, -1.89225507, -1.68094591,\n       -1.73482003, -1.78758718, -1.77712134, -1.46528858, -1.83027267,\n       -1.6992562 , -1.85820137, -1.81874926, -1.81034725, -1.81089794,\n       -1.56260745, -1.82904699, -1.85789405, -1.71827515, -1.71703259,\n       -1.73801491, -1.61605055, -1.46114458, -1.80444361, -1.87931957,\n       -1.78004007, -1.50635993, -1.70049097, -1.84249728, -1.88372102,\n       -1.75102104, -1.67235332, -1.61093382, -1.89092172, -1.89120776,\n       -1.91010509, -1.84419569, -1.82908238, -1.47130997, -1.81451302,\n       -1.60473779, -1.82004836, -1.87562806, -1.7884279 , -1.8036467 ,\n       -1.81348285, -1.80006298, -1.68201327, -1.38988669, -1.83437355,\n       -1.84379737, -1.72257609, -1.5751237 , -1.83359288, -1.42989325,\n       -1.81539217, -1.52666975, -1.80584362, -1.52198398, -1.78952176,\n       -1.6502108 , -1.84473332, -1.83895056, -1.85564209, -1.7784924 ,\n       -1.86129328, -1.46385834, -1.89944486, -1.90611999, -1.82418128,\n       -2.30815109, -1.77827403, -1.80698897, -1.89682432, -1.84672188]), 'split5_test_score': array([-1.77691947, -1.81772831, -1.77303904, -1.7944598 , -1.80401272,\n       -1.62236381, -1.85794674, -1.66843076, -1.64143568, -1.86831069,\n       -1.53752068, -1.74852187, -1.84596546, -1.74852652, -1.66857617,\n       -1.82967699, -1.7091198 , -1.76438044, -1.68576148, -1.64775148,\n       -1.87871159, -2.14304978, -1.58278321, -1.57478163, -2.35036486,\n       -1.66687171, -1.6247272 , -1.53762357, -1.86962988, -1.60645875,\n       -1.59794169, -1.77314254, -1.752979  , -1.64270792, -1.81314788,\n       -1.77525404, -1.84247567, -1.77326048, -1.82142162, -1.78733822,\n       -1.63260124, -1.83626845, -1.84030687, -1.63823229, -1.71531384,\n       -1.63093382, -1.64508434, -1.67445082, -1.76707581, -1.85890579,\n       -1.75049387, -1.62864629, -1.62789083, -1.81613485, -1.89619156,\n       -1.7141925 , -1.52689998, -1.65689415, -1.88835236, -1.87321551,\n       -1.89544928, -1.83586567, -1.82851722, -1.55213213, -1.80618672,\n       -1.69514525, -1.80291172, -1.86626795, -1.76832254, -1.77405671,\n       -1.76342734, -1.80560457, -1.57897175, -1.81931558, -1.84473289,\n       -1.80862867, -1.68845379, -1.56634018, -1.82887582, -1.76013108,\n       -1.87965362, -1.64953395, -1.80962929, -1.60632088, -1.78122032,\n       -1.65218646, -1.89605004, -1.79231854, -1.84951265, -1.7579494 ,\n       -1.87563623, -1.51830022, -1.86831069, -1.89304127, -1.89548336,\n       -2.29640461, -1.85139654, -1.78438949, -1.89865565, -1.79902249]), 'split6_test_score': array([-1.76815373, -1.83335561, -1.74853091, -1.48568956, -1.81414752,\n       -1.33468665, -1.78435249, -1.31322101, -1.33656001, -1.88393668,\n       -1.49863574, -1.76364513, -1.80318227, -1.79152757, -1.31485687,\n       -1.82691829, -1.4760909 , -1.31708705, -1.42284327, -1.35629528,\n       -1.87880219, -2.00544287, -1.37286341, -1.4174863 , -2.09495002,\n       -1.42925406, -1.34257582, -1.43783188, -1.86393743, -1.49096103,\n       -1.38988466, -1.73775745, -1.75875173, -1.32568574, -1.81428346,\n       -1.53838715, -1.7918522 , -1.74203851, -1.80035779, -1.79068091,\n       -1.47515163, -1.81685502, -1.79432056, -1.42489943, -1.48155091,\n       -1.4219289 , -1.40632571, -1.39955323, -1.78181907, -1.86816303,\n       -1.76339257, -1.32123641, -1.40292201, -1.76230082, -1.8554013 ,\n       -1.47964864, -1.51346941, -1.47016121, -1.89448136, -1.8851749 ,\n       -1.87442914, -1.81925981, -1.85206376, -1.45867032, -1.82262506,\n       -1.46585987, -1.78160102, -1.83950625, -1.77316545, -1.73684696,\n       -1.71404459, -1.82002727, -1.5312536 , -1.29135217, -1.6988095 ,\n       -1.82701031, -1.49277403, -1.46282245, -1.84051758, -1.43149092,\n       -1.86412293, -1.4438022 , -1.814853  , -1.33667323, -1.78158355,\n       -1.33152395, -1.84322717, -1.82230142, -1.80320597, -1.74491187,\n       -1.84044473, -1.40342086, -1.88393668, -1.8793385 , -1.82828868,\n       -2.01401647, -1.75894761, -1.79863086, -1.86804128, -1.8158517 ]), 'split7_test_score': array([-1.87497934, -1.88194027, -1.89663533, -1.81130861, -1.88084924,\n       -1.71373324, -1.85286053, -1.94333875, -1.89151741, -1.92018872,\n       -1.91254184, -1.90681954, -1.8949556 , -1.85701801, -2.05557817,\n       -1.90557246, -1.7674894 , -1.6515388 , -1.63023176, -1.63088196,\n       -1.90858243, -1.99901032, -1.74525969, -1.9320975 , -1.86982244,\n       -1.70238583, -2.00701898, -1.73998375, -1.90012358, -1.77206544,\n       -1.6352352 , -1.81700114, -1.90896566, -1.98501119, -1.86230642,\n       -1.68019009, -1.89059536, -1.89176786, -1.8724753 , -1.91683503,\n       -2.03697631, -1.86829251, -1.85297157, -1.77919059, -1.82040367,\n       -1.78254067, -1.73064987, -2.04030038, -1.86590626, -1.93796576,\n       -1.89146054, -2.304348  , -1.75955913, -1.86686903, -1.92979644,\n       -1.61694064, -1.86842049, -1.64856494, -1.93097345, -1.91765778,\n       -1.9261532 , -1.86371572, -1.90243286, -2.00389866, -1.87869363,\n       -1.99311833, -1.91091157, -1.94548377, -1.85985221, -1.90480304,\n       -1.86286515, -1.8877046 , -1.83233799, -2.0974447 , -1.91222076,\n       -1.88884805, -1.65518391, -2.10041744, -1.85545358, -1.83850733,\n       -1.83520572, -1.75417997, -1.87783582, -1.94429532, -1.86795642,\n       -1.83411785, -1.85069143, -1.87833393, -1.8774241 , -1.85736319,\n       -1.84396872, -1.87302404, -1.92018872, -1.92712087, -1.87604006,\n       -1.8982259 , -1.97012245, -1.91480131, -1.93460573, -1.88360427]), 'split8_test_score': array([-1.79385023, -1.79986147, -1.76095543, -1.9189344 , -1.84143248,\n       -1.6704557 , -1.76632812, -1.64071661, -1.8334667 , -1.9044888 ,\n       -1.60659715, -1.75875189, -1.88302194, -1.80153301, -1.6483525 ,\n       -1.82704634, -1.66574613, -1.71488054, -1.70172923, -1.65183436,\n       -1.89392732, -2.14475213, -1.76933011, -1.67956471, -2.45972408,\n       -1.67968065, -1.76566805, -1.76871146, -1.88754038, -1.6589247 ,\n       -1.61067552, -1.80243025, -1.79402341, -1.69661972, -1.83694923,\n       -1.61619936, -1.79833337, -1.80296185, -1.79987574, -1.79803026,\n       -1.78943376, -1.85794662, -1.81371375, -1.63717896, -1.78076893,\n       -1.66764914, -1.62649234, -1.71432541, -1.82141076, -1.87429695,\n       -1.76095729, -1.68952571, -1.63935067, -1.77080934, -1.89296805,\n       -1.75968072, -1.65609122, -1.56873348, -1.89337117, -1.8980552 ,\n       -1.91866672, -1.83711765, -1.82613187, -1.85525687, -1.80011523,\n       -1.63987345, -1.79816427, -1.89217487, -1.80146826, -1.78012084,\n       -1.79792118, -1.80962612, -1.69359525, -1.57860548, -1.80512516,\n       -1.82886611, -1.61234085, -1.63172256, -1.86082717, -1.70052233,\n       -1.8823174 , -1.59429389, -1.81510802, -1.61520782, -1.8100848 ,\n       -1.80773347, -1.88605946, -1.85325856, -1.80679713, -1.805106  ,\n       -1.92996061, -1.76956235, -1.9044888 , -1.8874346 , -1.90505031,\n       -2.35286291, -1.73236622, -1.81781495, -1.92791146, -1.82267467]), 'split9_test_score': array([-1.85760759, -1.82127765, -1.84026786, -1.49133401, -1.82684777,\n       -1.58000915, -1.80300984, -1.59426643, -1.45758812, -1.89535147,\n       -1.48413042, -1.83195934, -1.85132274, -1.81392779, -1.51587507,\n       -1.84095159, -1.59976193, -1.65635827, -1.41675441, -1.47218254,\n       -1.89146349, -2.10355627, -1.47798095, -1.51014274, -1.97187398,\n       -1.53739311, -1.41346418, -1.50033664, -1.90619707, -1.48375554,\n       -1.4792758 , -1.7833145 , -1.83004995, -1.59091498, -1.82763056,\n       -1.47347835, -1.85059208, -1.68214427, -1.81657543, -1.84942772,\n       -1.52848736, -1.83530756, -1.81275596, -1.54702622, -1.5873065 ,\n       -1.54956831, -1.63680952, -1.21428786, -1.81157337, -1.90564952,\n       -1.83655402, -1.413875  , -1.51228874, -1.82705663, -1.89048123,\n       -1.48294902, -1.47026466, -1.62047894, -1.90559786, -1.89467778,\n       -1.90478913, -1.86572002, -1.84599435, -1.35442204, -1.82071332,\n       -1.54330471, -1.86272167, -1.89384714, -1.80122463, -1.84424638,\n       -1.75189077, -1.82739121, -1.37175989, -1.46853252, -1.76792056,\n       -1.81837541, -1.51281183, -1.52171864, -1.84980583, -1.63568511,\n       -1.82600989, -1.50765815, -1.80743914, -1.52254199, -1.79206234,\n       -1.4946993 , -1.84657643, -1.83117234, -1.86129322, -1.82758178,\n       -1.88128126, -1.32516314, -1.89535147, -1.89667398, -1.78720783,\n       -1.95709885, -1.72602807, -1.85211371, -1.90040471, -1.87536643]), 'mean_test_score': array([-1.80942866, -1.83435205, -1.80039978, -1.69583539, -1.83688357,\n       -1.62841869, -1.81599884, -1.63336703, -1.66166851, -1.90277051,\n       -1.62673731, -1.79815313, -1.86361514, -1.80028996, -1.63146113,\n       -1.85286732, -1.64852135, -1.65162428, -1.5974308 , -1.62852304,\n       -1.9004152 , -1.97432749, -1.61679077, -1.61127777, -2.09813685,\n       -1.66192435, -1.63336548, -1.64570934, -1.8973347 , -1.59096483,\n       -1.59090637, -1.79878263, -1.80170402, -1.63165441, -1.83652055,\n       -1.67168409, -1.84514119, -1.81483583, -1.82767996, -1.82748696,\n       -1.66868577, -1.83381087, -1.8269424 , -1.65067433, -1.67714398,\n       -1.65001516, -1.67335132, -1.61139324, -1.81178217, -1.89646   ,\n       -1.79929395, -1.68126369, -1.61854819, -1.81896586, -1.90726203,\n       -1.62706614, -1.62405593, -1.63919042, -1.91189314, -1.90183734,\n       -1.9144509 , -1.84877315, -1.85575612, -1.64736412, -1.82900984,\n       -1.64887088, -1.83035648, -1.89499908, -1.8003226 , -1.80730586,\n       -1.79626958, -1.83322113, -1.61538163, -1.62341681, -1.81902   ,\n       -1.83879014, -1.60201688, -1.65283182, -1.83100919, -1.65215746,\n       -1.84224213, -1.61413008, -1.82869665, -1.58743685, -1.80739845,\n       -1.68448303, -1.85782001, -1.83977405, -1.84647427, -1.80121542,\n       -1.86616132, -1.58546008, -1.90277051, -1.9091928 , -1.83478165,\n       -2.07134344, -1.82081837, -1.83070628, -1.92048872, -1.83901023]), 'std_test_score': array([0.04320321, 0.03985232, 0.04770168, 0.21242356, 0.02620219,\n       0.19410732, 0.03688893, 0.21110451, 0.23103011, 0.02045424,\n       0.18580506, 0.05140342, 0.04126385, 0.03805844, 0.23354175,\n       0.03426601, 0.16787341, 0.21901205, 0.18832774, 0.21499184,\n       0.01956038, 0.30603526, 0.19222772, 0.18446653, 0.28760816,\n       0.19117887, 0.21744451, 0.20069268, 0.02015878, 0.16563153,\n       0.19900671, 0.03305987, 0.05022872, 0.20913561, 0.0230816 ,\n       0.19415943, 0.03942236, 0.06423496, 0.03811772, 0.04399505,\n       0.19875989, 0.04223407, 0.04620559, 0.16630678, 0.21344152,\n       0.18700246, 0.19177025, 0.24392879, 0.034327  , 0.02883929,\n       0.04727198, 0.26823251, 0.19100152, 0.04543058, 0.03212219,\n       0.18592932, 0.19296319, 0.16594219, 0.0248317 , 0.01854315,\n       0.02908032, 0.030408  , 0.03643227, 0.24503391, 0.04095599,\n       0.19516632, 0.04143223, 0.03256362, 0.03256734, 0.04889454,\n       0.05334943, 0.04222454, 0.17695496, 0.24017565, 0.08261898,\n       0.03221464, 0.1801531 , 0.21920427, 0.05425935, 0.26795045,\n       0.04398101, 0.17513573, 0.03172653, 0.22463379, 0.0319532 ,\n       0.2214612 , 0.03466363, 0.02515863, 0.03344428, 0.04641341,\n       0.04852004, 0.23712614, 0.02045424, 0.02373252, 0.0584147 ,\n       0.33738342, 0.08057012, 0.04211017, 0.02914043, 0.03197842]), 'rank_test_score': array([ 53,  70,  48,  41,  73,  17,  56,  22,  33,  91,  15,  43,  84,\n        46,  19,  81,  26,  30,   5,  18,  89,  98,  11,   7, 100,  34,\n        21,  24,  88,   4,   3,  44,  50,  20,  72,  36,  78,  55,  62,\n        61,  35,  69,  60,  29,  38,  28,  37,   8,  54,  87,  45,  39,\n        12,  57,  93,  16,  14,  23,  95,  90,  96,  80,  82,  25,  64,\n        27,  65,  86,  47,  51,  42,  68,  10,  13,  58,  74,   6,  32,\n        67,  31,  77,   9,  63,   2,  52,  40,  83,  76,  79,  49,  85,\n         1,  91,  94,  71,  99,  59,  66,  97,  75]), 'split0_train_score': array([-1.72484786e+00, -1.76158775e+00, -1.70461280e+00, -1.39572692e-01,\n       -1.78993168e+00, -2.39500534e-01, -1.70461168e+00, -2.05971013e-01,\n       -3.34556029e-01, -1.87262369e+00, -4.31184787e-02, -1.70666751e+00,\n       -1.79439990e+00, -1.70606616e+00, -3.08285056e-01, -1.79520678e+00,\n       -4.10591820e-02, -1.24700504e-01, -4.49454709e-01, -2.46248295e-01,\n       -1.87574231e+00, -9.53862102e-07, -4.42335524e-01, -2.36047617e-01,\n       -7.17511350e-12, -2.61371125e-01, -5.44658477e-02, -2.40933382e-01,\n       -1.84901858e+00, -4.56937527e-01, -3.93388878e-01, -1.62929184e+00,\n       -1.70832452e+00, -7.42604119e-02, -1.79034027e+00, -4.50550747e-02,\n       -1.74575193e+00, -1.54751309e+00, -1.75797087e+00, -1.75221242e+00,\n       -2.28962129e-01, -1.71798450e+00, -1.70152738e+00, -7.71937274e-02,\n       -1.81635314e-01, -1.96741577e-01, -2.12335389e-01, -2.97038040e-01,\n       -1.74924700e+00, -1.85725703e+00, -1.72705564e+00, -5.48886077e-03,\n       -4.32982737e-01, -1.69680116e+00, -1.83264388e+00, -4.41687173e-01,\n       -6.51217251e-02, -2.64979011e-01, -1.88055964e+00, -1.87529014e+00,\n       -1.87694106e+00, -1.74643651e+00, -1.79786775e+00, -2.64199538e-01,\n       -1.76162074e+00, -1.68918306e-01, -1.75230240e+00, -1.86710251e+00,\n       -1.75622142e+00, -1.68704054e+00, -1.59363056e+00, -1.76475204e+00,\n       -1.76776978e-01, -1.17164042e-01, -1.59081571e+00, -1.75929822e+00,\n       -6.18048493e-01, -1.63275581e-01, -1.60230655e+00, -2.56555853e-02,\n       -1.65298648e+00, -1.83699066e-01, -1.77005104e+00, -3.58693498e-01,\n       -1.75140546e+00, -2.24938491e-01, -1.71000742e+00, -1.78453271e+00,\n       -1.76658653e+00, -1.71808719e+00, -1.74136958e+00, -5.80161273e-01,\n       -1.87262369e+00, -1.87711571e+00, -1.66356747e+00, -1.39219118e-09,\n       -1.53662922e+00, -1.75497503e+00, -1.88377117e+00, -1.76700133e+00]), 'split1_train_score': array([-1.71495222e+00, -1.77802333e+00, -1.69287761e+00, -1.07642496e-01,\n       -1.79667965e+00, -2.30938827e-01, -1.70515296e+00, -1.92508572e-01,\n       -3.29879493e-01, -1.87768915e+00, -3.71116730e-02, -1.69766006e+00,\n       -1.80548127e+00, -1.70708097e+00, -2.88605118e-01, -1.80777830e+00,\n       -4.85925825e-02, -1.03740487e-01, -4.22338919e-01, -2.38443996e-01,\n       -1.88042746e+00, -2.55939592e-07, -4.16305043e-01, -2.48605882e-01,\n       -7.18884445e-12, -2.41982123e-01, -5.49658320e-02, -2.22232436e-01,\n       -1.85105145e+00, -4.25593533e-01, -3.88692615e-01, -1.65833649e+00,\n       -1.69710082e+00, -5.89222052e-02, -1.79658759e+00, -4.28193978e-02,\n       -1.76479224e+00, -1.55192032e+00, -1.76993489e+00, -1.74537342e+00,\n       -2.03504436e-01, -1.73013764e+00, -1.69967080e+00, -6.51326092e-02,\n       -1.69508752e-01, -1.83874466e-01, -2.01065648e-01, -2.93921606e-01,\n       -1.75757008e+00, -1.85602197e+00, -1.71819711e+00, -3.67081251e-03,\n       -4.23724602e-01, -1.71714796e+00, -1.84312753e+00, -4.24972521e-01,\n       -5.66605806e-02, -2.39485156e-01, -1.89052107e+00, -1.88026294e+00,\n       -1.88613676e+00, -1.75469601e+00, -1.81291792e+00, -2.61532023e-01,\n       -1.77463740e+00, -1.48940715e-01, -1.74264593e+00, -1.86399071e+00,\n       -1.75882273e+00, -1.68628258e+00, -1.59404775e+00, -1.77789335e+00,\n       -1.65828926e-01, -8.07426252e-02, -1.58485175e+00, -1.77184586e+00,\n       -5.92787605e-01, -1.52481810e-01, -1.60079075e+00, -2.75935415e-02,\n       -1.65980108e+00, -1.80453674e-01, -1.78598145e+00, -3.23231771e-01,\n       -1.75907440e+00, -2.11640362e-01, -1.71836703e+00, -1.78971995e+00,\n       -1.78505833e+00, -1.72120600e+00, -1.74868803e+00, -5.81281558e-01,\n       -1.87768915e+00, -1.88851668e+00, -1.66113726e+00, -1.39490855e-09,\n       -1.53962831e+00, -1.74665665e+00, -1.88877613e+00, -1.75457578e+00]), 'split2_train_score': array([-1.71969808e+00, -1.76746804e+00, -1.69508121e+00, -1.11695727e-01,\n       -1.79374628e+00, -2.14939272e-01, -1.69998940e+00, -1.81983074e-01,\n       -3.07526563e-01, -1.87429232e+00, -4.98558153e-02, -1.69603755e+00,\n       -1.80494402e+00, -1.69658054e+00, -2.89041464e-01, -1.80649094e+00,\n       -3.71840442e-02, -1.15530776e-01, -4.17208431e-01, -2.11056108e-01,\n       -1.88048326e+00, -3.52782679e-07, -4.14825487e-01, -2.16576776e-01,\n       -7.20188822e-12, -2.20841838e-01, -6.30052329e-02, -2.10997569e-01,\n       -1.85291576e+00, -3.98187382e-01, -3.66131210e-01, -1.64378161e+00,\n       -1.69533143e+00, -4.84613068e-02, -1.79431657e+00, -3.63856460e-02,\n       -1.76158834e+00, -1.55630610e+00, -1.76533220e+00, -1.74565935e+00,\n       -2.15331536e-01, -1.71854516e+00, -1.70205825e+00, -5.54179994e-02,\n       -1.52039078e-01, -1.70089597e-01, -1.82053653e-01, -2.55349700e-01,\n       -1.75231629e+00, -1.85703539e+00, -1.72594562e+00, -4.03160748e-03,\n       -4.12036748e-01, -1.71297735e+00, -1.83872954e+00, -4.08512846e-01,\n       -5.54468703e-02, -2.27096153e-01, -1.88738767e+00, -1.88083498e+00,\n       -1.88592617e+00, -1.75005573e+00, -1.80708557e+00, -2.43799023e-01,\n       -1.76642210e+00, -1.43859085e-01, -1.74727585e+00, -1.86568228e+00,\n       -1.75679288e+00, -1.69052637e+00, -1.59972637e+00, -1.76542734e+00,\n       -1.73447171e-01, -6.81336549e-02, -1.59959840e+00, -1.76849716e+00,\n       -6.04174832e-01, -1.45750559e-01, -1.60570123e+00, -3.41361117e-02,\n       -1.66391233e+00, -1.49644975e-01, -1.77845245e+00, -3.03848594e-01,\n       -1.75367578e+00, -1.93582404e-01, -1.72202602e+00, -1.78697895e+00,\n       -1.77907502e+00, -1.70595146e+00, -1.75007249e+00, -5.47813393e-01,\n       -1.87429232e+00, -1.88642952e+00, -1.65627799e+00, -1.39741728e-09,\n       -1.54164953e+00, -1.74646882e+00, -1.88094302e+00, -1.75928997e+00]), 'split3_train_score': array([-1.69146010e+00, -1.75229700e+00, -1.68045962e+00, -9.40168211e-02,\n       -1.77570125e+00, -2.12651591e-01, -1.68401951e+00, -1.94078288e-01,\n       -3.23138795e-01, -1.86679247e+00, -3.09948660e-02, -1.68039778e+00,\n       -1.78154699e+00, -1.67882819e+00, -2.54505838e-01, -1.78953440e+00,\n       -3.14955857e-02, -9.82104651e-02, -4.00170150e-01, -2.14166294e-01,\n       -1.86890314e+00, -1.55861585e-09, -4.07203634e-01, -2.21024378e-01,\n       -7.18386628e-12, -2.35093532e-01, -4.59414448e-02, -2.12950375e-01,\n       -1.84366959e+00, -4.08773759e-01, -3.65489486e-01, -1.62945931e+00,\n       -1.68043562e+00, -5.77690422e-02, -1.77658545e+00, -4.08558486e-02,\n       -1.73968150e+00, -1.54777153e+00, -1.74939671e+00, -1.73386706e+00,\n       -2.03355795e-01, -1.69704148e+00, -1.67946465e+00, -6.41036531e-02,\n       -1.79308851e-01, -1.64013395e-01, -1.93685601e-01, -2.48664588e-01,\n       -1.73553455e+00, -1.84781969e+00, -1.69378638e+00, -6.13025177e-03,\n       -3.81280451e-01, -1.68688624e+00, -1.83750870e+00, -4.10034459e-01,\n       -5.06547978e-02, -2.19557240e-01, -1.87970718e+00, -1.86868928e+00,\n       -1.87169298e+00, -1.73892629e+00, -1.79325045e+00, -2.47757791e-01,\n       -1.75007266e+00, -1.34792231e-01, -1.73377405e+00, -1.85996376e+00,\n       -1.73967229e+00, -1.67579429e+00, -1.58847362e+00, -1.75403861e+00,\n       -1.68937977e-01, -7.13678961e-02, -1.59645445e+00, -1.75261619e+00,\n       -5.54595063e-01, -1.51176364e-01, -1.58881284e+00, -2.32941750e-02,\n       -1.63843822e+00, -1.53784996e-01, -1.76286263e+00, -2.96141820e-01,\n       -1.73361605e+00, -2.00449273e-01, -1.70234953e+00, -1.77531488e+00,\n       -1.75418114e+00, -1.69385948e+00, -1.74535963e+00, -5.46496351e-01,\n       -1.86679247e+00, -1.87533931e+00, -1.64091542e+00, -1.39391991e-09,\n       -1.53853726e+00, -1.73390170e+00, -1.87721652e+00, -1.74049191e+00]), 'split4_train_score': array([-1.72297470e+00, -1.76624477e+00, -1.69080280e+00, -1.20917010e-01,\n       -1.79142058e+00, -2.12709586e-01, -1.70447453e+00, -1.81020216e-01,\n       -3.12771835e-01, -1.87903037e+00, -3.03353662e-02, -1.69232019e+00,\n       -1.80175710e+00, -1.68930015e+00, -2.62549234e-01, -1.80233785e+00,\n       -2.90342681e-02, -1.25886555e-01, -4.08446067e-01, -2.08685925e-01,\n       -1.88148846e+00, -2.46757894e-06, -3.96217576e-01, -2.20527179e-01,\n       -7.20282512e-12, -2.24394569e-01, -4.23750388e-02, -2.12451768e-01,\n       -1.85284851e+00, -3.91377793e-01, -3.38124775e-01, -1.64707399e+00,\n       -1.69216732e+00, -6.01595725e-02, -1.79268140e+00, -3.78618850e-02,\n       -1.75484701e+00, -1.54827290e+00, -1.76406885e+00, -1.74196890e+00,\n       -1.87301680e-01, -1.72027589e+00, -1.70094735e+00, -6.22371774e-02,\n       -1.64191912e-01, -1.59302200e-01, -1.83749290e-01, -2.65013953e-01,\n       -1.75061498e+00, -1.85497620e+00, -1.72064162e+00, -5.87223189e-03,\n       -4.02373488e-01, -1.70601249e+00, -1.84869006e+00, -3.95314172e-01,\n       -4.38045046e-02, -1.95943677e-01, -1.88958578e+00, -1.88040819e+00,\n       -1.88461485e+00, -1.75409485e+00, -1.80866820e+00, -2.51878575e-01,\n       -1.76665128e+00, -1.32656250e-01, -1.74209395e+00, -1.87028129e+00,\n       -1.75790139e+00, -1.68999229e+00, -1.58331085e+00, -1.77209625e+00,\n       -1.42279888e-01, -8.80272782e-02, -1.59909740e+00, -1.76682701e+00,\n       -5.65584860e-01, -1.46953488e-01, -1.60186763e+00, -3.11087064e-02,\n       -1.66349905e+00, -1.58246054e-01, -1.77747023e+00, -3.78343888e-01,\n       -1.75387695e+00, -1.97000423e-01, -1.72139725e+00, -1.78818348e+00,\n       -1.77988431e+00, -1.71227474e+00, -1.75198360e+00, -5.80933469e-01,\n       -1.87903037e+00, -1.88780583e+00, -1.65888244e+00, -1.39756357e-09,\n       -1.54255904e+00, -1.74370828e+00, -1.88325733e+00, -1.76114504e+00]), 'split5_train_score': array([-1.70856796e+00, -1.77032704e+00, -1.68949371e+00, -8.53086041e-02,\n       -1.79281889e+00, -2.29356447e-01, -1.69806893e+00, -1.99329892e-01,\n       -3.25730064e-01, -1.87816887e+00, -3.12305652e-02, -1.69599413e+00,\n       -1.80448062e+00, -1.68151865e+00, -2.84752407e-01, -1.80623857e+00,\n       -3.92085008e-02, -1.30259902e-01, -4.19663818e-01, -2.23758423e-01,\n       -1.88218883e+00, -1.86797167e-09, -4.34065743e-01, -2.49433825e-01,\n       -7.20282512e-12, -2.37410250e-01, -5.97875786e-02, -2.24690182e-01,\n       -1.85118483e+00, -4.18421073e-01, -3.74502500e-01, -1.63929719e+00,\n       -1.69568332e+00, -5.36547625e-02, -1.79386805e+00, -3.51815604e-02,\n       -1.76059257e+00, -1.55098831e+00, -1.76763640e+00, -1.74240753e+00,\n       -2.04600741e-01, -1.71465680e+00, -1.69210500e+00, -5.85239105e-02,\n       -1.41417372e-01, -1.77529959e-01, -1.85160889e-01, -2.72920279e-01,\n       -1.75151376e+00, -1.85685234e+00, -1.71059582e+00, -5.55996800e-03,\n       -4.19179822e-01, -1.70994010e+00, -1.84236546e+00, -4.12463360e-01,\n       -5.17761434e-02, -2.28668994e-01, -1.89438472e+00, -1.88100419e+00,\n       -1.88429650e+00, -1.75227319e+00, -1.81710918e+00, -2.57494891e-01,\n       -1.76854505e+00, -1.50617304e-01, -1.74091616e+00, -1.86595364e+00,\n       -1.75790953e+00, -1.68668436e+00, -1.58489990e+00, -1.78043885e+00,\n       -1.68928263e-01, -7.57135211e-02, -1.58563952e+00, -1.77525814e+00,\n       -5.67112517e-01, -1.77311136e-01, -1.59886698e+00, -2.28577903e-02,\n       -1.65778929e+00, -1.66892907e-01, -1.78439499e+00, -3.44172359e-01,\n       -1.75337275e+00, -2.17261459e-01, -1.71966483e+00, -1.78913909e+00,\n       -1.77605425e+00, -1.70517865e+00, -1.73995186e+00, -5.43916289e-01,\n       -1.87816887e+00, -1.88723114e+00, -1.65240828e+00, -1.39756357e-09,\n       -1.54255904e+00, -1.74675064e+00, -1.88505693e+00, -1.75499812e+00]), 'split6_train_score': array([-1.72113578e+00, -1.77538843e+00, -1.70733835e+00, -1.20300345e-01,\n       -1.79692549e+00, -2.55264532e-01, -1.70497879e+00, -1.86838569e-01,\n       -3.52291213e-01, -1.88015066e+00, -3.94982417e-02, -1.71005143e+00,\n       -1.80002912e+00, -1.68856435e+00, -3.07583149e-01, -1.80428142e+00,\n       -3.73803617e-02, -9.74350299e-02, -4.40632985e-01, -2.42959304e-01,\n       -1.88242020e+00, -6.53260157e-07, -4.47789309e-01, -2.60305063e-01,\n       -7.20282512e-12, -2.55242763e-01, -6.03813490e-02, -2.48536872e-01,\n       -1.85446521e+00, -4.49680764e-01, -3.87392122e-01, -1.64842073e+00,\n       -1.70937589e+00, -5.76911983e-02, -1.80082683e+00, -4.16114430e-02,\n       -1.76259299e+00, -1.55189939e+00, -1.76684589e+00, -1.75713162e+00,\n       -2.43589717e-01, -1.71064022e+00, -1.70424913e+00, -6.85535985e-02,\n       -1.65078396e-01, -1.89849899e-01, -2.15871483e-01, -2.97506405e-01,\n       -1.75513997e+00, -1.86146321e+00, -1.72450153e+00, -4.47916159e-03,\n       -4.30453358e-01, -1.71204764e+00, -1.85014550e+00, -4.41184809e-01,\n       -6.46126095e-02, -2.45387133e-01, -1.88995283e+00, -1.88386877e+00,\n       -1.88352206e+00, -1.75612148e+00, -1.81032558e+00, -2.74887480e-01,\n       -1.77163667e+00, -1.68783460e-01, -1.75512263e+00, -1.86942327e+00,\n       -1.76666327e+00, -1.69889097e+00, -1.60652124e+00, -1.77680882e+00,\n       -1.90472077e-01, -9.26251835e-02, -1.60056808e+00, -1.76784103e+00,\n       -6.21827057e-01, -1.73526297e-01, -1.60015748e+00, -2.46109390e-02,\n       -1.65168667e+00, -1.87137844e-01, -1.78360330e+00, -4.25125015e-01,\n       -1.75765139e+00, -2.29153210e-01, -1.71082880e+00, -1.79459805e+00,\n       -1.77444896e+00, -1.70854080e+00, -1.74335019e+00, -5.91898931e-01,\n       -1.88015066e+00, -1.88579052e+00, -1.65126696e+00, -1.39756357e-09,\n       -1.54255904e+00, -1.75761239e+00, -1.88558740e+00, -1.75780240e+00]), 'split7_train_score': array([-1.70161558e+00, -1.77529267e+00, -1.68402638e+00, -1.02279223e-01,\n       -1.78056223e+00, -2.37085522e-01, -1.70222555e+00, -2.06926044e-01,\n       -3.10761556e-01, -1.87247826e+00, -4.34736311e-02, -1.68474649e+00,\n       -1.80179875e+00, -1.69158252e+00, -2.42152713e-01, -1.80650148e+00,\n       -5.12248109e-02, -1.31373555e-01, -4.24029086e-01, -2.44807702e-01,\n       -1.87445675e+00, -1.79062155e-09, -4.16714056e-01, -2.39973936e-01,\n       -7.19995617e-12, -2.33293342e-01, -5.80008570e-02, -2.26671870e-01,\n       -1.84419045e+00, -4.13483521e-01, -3.57889604e-01, -1.64006806e+00,\n       -1.68678880e+00, -6.27678982e-02, -1.78316354e+00, -4.53006585e-02,\n       -1.76234235e+00, -1.54847331e+00, -1.76510209e+00, -1.73808214e+00,\n       -2.08922127e-01, -1.71919088e+00, -1.70025684e+00, -7.74199150e-02,\n       -1.39930158e-01, -1.84581047e-01, -1.89997203e-01, -2.52754821e-01,\n       -1.73747801e+00, -1.85121541e+00, -1.70446769e+00, -4.48452976e-03,\n       -4.20806976e-01, -1.70942887e+00, -1.84132269e+00, -4.30921332e-01,\n       -7.15263716e-02, -2.30636544e-01, -1.89065671e+00, -1.87296930e+00,\n       -1.88624650e+00, -1.75124498e+00, -1.81126862e+00, -2.47060773e-01,\n       -1.77341188e+00, -1.48608370e-01, -1.73727692e+00, -1.86189525e+00,\n       -1.74277092e+00, -1.67962282e+00, -1.59234472e+00, -1.77340832e+00,\n       -1.82239968e-01, -7.84699065e-02, -1.58870044e+00, -1.76731755e+00,\n       -5.50370637e-01, -1.74573705e-01, -1.61158250e+00, -3.12078792e-02,\n       -1.66662698e+00, -1.82317240e-01, -1.77564834e+00, -3.49920795e-01,\n       -1.73888052e+00, -1.93866637e-01, -1.72282392e+00, -1.77812390e+00,\n       -1.77551786e+00, -1.70863157e+00, -1.74030153e+00, -5.40507264e-01,\n       -1.87247826e+00, -1.88716355e+00, -1.66049120e+00, -1.39705704e-09,\n       -1.54200004e+00, -1.73807539e+00, -1.87779427e+00, -1.75689502e+00]), 'split8_train_score': array([-1.70631808e+00, -1.76628204e+00, -1.69789457e+00, -8.65516552e-02,\n       -1.78800499e+00, -2.23095638e-01, -1.70034699e+00, -1.81260908e-01,\n       -3.11096934e-01, -1.87452399e+00, -3.40543909e-02, -1.69540921e+00,\n       -1.79569943e+00, -1.68828676e+00, -2.69348579e-01, -1.80017505e+00,\n       -3.24959407e-02, -1.01345827e-01, -4.10025796e-01, -2.17302449e-01,\n       -1.87804142e+00, -2.19598527e-09, -4.06250582e-01, -2.43628966e-01,\n       -7.19995617e-12, -2.21512070e-01, -4.71284806e-02, -2.16520529e-01,\n       -1.85157482e+00, -4.49764330e-01, -3.82506024e-01, -1.64144581e+00,\n       -1.69754781e+00, -4.44279736e-02, -1.78786485e+00, -2.82124286e-02,\n       -1.75789231e+00, -1.54823008e+00, -1.76181697e+00, -1.74674355e+00,\n       -2.04194349e-01, -1.72101306e+00, -1.68766381e+00, -6.03271013e-02,\n       -1.53225584e-01, -1.68327377e-01, -1.87400365e-01, -2.65074174e-01,\n       -1.74326516e+00, -1.85710928e+00, -1.71173706e+00, -6.25843003e-03,\n       -4.20848631e-01, -1.70919640e+00, -1.84073232e+00, -4.12820410e-01,\n       -5.93760337e-02, -2.40882578e-01, -1.88777613e+00, -1.87564468e+00,\n       -1.88277660e+00, -1.75416242e+00, -1.80325990e+00, -2.38488787e-01,\n       -1.76318439e+00, -1.56471617e-01, -1.74798895e+00, -1.86264179e+00,\n       -1.74979750e+00, -1.69082717e+00, -1.59158530e+00, -1.77038668e+00,\n       -1.65772772e-01, -9.03806088e-02, -1.59452327e+00, -1.76466733e+00,\n       -6.09684317e-01, -1.52692832e-01, -1.59382578e+00, -2.41670595e-02,\n       -1.65618136e+00, -1.88821923e-01, -1.77131633e+00, -3.14396051e-01,\n       -1.74681619e+00, -1.95641664e-01, -1.71338460e+00, -1.78329999e+00,\n       -1.77228134e+00, -1.69879959e+00, -1.74830860e+00, -5.37742918e-01,\n       -1.87452399e+00, -1.88403699e+00, -1.64976115e+00, -1.39705704e-09,\n       -1.54200004e+00, -1.74873559e+00, -1.88706286e+00, -1.75176862e+00]), 'split9_train_score': array([-1.71184480e+00, -1.76038417e+00, -1.69573204e+00, -1.06666308e-01,\n       -1.79176082e+00, -2.48350190e-01, -1.69664494e+00, -1.97763572e-01,\n       -3.42406157e-01, -1.87721354e+00, -3.70582687e-02, -1.69900930e+00,\n       -1.79519437e+00, -1.68734171e+00, -3.02862078e-01, -1.79588658e+00,\n       -3.75814396e-02, -1.18424583e-01, -4.38240875e-01, -2.41516364e-01,\n       -1.88089871e+00, -2.54137368e-06, -4.38254581e-01, -2.45865003e-01,\n       -7.22227571e-12, -2.59324892e-01, -6.33570293e-02, -2.47423262e-01,\n       -1.85016587e+00, -4.13896536e-01, -3.72014280e-01, -1.64553801e+00,\n       -1.70126429e+00, -5.55005245e-02, -1.79538773e+00, -3.07056287e-02,\n       -1.75535131e+00, -1.54881888e+00, -1.75758422e+00, -1.74684649e+00,\n       -2.10755515e-01, -1.71782336e+00, -1.69617997e+00, -6.22747953e-02,\n       -1.78468231e-01, -1.90971909e-01, -2.09962787e-01, -2.85762364e-01,\n       -1.75353355e+00, -1.85789608e+00, -1.71762045e+00, -3.61312226e-03,\n       -4.37830145e-01, -1.70638722e+00, -1.84125628e+00, -4.33064364e-01,\n       -6.04114995e-02, -2.35063390e-01, -1.88823659e+00, -1.88061878e+00,\n       -1.87913778e+00, -1.75006570e+00, -1.79948064e+00, -2.60238001e-01,\n       -1.76030452e+00, -1.51323017e-01, -1.74734243e+00, -1.86320455e+00,\n       -1.75836603e+00, -1.68489957e+00, -1.59894064e+00, -1.76858352e+00,\n       -1.60002059e-01, -1.07920725e-01, -1.59790274e+00, -1.76919886e+00,\n       -6.23575419e-01, -1.64863501e-01, -1.60359357e+00, -3.30956245e-02,\n       -1.66265182e+00, -1.73182093e-01, -1.77357952e+00, -3.51571007e-01,\n       -1.75399001e+00, -2.30930241e-01, -1.72419722e+00, -1.78873513e+00,\n       -1.77506352e+00, -1.70789905e+00, -1.74567689e+00, -5.63800279e-01,\n       -1.87721354e+00, -1.88039220e+00, -1.65164662e+00, -1.40138990e-09,\n       -1.54231144e+00, -1.75079738e+00, -1.88496793e+00, -1.75859343e+00]), 'mean_train_score': array([-1.71234152e+00, -1.76732952e+00, -1.69383191e+00, -1.07495088e-01,\n       -1.78975519e+00, -2.30389214e-01, -1.70005133e+00, -1.92768015e-01,\n       -3.25015864e-01, -1.87529633e+00, -3.76731297e-02, -1.69582937e+00,\n       -1.79853316e+00, -1.69151500e+00, -2.80968564e-01, -1.80144314e+00,\n       -3.85256716e-02, -1.14690768e-01, -4.23021084e-01, -2.28894486e-01,\n       -1.87850505e+00, -7.23221034e-07, -4.21996153e-01, -2.38198862e-01,\n       -7.19803758e-12, -2.39046650e-01, -5.49408691e-02, -2.26340825e-01,\n       -1.85010851e+00, -4.22611622e-01, -3.72613149e-01, -1.64227130e+00,\n       -1.69640198e+00, -5.73614896e-02, -1.79116223e+00, -3.83989571e-02,\n       -1.75654325e+00, -1.55001939e+00, -1.76256891e+00, -1.74502925e+00,\n       -2.11051803e-01, -1.71673090e+00, -1.69641232e+00, -6.51184487e-02,\n       -1.62480365e-01, -1.78528143e-01, -1.96128231e-01, -2.73400593e-01,\n       -1.74862134e+00, -1.85576466e+00, -1.71545489e+00, -4.95889761e-03,\n       -4.18151696e-01, -1.70668254e+00, -1.84165220e+00, -4.21097545e-01,\n       -5.79391136e-02, -2.32769988e-01, -1.88787683e+00, -1.87795912e+00,\n       -1.88212912e+00, -1.75080771e+00, -1.80612338e+00, -2.54733688e-01,\n       -1.76564867e+00, -1.50497036e-01, -1.74467393e+00, -1.86501390e+00,\n       -1.75449180e+00, -1.68705610e+00, -1.59334809e+00, -1.77038338e+00,\n       -1.69468608e-01, -8.70545441e-02, -1.59381517e+00, -1.76633673e+00,\n       -5.90776080e-01, -1.60260527e-01, -1.60075053e+00, -2.77727412e-02,\n       -1.65735733e+00, -1.72418077e-01, -1.77633603e+00, -3.44544480e-01,\n       -1.75023595e+00, -2.09446416e-01, -1.71650466e+00, -1.78586261e+00,\n       -1.77381513e+00, -1.70804285e+00, -1.74550624e+00, -5.61455172e-01,\n       -1.87529633e+00, -1.88398215e+00, -1.65463548e+00, -1.39666316e-09,\n       -1.54104330e+00, -1.74676819e+00, -1.88344336e+00, -1.75625616e+00]), 'std_train_score': array([1.00478585e-02, 7.49116759e-03, 7.90063668e-03, 1.59097003e-02,\n       6.45438460e-03, 1.41056477e-02, 6.06662332e-03, 9.30840736e-03,\n       1.42048719e-02, 3.79690679e-03, 6.07275620e-03, 8.40666974e-03,\n       6.87629750e-03, 8.84325716e-03, 2.18011487e-02, 5.79868617e-03,\n       6.70347329e-03, 1.27603204e-02, 1.48005777e-02, 1.45154295e-02,\n       4.09354598e-03, 9.40405005e-07, 1.65286806e-02, 1.37623216e-02,\n       1.22036483e-14, 1.44412121e-02, 7.06022709e-03, 1.36888759e-02,\n       3.40941730e-03, 2.14419803e-02, 1.58410487e-02, 8.23965148e-03,\n       8.38358869e-03, 7.67486055e-03, 6.69539460e-03, 5.52702663e-03,\n       7.66168465e-03, 2.62730623e-03, 5.78440636e-03, 6.27628732e-03,\n       1.47354523e-02, 8.07356311e-03, 7.40126620e-03, 6.97782519e-03,\n       1.45314563e-02, 1.19856386e-02, 1.20813372e-02, 1.79376495e-02,\n       7.05133762e-03, 3.58267254e-03, 9.96625222e-03, 9.65530639e-04,\n       1.56550422e-02, 8.32153030e-03, 4.82000867e-03, 1.47335226e-02,\n       7.66546163e-03, 1.70208602e-02, 4.30076695e-03, 4.40629937e-03,\n       4.53259896e-03, 4.78690757e-03, 7.10338579e-03, 1.03878240e-02,\n       6.93096205e-03, 1.15113638e-02, 6.25029790e-03, 3.13141433e-03,\n       7.69764527e-03, 6.02012132e-03, 6.67872088e-03, 7.33176475e-03,\n       1.23685758e-02, 1.49373572e-02, 5.59880618e-03, 6.05679286e-03,\n       2.73149522e-02, 1.13567857e-02, 5.89876819e-03, 4.04327963e-03,\n       7.81908857e-03, 1.36870231e-02, 6.86194133e-03, 3.64367459e-02,\n       7.74827756e-03, 1.44104963e-02, 6.71951125e-03, 5.44320009e-03,\n       8.00551632e-03, 7.69327517e-03, 4.00668175e-03, 1.94249647e-02,\n       3.79690679e-03, 4.47053687e-03, 6.43674816e-03, 2.37183349e-12,\n       1.96125869e-03, 6.75004294e-03, 3.57971402e-03, 6.55653523e-03])}"}, {"dataset_variant": "only_binary", "experiment_setup": {"dataset_variants": ["complete", "only_binary", "only_totals"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "regressor": "[GradientBoostingRegressor(criterion = 'mse')]", "floor_labels": "True", "params": [{"reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler()]", "regressor__learning_rate": "[0.1, 1e-3]", "regressor__n_estimators": "[100, 200, 250]", "regressor__max_depth": "[5, 10, 15]", "regressor__min_samples_split": "[2, 8, 16]", "regressor__min_samples_leaf": "[1, 8, 16]"}], "metrics": "['neg_root_mean_squared_error']", "binarize": "False", "n_split_outer_kcv": 10, "hp_optimizer": "bayes"}, "best_params": "{'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}", "mean_test_score": -1.5720644808056776, "cv_results": "{'mean_fit_time': array([0.51800222, 0.75671253, 0.53120978, 0.32191412, 0.42690871,\n       0.4008153 , 0.30470238, 0.49780827, 0.15099988, 0.92561069,\n       0.40511029, 0.28771231, 0.1801995 , 0.27891092, 0.36450684,\n       0.33250096, 0.47170794, 0.09499993, 0.33951218, 0.15689905,\n       0.33871253, 0.32640164, 0.12009757, 0.68360646, 0.13560076,\n       0.62741647, 0.16119914, 0.21230009, 0.0858001 , 0.59340208,\n       0.29489996, 0.17489984, 0.24709964, 0.24050066, 0.49691455,\n       0.42650633, 0.39860797, 0.33461854, 0.5504014 , 0.865504  ,\n       0.97000587, 0.20839801, 0.26980097, 0.27440155, 0.38411131,\n       0.43361197, 0.53561814, 0.39831028, 0.21189981, 0.81710761,\n       0.35940728, 0.58921897, 0.44311662, 0.08709989, 0.41521204,\n       0.48461478, 0.30880201, 0.21069779, 0.51861398, 1.02270596,\n       0.3382122 , 0.77961321, 0.25799713, 0.24009802, 0.2106981 ,\n       0.3075026 , 0.46350768, 0.21060042, 1.04740717, 0.79970436,\n       0.47880552, 0.23789897, 0.59760168, 0.5511189 , 0.5092077 ,\n       0.29290686, 0.20449979, 0.47371819, 0.08119996, 0.43811069,\n       0.24209974, 0.19959934, 0.36630614, 0.28141861, 0.21179943,\n       0.28320198, 0.29179995, 0.54100842, 0.11070035, 0.42961121,\n       0.30110033, 0.52469666, 0.73281026, 0.61141009, 0.22089732,\n       0.34620764, 0.52491426, 0.13749967, 0.87201791, 0.63601854]), 'std_fit_time': array([0.04809412, 0.02559823, 0.03636965, 0.00456648, 0.02246057,\n       0.019506  , 0.03302688, 0.01244762, 0.00394885, 0.03777863,\n       0.01868453, 0.00736216, 0.00844787, 0.00454023, 0.02183469,\n       0.02614542, 0.00875948, 0.00089431, 0.0042663 , 0.01994283,\n       0.00771918, 0.0093057 , 0.00476326, 0.01885672, 0.03272254,\n       0.01194328, 0.00188687, 0.00537549, 0.0007492 , 0.0292551 ,\n       0.02373855, 0.00706136, 0.01494502, 0.0284971 , 0.03412157,\n       0.03211822, 0.00431219, 0.00828482, 0.02466079, 0.03369314,\n       0.03680896, 0.01242726, 0.00911164, 0.00703178, 0.032576  ,\n       0.03795878, 0.00743216, 0.00900149, 0.01878702, 0.03386474,\n       0.00846406, 0.01348226, 0.01832106, 0.00053848, 0.00950509,\n       0.01959723, 0.03151705, 0.00748377, 0.00968942, 0.04282682,\n       0.01214134, 0.02483521, 0.02933892, 0.00662448, 0.0048585 ,\n       0.00480038, 0.02336199, 0.01931   , 0.05381635, 0.06253274,\n       0.0123364 , 0.00812975, 0.02297453, 0.01756445, 0.01884685,\n       0.02688982, 0.01402973, 0.01948909, 0.0034292 , 0.00492415,\n       0.02970642, 0.04278894, 0.01739189, 0.00377337, 0.01386687,\n       0.00673346, 0.02073684, 0.01815122, 0.00576297, 0.0182808 ,\n       0.00584288, 0.03725951, 0.02396364, 0.02328001, 0.02463022,\n       0.01872067, 0.00403633, 0.00191103, 0.03640865, 0.01328188]), 'mean_score_time': array([0.00130239, 0.00130122, 0.00170119, 0.00110078, 0.0015008 ,\n       0.00129991, 0.00130265, 0.00120163, 0.00110106, 0.00190024,\n       0.00120056, 0.00140049, 0.00100093, 0.0010987 , 0.00100071,\n       0.00120249, 0.00130169, 0.00080025, 0.0016005 , 0.00180216,\n       0.00130036, 0.0015002 , 0.001     , 0.00150185, 0.00129905,\n       0.00189786, 0.00150011, 0.00140092, 0.00099964, 0.00150292,\n       0.00130033, 0.00120027, 0.00129995, 0.00130177, 0.00150044,\n       0.0012017 , 0.00120163, 0.00149984, 0.00100274, 0.00200367,\n       0.00200167, 0.00140038, 0.00179753, 0.00120063, 0.00110047,\n       0.0014003 , 0.0012002 , 0.00120072, 0.00110085, 0.00140207,\n       0.00130069, 0.00130086, 0.00130055, 0.00100024, 0.00110199,\n       0.00129867, 0.00120063, 0.00110178, 0.00140107, 0.00190227,\n       0.0011008 , 0.00230174, 0.0012013 , 0.00100102, 0.00100164,\n       0.0013005 , 0.00120103, 0.00100219, 0.00210128, 0.00169978,\n       0.00130203, 0.00120018, 0.00160296, 0.00120015, 0.00130191,\n       0.00100138, 0.00110197, 0.00200024, 0.00110009, 0.00130091,\n       0.00100088, 0.00120151, 0.00150177, 0.00120032, 0.00090179,\n       0.00170016, 0.00140021, 0.00140069, 0.00120039, 0.00120275,\n       0.00150106, 0.00150392, 0.0018008 , 0.00150173, 0.001402  ,\n       0.00110095, 0.00160155, 0.00120013, 0.00180016, 0.00150008]), 'std_score_time': array([6.39554336e-04, 4.57472051e-04, 4.58202078e-04, 2.99774631e-04,\n       4.99726648e-04, 4.58381080e-04, 4.57992857e-04, 3.99533501e-04,\n       2.99837290e-04, 2.99948611e-04, 3.99828885e-04, 4.89571899e-04,\n       1.03265800e-06, 3.00742883e-04, 9.29832458e-07, 3.99163048e-04,\n       4.58514287e-04, 4.00129517e-04, 4.89590262e-04, 6.00883699e-04,\n       4.57513356e-04, 5.00417187e-04, 5.64704861e-07, 5.00777482e-04,\n       4.59368275e-04, 2.99298472e-04, 4.99939957e-04, 4.91074938e-04,\n       6.46813391e-07, 5.00228521e-04, 4.58360050e-04, 5.99520544e-04,\n       4.57934112e-04, 4.58049437e-04, 4.99846300e-04, 3.99138409e-04,\n       3.99234442e-04, 4.99964463e-04, 1.31368421e-06, 4.47114073e-04,\n       1.72651930e-06, 4.90302764e-04, 3.99088961e-04, 4.00270199e-04,\n       2.99796495e-04, 4.90066963e-04, 4.00126217e-04, 3.99688888e-04,\n       2.99750986e-04, 4.89942906e-04, 4.58075413e-04, 4.59477868e-04,\n       4.59052317e-04, 4.40268166e-07, 2.99537881e-04, 4.58897748e-04,\n       3.99852990e-04, 2.99363571e-04, 4.90079434e-04, 3.00310211e-04,\n       2.99930998e-04, 4.61001331e-04, 3.98746862e-04, 1.62824355e-06,\n       1.75136258e-06, 4.59348623e-04, 3.99711848e-04, 6.33516345e-06,\n       3.00775507e-04, 4.58369341e-04, 4.57723505e-04, 4.00019719e-04,\n       4.90137040e-04, 3.99911598e-04, 4.57853594e-04, 1.85124005e-06,\n       3.01685962e-04, 5.24520874e-07, 3.00320175e-04, 4.57779320e-04,\n       1.68249881e-06, 3.99117277e-04, 4.99853276e-04, 4.00365030e-04,\n       3.00605671e-04, 4.58048183e-04, 4.89804537e-04, 4.90196373e-04,\n       4.00209668e-04, 3.99157378e-04, 5.00327946e-04, 5.00754288e-04,\n       4.00319469e-04, 4.99083839e-04, 4.89369512e-04, 3.00035815e-04,\n       4.91570027e-04, 4.00043060e-04, 4.00114400e-04, 5.00202461e-04]), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__n_estimators': masked_array(data=[250, 250, 250, 200, 200, 200, 100, 250, 100, 200, 250,\n                   200, 100, 250, 250, 100, 200, 100, 250, 100, 200, 200,\n                   100, 200, 100, 200, 200, 250, 100, 250, 250, 100, 200,\n                   100, 200, 200, 250, 200, 250, 250, 200, 100, 200, 250,\n                   250, 250, 200, 200, 200, 250, 250, 250, 200, 100, 200,\n                   250, 250, 100, 200, 200, 200, 250, 100, 100, 100, 250,\n                   250, 200, 250, 250, 200, 200, 200, 200, 200, 100, 100,\n                   200, 100, 250, 100, 100, 200, 200, 100, 250, 250, 200,\n                   100, 250, 250, 200, 250, 250, 100, 200, 200, 100, 200,\n                   250],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_split': masked_array(data=[16, 16, 2, 8, 16, 8, 2, 2, 8, 16, 8, 8, 8, 8, 8, 16, 2,\n                   16, 16, 8, 8, 8, 16, 2, 2, 2, 2, 8, 16, 16, 2, 8, 8, 8,\n                   2, 8, 16, 16, 2, 16, 8, 16, 8, 8, 8, 16, 16, 8, 2, 16,\n                   2, 8, 2, 16, 8, 8, 8, 2, 16, 8, 8, 2, 16, 2, 8, 2, 2,\n                   2, 16, 16, 8, 16, 2, 8, 16, 8, 2, 2, 2, 16, 8, 16, 8,\n                   2, 8, 16, 8, 8, 16, 2, 16, 2, 8, 16, 2, 16, 8, 8, 16,\n                   16],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_leaf': masked_array(data=[16, 16, 1, 1, 16, 8, 1, 16, 16, 1, 16, 16, 16, 16, 16,\n                   1, 16, 16, 16, 1, 8, 8, 1, 8, 8, 1, 16, 8, 16, 1, 8, 1,\n                   16, 8, 16, 16, 8, 8, 16, 8, 1, 1, 1, 16, 16, 1, 8, 8,\n                   8, 1, 16, 8, 16, 1, 16, 8, 8, 8, 8, 1, 16, 1, 1, 8, 16,\n                   1, 8, 8, 1, 1, 16, 16, 8, 8, 1, 1, 16, 1, 16, 1, 8, 1,\n                   8, 1, 16, 8, 16, 16, 8, 8, 16, 16, 8, 16, 8, 16, 1, 8,\n                   1, 16],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__max_depth': masked_array(data=[10, 10, 5, 5, 10, 10, 10, 15, 15, 15, 5, 10, 5, 15, 10,\n                   15, 5, 15, 5, 10, 5, 10, 15, 10, 5, 10, 10, 5, 5, 15,\n                   15, 5, 10, 10, 5, 10, 5, 5, 10, 15, 15, 10, 15, 15, 15,\n                   5, 10, 5, 5, 10, 5, 5, 5, 5, 15, 5, 5, 15, 5, 15, 5,\n                   10, 5, 5, 5, 5, 10, 10, 15, 15, 5, 5, 10, 15, 10, 5,\n                   15, 10, 5, 5, 10, 5, 5, 5, 15, 10, 15, 10, 5, 5, 10,\n                   10, 15, 10, 15, 10, 5, 5, 15, 10],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__learning_rate': masked_array(data=[0.001, 0.1, 0.1, 0.001, 0.001, 0.001, 0.1, 0.001, 0.1,\n                   0.1, 0.001, 0.1, 0.001, 0.001, 0.001, 0.001, 0.1,\n                   0.001, 0.1, 0.1, 0.1, 0.1, 0.001, 0.1, 0.1, 0.001, 0.1,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.1, 0.1, 0.1,\n                   0.001, 0.001, 0.1, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.1, 0.1, 0.001, 0.001, 0.1, 0.001, 0.1, 0.1, 0.001,\n                   0.1, 0.1, 0.1, 0.001, 0.1, 0.001, 0.001, 0.1, 0.001,\n                   0.1, 0.1, 0.1, 0.001, 0.001, 0.001, 0.1, 0.1, 0.1,\n                   0.001, 0.001, 0.001, 0.1, 0.001, 0.001, 0.1, 0.1, 0.1,\n                   0.1, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1, 0.001, 0.1, 0.1,\n                   0.1, 0.1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[16, 19, 12, 9, 18, 12, 10, 17, 7, 17, 12, 6, 14, 6, 9,\n                   17, 19, 4, 8, 2, 10, 5, 3, 16, 4, 13, 1, 2, 3, 11, 4,\n                   10, 4, 9, 19, 17, 10, 10, 18, 14, 17, 6, 1, 3, 10, 10,\n                   19, 14, 3, 18, 10, 18, 17, 2, 18, 13, 5, 13, 19, 18,\n                   13, 11, 16, 17, 18, 5, 10, 3, 15, 17, 19, 6, 13, 19,\n                   13, 19, 11, 7, 2, 11, 15, 10, 11, 7, 17, 2, 3, 16, 4,\n                   11, 4, 15, 11, 14, 7, 13, 18, 7, 16, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 9, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 12, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 9, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 8, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 9, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 6, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 19, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 17, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 4, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 11, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 14, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 13, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 18, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 7, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 16, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}], 'split0_test_score': array([-1.824972  , -1.53925507, -1.88084571, -1.87637865, -1.85610748,\n       -1.84978183, -1.97274966, -1.82087269, -1.56411111, -1.81647052,\n       -1.85963276, -1.77200425, -1.93530309, -1.86698134, -1.82550167,\n       -1.95944015, -1.6619231 , -1.95777335, -1.60453794, -1.93232769,\n       -1.64420705, -1.66545515, -1.94524598, -1.67219421, -1.65015191,\n       -1.96759381, -1.69939195, -1.84862336, -1.94818278, -1.87274019,\n       -1.88104221, -1.94449071, -1.68170809, -1.70738149, -1.49337204,\n       -1.8934997 , -1.85269123, -1.72007037, -1.86620054, -1.69043939,\n       -1.93108548, -1.8087325 , -1.82761493, -1.74464444, -1.82347438,\n       -1.84777475, -1.86061569, -1.86331789, -1.87387409, -1.89138525,\n       -1.86275103, -1.87585085, -1.56040122, -1.72208649, -1.85610748,\n       -1.85231172, -1.65816738, -1.9331786 , -1.70885697, -1.82632085,\n       -1.85978494, -1.85277651, -1.78766702, -1.56127222, -1.96128663,\n       -1.65955914, -1.84643397, -1.86224893, -1.91889052, -1.92109712,\n       -1.6619231 , -1.63714058, -1.5452956 , -1.91187351, -1.91030672,\n       -1.94416319, -1.54393415, -1.82598186, -1.6447915 , -1.86132782,\n       -1.93335621, -1.95456231, -1.67543001, -1.90096346, -1.93537789,\n       -1.7850629 , -1.59801539, -1.50990471, -1.6231004 , -1.83326999,\n       -1.73313716, -1.59508581, -1.6734384 , -1.58062753, -1.67104914,\n       -1.89877648, -1.71890226, -1.63567696, -1.90033429, -1.66895113]), 'split1_test_score': array([-1.78199394, -1.56758706, -1.33294307, -1.81597441, -1.81261513,\n       -1.7939967 , -1.6100335 , -1.7813431 , -1.32252766, -1.39859063,\n       -1.78231976, -1.49695977, -1.89784799, -1.7490273 , -1.76553826,\n       -1.90095744, -1.46037201, -1.88537378, -1.61203419, -1.34169176,\n       -1.46963619, -1.32759256, -1.89670319, -1.61556575, -1.30184689,\n       -1.84015696, -1.77324389, -1.74678489, -1.88094357, -1.79059296,\n       -1.73404411, -1.8990242 , -1.33931502, -1.51739225, -1.48249297,\n       -1.81093127, -1.72890647, -1.47494325, -1.77944791, -1.49885946,\n       -1.55139177, -1.22510224, -1.4510647 , -1.40462194, -1.76392467,\n       -1.73251549, -1.80877335, -1.81545479, -1.79399053, -1.7910627 ,\n       -1.74711153, -1.75259033, -1.45244262, -1.24449329, -1.81261513,\n       -1.7536669 , -1.4298828 , -1.88496326, -1.5124493 , -1.4803972 ,\n       -1.81339102, -1.64398502, -1.38191646, -1.39750073, -1.89033543,\n       -1.23449649, -1.73941131, -1.77732234, -1.44253939, -1.73725242,\n       -1.45768724, -1.3763811 , -1.45585922, -1.80733734, -1.81911917,\n       -1.90027402, -1.46032569, -1.50732925, -1.35563751, -1.74881336,\n       -1.88392996, -1.878349  , -1.35968425, -1.81116985, -1.90077772,\n       -1.56014184, -1.44185054, -1.48467164, -1.42762666, -1.78070027,\n       -1.46771376, -1.44739842, -1.46353685, -1.53886434, -1.48441963,\n       -1.82970921, -1.36138156, -1.36266568, -1.45214352, -1.62477867]), 'split2_test_score': array([-1.85636033, -1.73721945, -1.71572571, -1.88361199, -1.87563524,\n       -1.89175535, -2.29686647, -1.84841936, -1.84648837, -1.59564152,\n       -1.85317658, -1.79347414, -1.92150151, -1.86073415, -1.86103583,\n       -1.91686622, -1.7576274 , -1.92531378, -1.84095232, -1.78067462,\n       -1.65197455, -1.86562215, -1.90487951, -1.68268664, -1.75284977,\n       -1.92503822, -1.75351114, -1.89815483, -1.92383599, -1.85686574,\n       -1.85883294, -1.92036568, -1.89278619, -1.68903335, -1.71546581,\n       -1.88266345, -1.86374564, -1.74439232, -1.86773895, -1.74081894,\n       -1.79035256, -1.93238798, -1.84913792, -1.77918125, -1.86863971,\n       -1.86803938, -1.8747445 , -1.8907642 , -1.90894408, -1.83511205,\n       -1.85566795, -1.85843015, -1.69253789, -1.88581644, -1.87563524,\n       -1.86607258, -1.83472812, -1.92734285, -1.60469458, -1.55178379,\n       -1.89339175, -2.26950989, -1.6279402 , -1.55517411, -1.92113679,\n       -1.77349454, -1.85405458, -1.90697204, -1.69962795, -1.84375714,\n       -1.7576274 , -1.86552339, -1.78917464, -1.8686931 , -1.89844346,\n       -1.90654816, -1.77260717, -1.97240161, -1.69679524, -1.86784151,\n       -1.92346237, -1.9231814 , -1.73226336, -1.91389438, -1.91280849,\n       -1.79985353, -1.88150498, -1.73814161, -1.70840924, -1.88342804,\n       -1.67568801, -1.73451949, -1.80038625, -1.72479751, -1.82099416,\n       -1.87147468, -1.62961949, -1.6983099 , -1.5574333 , -1.77079478]), 'split3_test_score': array([-1.88183734, -2.05845655, -1.97150222, -1.90059256, -1.90386404,\n       -1.93994275, -2.40232137, -1.8765692 , -2.19028992, -2.00211855,\n       -1.92408339, -2.15229054, -1.96350128, -1.94484658, -1.88135782,\n       -1.9684655 , -2.09974687, -1.97420265, -2.09549075, -1.98937877,\n       -2.14518823, -2.07748326, -1.94542642, -2.07776052, -1.98818098,\n       -1.94698877, -2.00310392, -1.89171845, -1.97391551, -1.89555236,\n       -1.90616368, -1.95332338, -1.99028022, -2.11893716, -2.05005431,\n       -1.93916424, -1.89999813, -2.09745551, -1.93393868, -2.02540319,\n       -2.07940835, -2.03920504, -1.88303559, -2.04671165, -1.88373637,\n       -1.91067246, -1.91973491, -1.92056073, -1.90624183, -1.91487077,\n       -1.92146204, -1.91508028, -2.10396062, -1.8050195 , -1.90386404,\n       -1.89538966, -2.13661433, -1.96393348, -2.02341598, -2.21169178,\n       -1.91022367, -2.38255684, -2.03864517, -2.05827984, -1.96533524,\n       -2.18119829, -1.87380395, -1.91892218, -2.08538219, -1.95083032,\n       -2.09974687, -2.1201678 , -1.98140594, -1.91332443, -1.92901879,\n       -1.95670947, -2.14086066, -2.32846759, -1.96041311, -1.91099056,\n       -1.96260367, -1.95233456, -2.12771121, -1.90203618, -1.95775665,\n       -2.04082547, -1.90799946, -2.12579137, -2.06632263, -1.90492597,\n       -2.10350016, -2.06706506, -2.02980511, -2.10007472, -2.06214278,\n       -1.9380439 , -2.01085767, -1.97130859, -2.05963403, -2.10872634]), 'split4_test_score': array([-1.83261585, -1.63651859, -1.70184684, -1.84566528, -1.85134608,\n       -1.8611313 , -1.62387189, -1.8286029 , -1.59835482, -1.64131486,\n       -1.76015547, -1.55158966, -1.90237641, -1.75554389, -1.83003787,\n       -1.8968305 , -1.61677154, -1.87817572, -1.8094871 , -1.35951773,\n       -1.70086452, -1.55824475, -1.87472557, -1.72217658, -1.42571904,\n       -1.83825114, -1.50428995, -1.7813277 , -1.88115944, -1.73969882,\n       -1.79573095, -1.89823068, -1.63407942, -1.667153  , -1.57862123,\n       -1.81605276, -1.73050309, -1.50744966, -1.7889223 , -1.66973642,\n       -1.78670958, -1.50730818, -1.47948117, -1.48607395, -1.83299712,\n       -1.72944553, -1.88307118, -1.86995901, -1.81262722, -1.85043179,\n       -1.75542477, -1.75210693, -1.55601612, -1.23581598, -1.85134608,\n       -1.72753113, -1.45993552, -1.9028732 , -1.66553679, -1.69030434,\n       -1.85482709, -1.84267453, -1.42233507, -1.56243907, -1.88097665,\n       -1.37724525, -1.74028853, -1.8028039 , -1.64259051, -1.8014593 ,\n       -1.64001107, -1.68692372, -1.57991259, -1.79375393, -1.84380265,\n       -1.90507858, -1.57288238, -1.57666873, -1.31866472, -1.73348108,\n       -1.91422808, -1.85461532, -1.67936273, -1.86696225, -1.90187802,\n       -1.25435366, -1.56329767, -1.55005985, -1.44151217, -1.84857734,\n       -1.45852381, -1.63738456, -1.56020274, -1.60112992, -1.63729459,\n       -1.79147019, -1.50523758, -1.55858415, -1.67929637, -1.58255363]), 'split5_test_score': array([-1.7734282 , -1.66970582, -1.70103475, -1.81169448, -1.80548682,\n       -1.84179949, -1.71451064, -1.77372897, -1.64017397, -1.63025645,\n       -1.77415159, -1.65472476, -1.87941481, -1.78329076, -1.78485319,\n       -1.89945585, -1.48465541, -1.88534579, -1.7235736 , -1.67540351,\n       -1.61253442, -1.66827314, -1.87948999, -1.58593239, -1.56001283,\n       -1.87402854, -1.66368899, -1.75614695, -1.88179256, -1.80838239,\n       -1.80842247, -1.87748607, -1.6708452 , -1.6495391 , -1.72029023,\n       -1.80839872, -1.79023958, -1.67759147, -1.79217663, -1.64472202,\n       -1.68251474, -1.61429335, -1.53052588, -1.56882776, -1.78191659,\n       -1.77558306, -1.7920485 , -1.81099335, -1.78656336, -1.81831962,\n       -1.77293822, -1.81200885, -1.68175835, -1.49935203, -1.80548682,\n       -1.79074493, -1.68150606, -1.89362026, -1.58634243, -1.67958625,\n       -1.8048273 , -1.70323293, -1.63391085, -1.66439587, -1.88493066,\n       -1.73105675, -1.80322778, -1.82600867, -1.58905582, -1.80688168,\n       -1.46203935, -1.55304683, -1.64298479, -1.85002401, -1.83872457,\n       -1.87605323, -1.63482932, -1.70610828, -1.53231876, -1.77773843,\n       -1.88935841, -1.87417662, -1.55434419, -1.78946498, -1.87726707,\n       -1.58464347, -1.54247501, -1.68242972, -1.62765789, -1.77328324,\n       -1.74116477, -1.56932573, -1.6396602 , -1.66606625, -1.66704894,\n       -1.8123881 , -1.68853293, -1.61216861, -1.64028868, -1.64478983]), 'split6_test_score': array([-1.78599483, -1.36173279, -1.38371118, -1.81806166, -1.81389832,\n       -1.8003666 , -1.71641413, -1.78517481, -1.53636182, -1.54602138,\n       -1.82042704, -1.53238339, -1.88165277, -1.83288437, -1.78319676,\n       -1.88179433, -1.41302053, -1.90361352, -1.45620949, -1.38763923,\n       -1.3759736 , -1.45061477, -1.908314  , -1.3949553 , -1.35363156,\n       -1.77476755, -1.47275824, -1.79368344, -1.89780729, -1.82873016,\n       -1.82741708, -1.89507821, -1.44252494, -1.38715729, -1.45214418,\n       -1.83552752, -1.83169772, -1.38244569, -1.8118977 , -1.42134893,\n       -1.45440964, -1.38636458, -1.4120173 , -1.57684801, -1.78319676,\n       -1.84550073, -1.7880564 , -1.8117474 , -1.82158743, -1.7917808 ,\n       -1.82482592, -1.81396315, -1.41360507, -1.35544601, -1.81389832,\n       -1.8284995 , -1.56081818, -1.87489469, -1.44196717, -1.68284716,\n       -1.81437446, -1.79173115, -1.45738373, -1.44562739, -1.89348224,\n       -1.46805266, -1.82171923, -1.80636246, -1.50170708, -1.79171774,\n       -1.41211956, -1.48651503, -1.49540456, -1.82878526, -1.82723118,\n       -1.88565756, -1.44978362, -1.8437639 , -1.57473466, -1.84583845,\n       -1.87509846, -1.90631882, -1.30094735, -1.77725757, -1.88022452,\n       -1.59243737, -1.38945293, -1.35725966, -1.60427146, -1.77054965,\n       -1.64577975, -1.45798304, -1.53425303, -1.40360645, -1.42614415,\n       -1.83726753, -1.41757792, -1.39924986, -1.5818992 , -1.38270193]), 'split7_test_score': array([-1.84601686, -1.7805035 , -1.77998657, -1.91766158, -1.86754643,\n       -1.87099035, -2.21431767, -1.84901441, -1.91020471, -1.81889512,\n       -1.88649963, -1.92118455, -1.90849368, -1.88217388, -1.82865247,\n       -1.90836216, -1.85024081, -1.92479113, -1.94570219, -1.93407112,\n       -1.94234726, -1.79889685, -1.92739205, -1.79024624, -1.84903598,\n       -1.86357681, -2.35467938, -1.85900912, -1.92692986, -1.87612998,\n       -1.88945586, -1.93687833, -1.92136316, -1.95890342, -1.76768058,\n       -1.88544885, -1.88869686, -1.84062572, -1.87063171, -1.91596041,\n       -1.91923774, -1.92031198, -1.92434861, -1.98144038, -1.82865247,\n       -1.88392244, -1.85573184, -1.88798123, -1.8721581 , -1.83923952,\n       -1.88657443, -1.87576393, -1.73845573, -1.88464927, -1.86754643,\n       -1.88943856, -1.90217735, -1.92696976, -1.95257334, -1.9040211 ,\n       -1.86372825, -2.2129727 , -1.79292512, -1.82100444, -1.92532989,\n       -1.77386476, -1.87845451, -1.87590967, -1.94340783, -1.88241146,\n       -1.85024081, -1.83399072, -1.87652383, -1.88340842, -1.87371542,\n       -1.92513621, -1.80229981, -2.31666978, -1.88552955, -1.88225697,\n       -1.91892035, -1.92353842, -1.89316678, -1.9173528 , -1.91285606,\n       -2.03983459, -1.97467166, -1.79119359, -1.91584656, -1.88023666,\n       -1.87250858, -1.81114618, -1.80995907, -1.7862637 , -1.87477651,\n       -1.89340689, -1.80463228, -1.88376317, -1.90223341, -1.81268319]), 'split8_test_score': array([-1.79175795, -1.6823831 , -1.49997662, -1.85130486, -1.82156454,\n       -1.83079382, -1.9714303 , -1.79153514, -1.69008775, -1.47868046,\n       -1.83479348, -1.68929377, -1.88956683, -1.80478407, -1.7979911 ,\n       -1.87632152, -1.73633163, -1.89075101, -1.67166908, -1.85044778,\n       -1.65331309, -1.76340086, -1.86787298, -1.63564947, -1.75346782,\n       -1.78342322, -2.04873996, -1.80842697, -1.89207865, -1.82075081,\n       -1.75637081, -1.89795295, -1.79635676, -1.59888411, -1.66697609,\n       -1.85480918, -1.79474347, -1.57568816, -1.82727602, -1.66813686,\n       -1.57923882, -1.60584887, -1.88391142, -1.72950416, -1.7931045 ,\n       -1.80245685, -1.81787244, -1.81535777, -1.8472068 , -1.78047357,\n       -1.83567745, -1.81557245, -1.63031103, -1.63487921, -1.82156454,\n       -1.80017781, -1.61813622, -1.89073281, -1.68346815, -1.59778902,\n       -1.8217675 , -1.92713601, -1.58977815, -1.61889484, -1.91008438,\n       -1.58358098, -1.8018299 , -1.83731673, -1.5719765 , -1.81390769,\n       -1.73633163, -1.63141132, -1.65918317, -1.82313934, -1.82187388,\n       -1.88980907, -1.59427424, -1.92556141, -1.6014723 , -1.80245685,\n       -1.89030784, -1.88881344, -1.63899899, -1.85387316, -1.88937546,\n       -1.65801943, -1.75443944, -1.61703852, -1.57473427, -1.79963353,\n       -1.70749575, -1.63922879, -1.56436156, -1.6677021 , -1.72726273,\n       -1.85843577, -1.56865951, -1.59419425, -1.48255425, -1.67441101]), 'split9_test_score': array([-1.78794713, -1.51707007, -1.4074649 , -1.86982137, -1.82059111,\n       -1.85076595, -2.04215555, -1.78624586, -1.43666297, -1.51211718,\n       -1.85932312, -1.57782324, -1.8920745 , -1.8507522 , -1.80605882,\n       -1.90582287, -1.54165885, -1.90675866, -1.49939013, -1.71048245,\n       -1.51950793, -1.55782068, -1.91570786, -1.54039741, -1.57948198,\n       -1.86703346, -1.84722367, -1.82913895, -1.9107533 , -1.82747324,\n       -1.82248197, -1.91479029, -1.69203092, -1.48948765, -1.54058821,\n       -1.88291746, -1.84371218, -1.63447824, -1.86188392, -1.52078402,\n       -1.57168542, -1.43915994, -1.78946936, -1.49838605, -1.8071542 ,\n       -1.86580805, -1.84703683, -1.84435481, -1.85373826, -1.8041618 ,\n       -1.86448198, -1.84249329, -1.436152  , -1.45308659, -1.82059113,\n       -1.83536317, -1.74680317, -1.906948  , -1.61430481, -1.67352855,\n       -1.81978934, -2.0289829 , -1.5081393 , -1.49785203, -1.93076817,\n       -1.63717592, -1.84453711, -1.83861599, -1.46379111, -1.84072181,\n       -1.45932876, -1.68262862, -1.49535487, -1.86594477, -1.85444194,\n       -1.91383731, -1.49721348, -1.94967627, -1.53127674, -1.86564746,\n       -1.90286884, -1.91465705, -1.51478903, -1.86706376, -1.89242955,\n       -1.54862544, -1.71945766, -1.47067776, -1.66331148, -1.81567969,\n       -1.53210333, -1.52907775, -1.58081523, -1.48977042, -1.53179079,\n       -1.88130393, -1.46795706, -1.49791194, -1.57820815, -1.46735434]), 'mean_test_score': array([-1.81629244, -1.6550432 , -1.63750376, -1.85907668, -1.84286552,\n       -1.85313241, -1.95646712, -1.81415065, -1.67352631, -1.64401067,\n       -1.83545628, -1.71417281, -1.90717329, -1.83310185, -1.81642238,\n       -1.91143166, -1.66223481, -1.91320994, -1.72590468, -1.69616346,\n       -1.67155468, -1.67334042, -1.90657575, -1.67175645, -1.62143788,\n       -1.86808585, -1.81206311, -1.82130147, -1.9117399 , -1.83169167,\n       -1.82799621, -1.91376205, -1.70612899, -1.67838688, -1.64676857,\n       -1.86094131, -1.82249344, -1.66551404, -1.84001144, -1.67962096,\n       -1.73460341, -1.64787147, -1.70306069, -1.68162396, -1.81667968,\n       -1.82617188, -1.84476856, -1.85304912, -1.84769317, -1.83168379,\n       -1.83269153, -1.83138602, -1.62656407, -1.57206448, -1.84286552,\n       -1.8239196 , -1.70287691, -1.91054569, -1.67936095, -1.729827  ,\n       -1.84561053, -1.96555585, -1.62406411, -1.61824405, -1.91636661,\n       -1.64197248, -1.82037609, -1.84524829, -1.68589689, -1.83900367,\n       -1.65370558, -1.68737291, -1.65210992, -1.85462841, -1.86166778,\n       -1.91032668, -1.64690105, -1.89526287, -1.61016341, -1.82963925,\n       -1.90941342, -1.9070547 , -1.64766979, -1.86000384, -1.90607514,\n       -1.68637977, -1.67731648, -1.63271684, -1.66527928, -1.82902844,\n       -1.69376151, -1.64882148, -1.66564184, -1.65589029, -1.69029234,\n       -1.86122767, -1.61733583, -1.62138331, -1.68340252, -1.67377449]), 'std_test_score': array([0.03530435, 0.17682314, 0.20841449, 0.03492553, 0.03122871,\n       0.04041805, 0.27125272, 0.03373417, 0.23876864, 0.17483338,\n       0.04940305, 0.19334958, 0.02498186, 0.05786597, 0.03429464,\n       0.02864525, 0.19807814, 0.03066498, 0.18968775, 0.23750755,\n       0.21324195, 0.20494072, 0.02621225, 0.16948213, 0.20964844,\n       0.06080627, 0.25252292, 0.05041727, 0.02988816, 0.04383269,\n       0.05391135, 0.02337042, 0.19527428, 0.20674237, 0.17091113,\n       0.04085887, 0.05706978, 0.19417589, 0.04605627, 0.17473974,\n       0.19049336, 0.25446479, 0.19655772, 0.20278251, 0.03662159,\n       0.05990727, 0.04046826, 0.03738445, 0.04127024, 0.04207795,\n       0.05491905, 0.05022852, 0.1921253 , 0.23740308, 0.03122871,\n       0.05293962, 0.20261458, 0.02567233, 0.17227071, 0.19815644,\n       0.03461834, 0.23732829, 0.19209267, 0.18445321, 0.02864906,\n       0.24566263, 0.04715272, 0.04344127, 0.21144413, 0.0606752 ,\n       0.20658318, 0.20033142, 0.16792329, 0.03936898, 0.03725196,\n       0.02423841, 0.19975364, 0.25890259, 0.19250301, 0.05711483,\n       0.02519995, 0.03144038, 0.23005085, 0.04897018, 0.02372734,\n       0.22687338, 0.19152867, 0.20688998, 0.18631937, 0.0465267 ,\n       0.1841247 , 0.17589206, 0.16093922, 0.1824526 , 0.18214193,\n       0.04204868, 0.18658518, 0.18267568, 0.1922056 , 0.1888941 ]), 'rank_test_score': array([ 52,  20,  10,  80,  71,  78,  99,  51,  29,  12,  68,  46,  90,\n        67,  53,  94,  22,  96,  47,  42,  26,  28,  88,  27,   6,  85,\n        50,  56,  95,  65,  60,  97,  45,  32,  13,  82,  57,  24,  70,\n        34,  49,  16,  44,  35,  54,  59,  73,  77,  76,  64,  66,  63,\n         8,   1,  72,  58,  43,  93,  33,  48,  75, 100,   7,   4,  98,\n        11,  55,  74,  37,  69,  19,  39,  18,  79,  84,  92,  14,  86,\n         2,  62,  91,  89,  15,  81,  87,  38,  31,   9,  23,  61,  41,\n        17,  25,  21,  40,  83,   3,   5,  36,  30]), 'split0_train_score': array([-1.75553040e+00, -1.99597778e-01, -6.50329689e-02, -1.75041329e+00,\n       -1.79327723e+00, -1.75214606e+00, -2.98559070e-04, -1.75570351e+00,\n       -5.20400839e-01, -6.82327891e-04, -1.77750309e+00, -3.05497960e-01,\n       -1.87644281e+00, -1.78399048e+00, -1.75571180e+00, -1.83112121e+00,\n       -4.13753744e-01, -1.89529115e+00, -4.21650018e-01, -3.40736270e-02,\n       -2.94356025e-01, -8.31979555e-02, -1.84935411e+00, -6.65636555e-02,\n       -5.74124925e-01, -1.61915064e+00, -5.53645412e-01, -1.73905150e+00,\n       -1.89676378e+00, -1.66647795e+00, -1.73118944e+00, -1.85577216e+00,\n       -3.48375199e-01, -2.07105920e-01, -4.21671565e-01, -1.80438394e+00,\n       -1.74318529e+00, -2.89550353e-01, -1.76722725e+00, -3.82127300e-02,\n       -3.86896510e-06, -9.85492801e-02, -4.20298132e-04, -2.72835333e-01,\n       -1.75560412e+00, -1.73826279e+00, -1.74970595e+00, -1.77476099e+00,\n       -1.77883245e+00, -1.64934565e+00, -1.78119433e+00, -1.74272994e+00,\n       -4.15349671e-01, -5.34315724e-01, -1.79327723e+00, -1.74645472e+00,\n       -2.60275967e-01, -1.85635903e+00, -2.16458130e-01, -7.53565949e-06,\n       -1.79276668e+00, -1.49909784e-07, -4.46188815e-01, -4.63919717e-01,\n       -1.88844941e+00, -7.11912511e-02, -1.71407082e+00, -1.76106371e+00,\n       -7.36044745e-05, -1.66808740e+00, -4.13753744e-01, -4.81483604e-01,\n       -6.55643954e-02, -1.75454459e+00, -1.71013587e+00, -1.85460118e+00,\n       -4.77044999e-01, -3.24296723e-06, -8.45815284e-01, -1.73909809e+00,\n       -1.85653612e+00, -1.87528270e+00, -3.23640127e-01, -1.74833807e+00,\n       -1.87640946e+00, -7.99081320e-02, -2.80725009e-01, -2.51082388e-01,\n       -5.89695088e-01, -1.73292997e+00, -2.68977665e-01, -2.53001572e-01,\n       -3.67833618e-02, -2.04924426e-01, -1.74157454e-01, -1.81124044e+00,\n       -9.16362360e-02, -4.89205902e-01, -5.09445820e-04, -2.02881034e-01]), 'split1_train_score': array([-1.76189730e+00, -1.89655362e-01, -6.71028989e-02, -1.76218550e+00,\n       -1.79937624e+00, -1.75645547e+00, -1.55278374e-04, -1.76192787e+00,\n       -5.15184044e-01, -5.94732010e-04, -1.77992671e+00, -2.98658651e-01,\n       -1.88166344e+00, -1.78026555e+00, -1.77010424e+00, -1.84651774e+00,\n       -3.76623104e-01, -1.89408438e+00, -4.07546339e-01, -3.26632674e-02,\n       -2.82143436e-01, -7.52869744e-02, -1.84245768e+00, -6.14266800e-02,\n       -5.47374258e-01, -1.63052582e+00, -5.83599509e-01, -1.75058983e+00,\n       -1.89632150e+00, -1.64778639e+00, -1.73639971e+00, -1.85854891e+00,\n       -3.25816863e-01, -1.88014355e-01, -3.73355618e-01, -1.81032509e+00,\n       -1.73999297e+00, -2.66934364e-01, -1.77204238e+00, -3.73829456e-02,\n       -3.74581770e-06, -9.25595886e-02, -3.23232197e-04, -2.81530076e-01,\n       -1.76626228e+00, -1.72839816e+00, -1.75607843e+00, -1.78082795e+00,\n       -1.78985097e+00, -1.67161059e+00, -1.78127286e+00, -1.73223163e+00,\n       -4.19064833e-01, -5.73360623e-01, -1.79937624e+00, -1.74008634e+00,\n       -2.29338451e-01, -1.85934189e+00, -2.23028890e-01, -4.03454268e-06,\n       -1.79942860e+00, -5.09889340e-08, -4.05936240e-01, -4.68800855e-01,\n       -1.89293054e+00, -7.10957838e-02, -1.71161786e+00, -1.77710101e+00,\n       -9.82346626e-05, -1.64960949e+00, -3.76623104e-01, -4.99368290e-01,\n       -6.84622019e-02, -1.74666528e+00, -1.72622226e+00, -1.85668459e+00,\n       -4.74063968e-01, -5.34277002e-07, -8.31893835e-01, -1.73264009e+00,\n       -1.85872503e+00, -1.86718357e+00, -2.78175811e-01, -1.75999840e+00,\n       -1.88164721e+00, -9.88917857e-02, -2.63998805e-01, -2.37472135e-01,\n       -5.53010115e-01, -1.74470997e+00, -2.67022423e-01, -2.39542860e-01,\n       -5.16516355e-02, -1.93771712e-01, -1.74035801e-01, -1.80867335e+00,\n       -1.18068837e-01, -5.53318699e-01, -6.28141746e-04, -2.02949247e-01]), 'split2_train_score': array([-1.75156555e+00, -1.73951221e-01, -6.19988855e-02, -1.75560378e+00,\n       -1.78923296e+00, -1.74694055e+00, -1.22510234e-04, -1.74839433e+00,\n       -5.03933033e-01, -5.62157228e-04, -1.77101226e+00, -2.95698273e-01,\n       -1.87987893e+00, -1.77459433e+00, -1.75739437e+00, -1.83008168e+00,\n       -3.95928941e-01, -1.89002053e+00, -3.77445744e-01, -3.06595143e-02,\n       -2.43813096e-01, -8.20610977e-02, -1.84706733e+00, -6.70417907e-02,\n       -6.03229087e-01, -1.63376153e+00, -5.68050298e-01, -1.73070805e+00,\n       -1.89186109e+00, -1.66706991e+00, -1.71340104e+00, -1.86072177e+00,\n       -3.41548681e-01, -1.92526089e-01, -3.80732400e-01, -1.79659520e+00,\n       -1.73828912e+00, -2.49056992e-01, -1.75830509e+00, -4.05858074e-02,\n       -5.60339201e-06, -6.85289521e-02, -4.34824953e-04, -2.67946571e-01,\n       -1.75549834e+00, -1.73225931e+00, -1.73990465e+00, -1.76448134e+00,\n       -1.77236754e+00, -1.63899088e+00, -1.77018332e+00, -1.73541203e+00,\n       -3.78496815e-01, -5.44122150e-01, -1.78923296e+00, -1.73853279e+00,\n       -2.73001715e-01, -1.85512351e+00, -2.25602231e-01, -2.69702720e-05,\n       -1.79455288e+00, -1.07293391e-07, -4.03473598e-01, -4.49127798e-01,\n       -1.88367975e+00, -4.98022103e-02, -1.70577697e+00, -1.75829443e+00,\n       -1.30544439e-04, -1.66667240e+00, -3.95928941e-01, -4.76601491e-01,\n       -7.01236059e-02, -1.75061412e+00, -1.70941419e+00, -1.85916838e+00,\n       -4.62072145e-01, -6.07554850e-07, -8.67948541e-01, -1.73225322e+00,\n       -1.85465206e+00, -1.87121116e+00, -2.25000041e-01, -1.75817059e+00,\n       -1.87943432e+00, -9.93300490e-02, -2.76172381e-01, -2.19581996e-01,\n       -5.59104857e-01, -1.71946172e+00, -2.63689350e-01, -2.23107644e-01,\n       -4.19390506e-02, -1.83328655e-01, -1.56392439e-01, -1.80488143e+00,\n       -1.14841029e-01, -5.01233072e-01, -5.05069388e-04, -1.86845670e-01]), 'split3_train_score': array([-1.74496697e+00, -1.76972047e-01, -4.58109656e-02, -1.73539292e+00,\n       -1.78324746e+00, -1.73839109e+00, -8.90729096e-05, -1.74218126e+00,\n       -5.00672090e-01, -3.68015784e-04, -1.75253257e+00, -2.82632208e-01,\n       -1.87474065e+00, -1.75332026e+00, -1.74814146e+00, -1.83245458e+00,\n       -3.76037271e-01, -1.87573444e+00, -4.03731608e-01, -2.10053549e-02,\n       -2.35459306e-01, -8.80693129e-02, -1.84158701e+00, -5.40852868e-02,\n       -5.37802761e-01, -1.62447902e+00, -5.74526159e-01, -1.72909448e+00,\n       -1.87662425e+00, -1.64945354e+00, -1.70267331e+00, -1.85086354e+00,\n       -3.27372357e-01, -1.89906022e-01, -3.92695898e-01, -1.78563905e+00,\n       -1.71751981e+00, -2.52751155e-01, -1.74541740e+00, -3.12761504e-02,\n       -5.39541111e-06, -8.31428857e-02, -3.19606360e-04, -2.77466073e-01,\n       -1.74771874e+00, -1.70799243e+00, -1.73338671e+00, -1.75162539e+00,\n       -1.77273075e+00, -1.64140191e+00, -1.75230934e+00, -1.71927126e+00,\n       -3.89778461e-01, -5.06984376e-01, -1.78324746e+00, -1.71731379e+00,\n       -2.44956727e-01, -1.85032878e+00, -2.09541776e-01, -1.11924542e-05,\n       -1.78740864e+00, -7.86337653e-10, -3.82456077e-01, -4.50010322e-01,\n       -1.87978466e+00, -5.09311620e-02, -1.68224119e+00, -1.76174288e+00,\n       -1.35040685e-04, -1.64940486e+00, -3.76037271e-01, -4.87058557e-01,\n       -6.98404314e-02, -1.73219654e+00, -1.69131064e+00, -1.84913789e+00,\n       -4.56729891e-01, -7.57197533e-07, -8.66660810e-01, -1.70840293e+00,\n       -1.84928028e+00, -1.86070393e+00, -2.42679117e-01, -1.73331899e+00,\n       -1.87473485e+00, -8.72590236e-02, -2.57902494e-01, -2.26933482e-01,\n       -5.60319549e-01, -1.70495217e+00, -2.47789546e-01, -2.09522871e-01,\n       -3.57115058e-02, -1.87479862e-01, -1.69144815e-01, -1.78243242e+00,\n       -1.12585395e-01, -5.08070864e-01, -4.06144379e-04, -1.79112930e-01]), 'split4_train_score': array([-1.75708646e+00, -1.75336010e-01, -4.55894433e-02, -1.75426790e+00,\n       -1.79591060e+00, -1.74997992e+00, -2.27775147e-04, -1.75675199e+00,\n       -5.10537395e-01, -5.41452138e-04, -1.76454062e+00, -3.03282354e-01,\n       -1.88259826e+00, -1.76573993e+00, -1.76052054e+00, -1.83507095e+00,\n       -3.61897597e-01, -1.88856984e+00, -3.75853337e-01, -3.61754677e-02,\n       -2.40931898e-01, -6.58818396e-02, -1.84631218e+00, -4.67283125e-02,\n       -5.59291593e-01, -1.62607730e+00, -5.73275797e-01, -1.74161420e+00,\n       -1.88944021e+00, -1.65955598e+00, -1.72937415e+00, -1.85928179e+00,\n       -3.51906427e-01, -1.93295472e-01, -3.65796918e-01, -1.79802833e+00,\n       -1.72661405e+00, -2.19552318e-01, -1.75899166e+00, -2.67553769e-02,\n       -4.34048334e-06, -7.48267772e-02, -4.54363702e-04, -3.00387665e-01,\n       -1.75894349e+00, -1.71970547e+00, -1.74771018e+00, -1.77078842e+00,\n       -1.78214556e+00, -1.64164190e+00, -1.76347593e+00, -1.72508178e+00,\n       -3.82137037e-01, -5.93956348e-01, -1.79591060e+00, -1.72535831e+00,\n       -2.14072076e-01, -1.85856993e+00, -2.01869624e-01, -5.98384890e-06,\n       -1.79726817e+00, -4.50416715e-08, -4.29635048e-01, -4.11285157e-01,\n       -1.88548506e+00, -7.50093368e-02, -1.70505343e+00, -1.76280954e+00,\n       -1.04198069e-04, -1.65990929e+00, -3.90605982e-01, -4.96576336e-01,\n       -6.69165495e-02, -1.74614465e+00, -1.70876366e+00, -1.86241093e+00,\n       -4.74233672e-01, -7.48394103e-07, -8.91709325e-01, -1.71933635e+00,\n       -1.85906689e+00, -1.86495800e+00, -2.13198145e-01, -1.74847121e+00,\n       -1.88257413e+00, -8.53023045e-02, -2.81629898e-01, -2.32964843e-01,\n       -5.59556403e-01, -1.72531015e+00, -2.79898331e-01, -2.33238630e-01,\n       -4.60591266e-02, -1.78757083e-01, -1.56052986e-01, -1.80256454e+00,\n       -1.13216183e-01, -5.34903027e-01, -5.56581658e-04, -1.76849939e-01]), 'split5_train_score': array([-1.76074334e+00, -1.87107020e-01, -5.12596020e-02, -1.76333100e+00,\n       -1.79869075e+00, -1.74321390e+00, -1.18245005e-04, -1.76026393e+00,\n       -4.93619341e-01, -6.73047503e-04, -1.77539145e+00, -2.80505348e-01,\n       -1.88303544e+00, -1.77688990e+00, -1.76441654e+00, -1.83544528e+00,\n       -3.82479300e-01, -1.89165963e+00, -3.77416011e-01, -2.96390888e-02,\n       -2.52368065e-01, -9.57152319e-02, -1.84458373e+00, -6.15594345e-02,\n       -5.91597464e-01, -1.62917002e+00, -5.63464124e-01, -1.74112943e+00,\n       -1.89304723e+00, -1.64530164e+00, -1.71995925e+00, -1.86618989e+00,\n       -3.39659607e-01, -2.09970426e-01, -3.81494417e-01, -1.80518891e+00,\n       -1.74214666e+00, -2.23826630e-01, -1.76536469e+00, -3.80766751e-02,\n       -1.18540337e-05, -8.54055764e-02, -3.25089014e-04, -2.69320449e-01,\n       -1.76361206e+00, -1.72469682e+00, -1.74544614e+00, -1.77029119e+00,\n       -1.78316970e+00, -1.64615538e+00, -1.77521189e+00, -1.73446399e+00,\n       -4.11157372e-01, -5.65633720e-01, -1.79869075e+00, -1.73664370e+00,\n       -2.11447112e-01, -1.85488435e+00, -2.18879631e-01, -1.47169911e-05,\n       -1.79796727e+00, -1.65483971e-07, -4.44625770e-01, -4.20139364e-01,\n       -1.88714251e+00, -5.34036941e-02, -1.71417713e+00, -1.76203348e+00,\n       -8.87273881e-04, -1.64623902e+00, -3.82566406e-01, -5.09954161e-01,\n       -5.84255047e-02, -1.75360867e+00, -1.71033822e+00, -1.86178507e+00,\n       -4.60101482e-01, -8.84538262e-07, -8.88662280e-01, -1.72417001e+00,\n       -1.85411153e+00, -1.86877367e+00, -2.40567222e-01, -1.75340436e+00,\n       -1.88369338e+00, -8.92146820e-02, -2.81552750e-01, -2.40264366e-01,\n       -5.22399387e-01, -1.72887899e+00, -2.42827405e-01, -2.42704902e-01,\n       -3.93986812e-02, -1.87369347e-01, -1.73924490e-01, -1.80759394e+00,\n       -9.51261302e-02, -5.23030483e-01, -1.63169421e-03, -1.87532506e-01]), 'split6_train_score': array([-1.76521791e+00, -2.10820063e-01, -7.31924986e-02, -1.76155885e+00,\n       -1.80167222e+00, -1.75640413e+00, -3.21116687e-04, -1.76360242e+00,\n       -5.38482054e-01, -4.98106134e-04, -1.76785804e+00, -3.16014791e-01,\n       -1.88626256e+00, -1.76366831e+00, -1.76593508e+00, -1.84317718e+00,\n       -4.24311672e-01, -1.88627551e+00, -4.21445197e-01, -3.52778495e-02,\n       -3.04715377e-01, -8.67229827e-02, -1.84603509e+00, -7.01975916e-02,\n       -6.19634667e-01, -1.63793518e+00, -6.06813279e-01, -1.73997943e+00,\n       -1.88860163e+00, -1.64982295e+00, -1.71694121e+00, -1.86711214e+00,\n       -3.49698948e-01, -2.42146598e-01, -4.14062504e-01, -1.80015873e+00,\n       -1.72846287e+00, -2.63654388e-01, -1.76139558e+00, -3.91462076e-02,\n       -4.31791525e-06, -9.90843764e-02, -5.71046522e-04, -2.87996941e-01,\n       -1.76593508e+00, -1.72288916e+00, -1.75647610e+00, -1.78265308e+00,\n       -1.78349493e+00, -1.67035911e+00, -1.76824336e+00, -1.72079941e+00,\n       -4.14985658e-01, -5.55691952e-01, -1.80167222e+00, -1.72785169e+00,\n       -2.46140389e-01, -1.86120967e+00, -2.90364665e-01, -6.96642879e-05,\n       -1.80354713e+00, -1.46046042e-06, -4.62732633e-01, -4.65798892e-01,\n       -1.88753764e+00, -6.27630196e-02, -1.70565775e+00, -1.76973765e+00,\n       -9.85068087e-05, -1.65077811e+00, -4.24311672e-01, -5.21350747e-01,\n       -7.52215656e-02, -1.74893542e+00, -1.71954818e+00, -1.86252010e+00,\n       -4.81621593e-01, -1.32712627e-06, -8.48910732e-01, -1.72324245e+00,\n       -1.86303488e+00, -1.87054409e+00, -2.98700151e-01, -1.75781522e+00,\n       -1.88488746e+00, -8.81444872e-02, -2.93172322e-01, -2.59285186e-01,\n       -5.85240903e-01, -1.73687569e+00, -2.77056935e-01, -2.62250464e-01,\n       -3.81165346e-02, -2.07775727e-01, -1.80455332e-01, -1.80082644e+00,\n       -1.09834751e-01, -5.40196862e-01, -5.29175259e-04, -2.12689483e-01]), 'split7_train_score': array([-1.75026235e+00, -1.75470672e-01, -5.12141027e-02, -1.74144759e+00,\n       -1.78992165e+00, -1.74191305e+00, -2.22408372e-04, -1.74994643e+00,\n       -5.03793077e-01, -4.62199499e-04, -1.77232737e+00, -2.78237786e-01,\n       -1.87852535e+00, -1.77072436e+00, -1.75523885e+00, -1.84099443e+00,\n       -3.94184957e-01, -1.88878037e+00, -4.02000907e-01, -3.27251317e-02,\n       -2.81824379e-01, -8.79702917e-02, -1.84265798e+00, -7.01413188e-02,\n       -5.47877957e-01, -1.62453128e+00, -5.27751415e-01, -1.72034283e+00,\n       -1.89054429e+00, -1.64873438e+00, -1.71763841e+00, -1.85263174e+00,\n       -3.20023050e-01, -2.22000262e-01, -4.13568318e-01, -1.79940654e+00,\n       -1.72999788e+00, -2.44599633e-01, -1.76105967e+00, -3.45395610e-02,\n       -8.87815072e-06, -8.43120565e-02, -2.34036033e-04, -2.49152118e-01,\n       -1.75523885e+00, -1.71483789e+00, -1.73583091e+00, -1.76318506e+00,\n       -1.76700866e+00, -1.65178634e+00, -1.77236341e+00, -1.72819279e+00,\n       -4.07598851e-01, -5.44944288e-01, -1.78992165e+00, -1.73051054e+00,\n       -2.40046025e-01, -1.85620446e+00, -2.42224707e-01, -7.88415872e-06,\n       -1.79099568e+00, -1.54032598e-07, -3.90065284e-01, -4.63694437e-01,\n       -1.88780395e+00, -6.36181081e-02, -1.69848254e+00, -1.75175772e+00,\n       -8.81420087e-05, -1.65249511e+00, -3.94184957e-01, -5.11189360e-01,\n       -6.86194974e-02, -1.74446186e+00, -1.71454799e+00, -1.85427633e+00,\n       -4.60445091e-01, -8.07841982e-07, -8.11735002e-01, -1.71488789e+00,\n       -1.85380349e+00, -1.87106484e+00, -2.74936463e-01, -1.73414858e+00,\n       -1.87849011e+00, -7.95568163e-02, -2.74385718e-01, -2.38413641e-01,\n       -5.50014561e-01, -1.71732537e+00, -2.35461789e-01, -2.35036171e-01,\n       -4.57556837e-02, -1.93933161e-01, -1.72648008e-01, -1.80194771e+00,\n       -1.11662677e-01, -4.94580758e-01, -4.25675643e-04, -1.84658587e-01]), 'split8_train_score': array([-1.74964926e+00, -1.75425196e-01, -3.28725037e-02, -1.74600897e+00,\n       -1.79012836e+00, -1.74938688e+00, -2.81006982e-04, -1.74949231e+00,\n       -5.02425423e-01, -1.90983593e-03, -1.77015306e+00, -2.78929006e-01,\n       -1.87931791e+00, -1.76601879e+00, -1.75019072e+00, -1.84036387e+00,\n       -3.83920719e-01, -1.88788242e+00, -3.79620685e-01, -3.10476718e-02,\n       -2.71790537e-01, -8.49142394e-02, -1.85582333e+00, -5.72414153e-02,\n       -5.68740222e-01, -1.63293844e+00, -5.55912625e-01, -1.72859668e+00,\n       -1.88864335e+00, -1.65865915e+00, -1.72297345e+00, -1.85495976e+00,\n       -3.15434853e-01, -1.92579629e-01, -3.82244439e-01, -1.80038130e+00,\n       -1.73611639e+00, -2.52899843e-01, -1.76146516e+00, -3.05438922e-02,\n       -5.26749953e-06, -8.91410467e-02, -4.09781417e-04, -2.62135242e-01,\n       -1.75037477e+00, -1.72418648e+00, -1.74767630e+00, -1.76946396e+00,\n       -1.77000080e+00, -1.65547222e+00, -1.77030527e+00, -1.72967504e+00,\n       -3.89930601e-01, -5.42534023e-01, -1.79012836e+00, -1.73598731e+00,\n       -2.30029763e-01, -1.85781001e+00, -2.33658681e-01, -8.60323146e-04,\n       -1.79026522e+00, -3.58348920e-07, -3.58138226e-01, -4.44716988e-01,\n       -1.88609540e+00, -7.18877316e-02, -1.71367413e+00, -1.75164267e+00,\n       -3.42608186e-04, -1.64416763e+00, -3.83920719e-01, -5.07314445e-01,\n       -6.99194169e-02, -1.75555583e+00, -1.71459107e+00, -1.85420881e+00,\n       -4.62606592e-01, -2.12805294e-06, -8.64994742e-01, -1.72418648e+00,\n       -1.85810840e+00, -1.86762892e+00, -2.45923962e-01, -1.74718834e+00,\n       -1.87926487e+00, -1.00773403e-01, -2.70554953e-01, -2.28264379e-01,\n       -5.77011056e-01, -1.72342143e+00, -2.63615545e-01, -2.34106072e-01,\n       -3.06806227e-02, -1.86441013e-01, -1.60859053e-01, -1.80312927e+00,\n       -1.09805333e-01, -5.38573589e-01, -1.15492313e-03, -1.84471659e-01]), 'split9_train_score': array([-1.75745860e+00, -2.00419233e-01, -7.25804497e-02, -1.75490729e+00,\n       -1.79586727e+00, -1.75355529e+00, -1.51482869e-04, -1.75723946e+00,\n       -5.38412334e-01, -6.25838505e-04, -1.77518604e+00, -3.03838882e-01,\n       -1.88185553e+00, -1.77814968e+00, -1.75907913e+00, -1.84638981e+00,\n       -4.18788719e-01, -1.89354880e+00, -4.23637609e-01, -3.04178853e-02,\n       -2.90783953e-01, -8.23077765e-02, -1.85299777e+00, -5.75708255e-02,\n       -5.49905392e-01, -1.63540346e+00, -5.59445446e-01, -1.73262002e+00,\n       -1.89421354e+00, -1.66913175e+00, -1.72158406e+00, -1.86019692e+00,\n       -3.33810665e-01, -2.11819582e-01, -4.15777631e-01, -1.80408375e+00,\n       -1.72001412e+00, -2.50540450e-01, -1.76654760e+00, -3.09913592e-02,\n       -3.26563088e-06, -9.85236555e-02, -3.26021373e-04, -2.67160122e-01,\n       -1.75903139e+00, -1.70878116e+00, -1.75253689e+00, -1.76765570e+00,\n       -1.77537241e+00, -1.66018274e+00, -1.77549831e+00, -1.71687092e+00,\n       -3.99450304e-01, -5.63427131e-01, -1.79586727e+00, -1.71994471e+00,\n       -2.30108162e-01, -1.86051321e+00, -2.44353885e-01, -3.13735527e-06,\n       -1.79646447e+00, -3.55776326e-08, -4.17464422e-01, -4.12592026e-01,\n       -1.88623286e+00, -6.61404868e-02, -1.70080444e+00, -1.76040137e+00,\n       -8.65395916e-05, -1.66194809e+00, -4.18956574e-01, -5.30586172e-01,\n       -6.05946869e-02, -1.74656863e+00, -1.72154910e+00, -1.85992671e+00,\n       -4.84679140e-01, -8.28120713e-07, -8.56771793e-01, -1.70853105e+00,\n       -1.86064193e+00, -1.86080358e+00, -2.87617563e-01, -1.75524007e+00,\n       -1.88151551e+00, -1.01724962e-01, -2.69294926e-01, -2.62503024e-01,\n       -5.65047754e-01, -1.72232563e+00, -2.71877328e-01, -2.52403443e-01,\n       -3.28247684e-02, -2.08189690e-01, -1.76350307e-01, -1.80715068e+00,\n       -1.29815760e-01, -5.57523745e-01, -4.57860534e-04, -1.95139246e-01]), 'mean_train_score': array([-1.75543781e+00, -1.86475460e-01, -5.66654319e-02, -1.75251171e+00,\n       -1.79373247e+00, -1.74883863e+00, -1.98745565e-04, -1.75455035e+00,\n       -5.12745963e-01, -6.91771262e-04, -1.77064312e+00, -2.94329526e-01,\n       -1.88043209e+00, -1.77133616e+00, -1.75867327e+00, -1.83816167e+00,\n       -3.92792602e-01, -1.88918471e+00, -3.99034745e-01, -3.13684858e-02,\n       -2.69818607e-01, -8.32127702e-02, -1.84688762e+00, -6.12556311e-02,\n       -5.69957833e-01, -1.62939727e+00, -5.66648406e-01, -1.73537264e+00,\n       -1.89060609e+00, -1.65619936e+00, -1.72121340e+00, -1.85862786e+00,\n       -3.35364665e-01, -2.04936436e-01, -3.94139971e-01, -1.80041909e+00,\n       -1.73223392e+00, -2.51336613e-01, -1.76178165e+00, -3.47510705e-02,\n       -5.65372994e-06, -8.74074195e-02, -3.81829970e-04, -2.73593059e-01,\n       -1.75782191e+00, -1.72220097e+00, -1.74647523e+00, -1.76957331e+00,\n       -1.77749738e+00, -1.65269467e+00, -1.77100580e+00, -1.72847288e+00,\n       -4.00794960e-01, -5.52497033e-01, -1.79373247e+00, -1.73186839e+00,\n       -2.37941639e-01, -1.85703448e+00, -2.30598222e-01, -1.01144272e-04,\n       -1.79506647e+00, -2.52792366e-07, -4.14071611e-01, -4.45008556e-01,\n       -1.88651418e+00, -6.35842784e-02, -1.70515563e+00, -1.76165845e+00,\n       -2.04469281e-04, -1.65493114e+00, -3.95688937e-01, -5.02148316e-01,\n       -6.73687856e-02, -1.74792956e+00, -1.71264212e+00, -1.85747200e+00,\n       -4.69359857e-01, -1.18660709e-06, -8.57510234e-01, -1.72267485e+00,\n       -1.85679606e+00, -1.86781545e+00, -2.63043860e-01, -1.74960938e+00,\n       -1.88026513e+00, -9.10105645e-02, -2.74938926e-01, -2.39676544e-01,\n       -5.62139967e-01, -1.72561911e+00, -2.61821632e-01, -2.38491463e-01,\n       -3.98920971e-02, -1.93197068e-01, -1.69402068e-01, -1.80304402e+00,\n       -1.10659233e-01, -5.24063700e-01, -6.80471176e-04, -1.91313030e-01]), 'std_train_score': array([5.97711892e-03, 1.25867662e-02, 1.26466368e-02, 8.79221554e-03,\n       5.35423461e-03, 5.85147058e-03, 7.84540817e-05, 6.48144943e-03,\n       1.47189321e-02, 4.16210003e-04, 7.43391848e-03, 1.26895062e-02,\n       3.20150404e-03, 8.78114334e-03, 6.51948607e-03, 5.83020055e-03,\n       1.94991391e-02, 5.27991666e-03, 1.88945065e-02, 4.01396854e-03,\n       2.35693769e-02, 7.63592257e-03, 4.41897548e-03, 7.16127762e-03,\n       2.57084452e-02, 5.52959915e-03, 1.96668161e-02, 8.24000419e-03,\n       5.43926593e-03, 8.60123013e-03, 9.15069056e-03, 5.04277377e-03,\n       1.22273427e-02, 1.64550460e-02, 1.92850330e-02, 6.24428975e-03,\n       8.64157877e-03, 1.91781385e-02, 6.77435882e-03, 4.37284329e-03,\n       2.55140436e-06, 9.79825179e-03, 9.03417163e-05, 1.35061290e-02,\n       5.89774016e-03, 9.22289947e-03, 7.55797631e-03, 8.48060260e-03,\n       6.81108337e-03, 1.10721167e-02, 8.14856157e-03, 7.69816812e-03,\n       1.40968342e-02, 2.25495396e-02, 5.35423464e-03, 8.82523848e-03,\n       1.82169770e-02, 3.03650256e-03, 2.36516723e-02, 2.53763181e-04,\n       4.58241042e-03, 4.13921442e-07, 3.07726982e-02, 2.13395229e-02,\n       3.20397414e-03, 8.80152775e-03, 9.29718522e-03, 7.18894786e-03,\n       2.39316295e-04, 8.11425759e-03, 1.66599006e-02, 1.64102178e-02,\n       4.62558980e-03, 6.39201780e-03, 9.00534409e-03, 4.20192781e-03,\n       9.55718928e-03, 8.14565113e-07, 2.31334762e-02, 9.70120595e-03,\n       3.76333381e-03, 4.41080518e-03, 3.32603306e-02, 8.98807275e-03,\n       3.03669998e-03, 8.08695889e-03, 9.57744699e-03, 1.33562760e-02,\n       1.83069288e-02, 1.05111436e-02, 1.41332358e-02, 1.45672209e-02,\n       6.16625265e-03, 9.96950749e-03, 8.16102927e-03, 7.55650862e-03,\n       1.02721847e-02, 2.32940384e-02, 3.76915675e-04, 1.10642305e-02])}"}, {"dataset_variant": "only_totals", "experiment_setup": {"dataset_variants": ["complete", "only_binary", "only_totals"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "regressor": "[GradientBoostingRegressor(criterion = 'mse')]", "floor_labels": "True", "params": [{"reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler()]", "regressor__learning_rate": "[0.1, 1e-3]", "regressor__n_estimators": "[100, 200, 250]", "regressor__max_depth": "[5, 10, 15]", "regressor__min_samples_split": "[2, 8, 16]", "regressor__min_samples_leaf": "[1, 8, 16]"}], "metrics": "['neg_root_mean_squared_error']", "binarize": "False", "n_split_outer_kcv": 10, "hp_optimizer": "bayes"}, "best_params": "{'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}", "mean_test_score": -1.4943244847054813, "cv_results": "{'mean_fit_time': array([0.35290046, 0.23749776, 0.13280008, 0.10690064, 0.0667999 ,\n       0.06849995, 0.08820052, 0.19029994, 0.16110046, 0.08930016,\n       0.08959968, 0.09689999, 0.33910272, 0.20109816, 0.17419951,\n       0.31249979, 0.08930008, 0.34380071, 0.2786999 , 0.21470025,\n       0.13950002, 0.10100033, 0.24969192, 0.0688998 , 0.07480075,\n       0.12359903, 0.22360003, 0.09760108, 0.18139963, 0.08630042,\n       0.14830027, 0.20970037, 0.10370004, 0.2579977 , 0.20589931,\n       0.06799946, 0.22020047, 0.2539999 , 0.18370659, 0.09440038,\n       0.10109985, 0.25339646, 0.27109594, 0.16210048, 0.2561002 ,\n       0.26130116, 0.18089793, 0.31940114, 0.15100026, 0.15090024,\n       0.10190029, 0.08430018, 0.16010044, 0.32570279, 0.13479919,\n       0.1756995 , 0.11360016, 0.2137996 , 0.22519674, 0.1456002 ,\n       0.09340036, 0.30639985, 0.21799991, 0.16850057, 0.16940093,\n       0.21619966, 0.19259982, 0.08870022, 0.23039997, 0.11760082,\n       0.24599965, 0.28720043, 0.08989849, 0.12679992, 0.22199991,\n       0.08210032, 0.07489967, 0.17730002, 0.07760072, 0.13480027,\n       0.08310084, 0.08310051, 0.2329006 , 0.22039895, 0.1838999 ,\n       0.07840047, 0.20580151, 0.28990002, 0.16690042, 0.19160023,\n       0.23679807, 0.09709976, 0.08050041, 0.0945003 , 0.25979819,\n       0.29839931, 0.14019854, 0.30570307, 0.27029877, 0.1025003 ]), 'std_fit_time': array([0.03229198, 0.02384387, 0.01152233, 0.00430084, 0.00087179,\n       0.00111829, 0.00146889, 0.00352145, 0.0024675 , 0.00179118,\n       0.00387662, 0.00294742, 0.03462372, 0.03682245, 0.00701175,\n       0.01143714, 0.00306795, 0.003365  , 0.03550073, 0.02397907,\n       0.00465426, 0.01348307, 0.0049904 , 0.00571566, 0.00312496,\n       0.01046018, 0.00467575, 0.00200964, 0.02680005, 0.02008949,\n       0.00498231, 0.01261787, 0.01029387, 0.00595055, 0.00871511,\n       0.00271867, 0.00952741, 0.03273172, 0.01192188, 0.01009171,\n       0.03580095, 0.00490447, 0.00408287, 0.00369962, 0.00848609,\n       0.030307  , 0.0052269 , 0.01343886, 0.00554906, 0.00320782,\n       0.00356197, 0.00462668, 0.0029141 , 0.03555637, 0.03533508,\n       0.00944509, 0.00210766, 0.00936805, 0.00779502, 0.01221561,\n       0.0129473 , 0.00422526, 0.03546434, 0.012258  , 0.01905262,\n       0.0044453 , 0.00233203, 0.00205173, 0.00733051, 0.00080038,\n       0.02313424, 0.02450146, 0.01750393, 0.00334008, 0.0058139 ,\n       0.00137467, 0.00151369, 0.00417257, 0.00179923, 0.0028908 ,\n       0.00192083, 0.00644136, 0.0356387 , 0.01527232, 0.00383178,\n       0.00111328, 0.01245574, 0.01035128, 0.00789233, 0.00424663,\n       0.03533148, 0.00211964, 0.00206098, 0.02109401, 0.01095735,\n       0.01488743, 0.00991922, 0.02284794, 0.02889504, 0.00657651]), 'mean_score_time': array([0.00160162, 0.00120022, 0.00150027, 0.00099957, 0.00080001,\n       0.00100026, 0.00090179, 0.00140007, 0.00099998, 0.00110028,\n       0.00100012, 0.00089996, 0.00180008, 0.0012007 , 0.0010006 ,\n       0.0019022 , 0.00100036, 0.0018012 , 0.00179808, 0.00119982,\n       0.00129991, 0.00100048, 0.00140162, 0.00100005, 0.00099993,\n       0.00130041, 0.00100007, 0.00100029, 0.00150011, 0.00110025,\n       0.00099988, 0.00100019, 0.00110023, 0.00190029, 0.00129983,\n       0.00090013, 0.00110059, 0.00130064, 0.00130002, 0.001     ,\n       0.00110049, 0.00140202, 0.00160222, 0.00099978, 0.00150061,\n       0.00140035, 0.00160038, 0.0019999 , 0.00100031, 0.00100138,\n       0.00110028, 0.00100021, 0.00130067, 0.00190022, 0.00109951,\n       0.00140033, 0.00110002, 0.00140009, 0.00170157, 0.00190048,\n       0.0010005 , 0.00130007, 0.00150044, 0.0012002 , 0.00129936,\n       0.00110018, 0.00100043, 0.00100038, 0.00099983, 0.00120027,\n       0.0016005 , 0.00159969, 0.00130002, 0.0010004 , 0.00130033,\n       0.00090046, 0.00089996, 0.00110018, 0.00089977, 0.00090103,\n       0.00100007, 0.00099993, 0.00140018, 0.00150042, 0.00099998,\n       0.00110044, 0.00109999, 0.00200028, 0.00120032, 0.00110009,\n       0.00120049, 0.00090024, 0.00089991, 0.00120022, 0.00150061,\n       0.00190134, 0.00100017, 0.00160031, 0.00140009, 0.00110059]), 'std_score_time': array([4.90458265e-04, 4.00054560e-04, 4.99773219e-04, 9.49193441e-07,\n       4.00006898e-04, 3.72421726e-07, 3.00613669e-04, 4.89823808e-04,\n       5.30983387e-07, 2.99938617e-04, 6.10649513e-07, 2.99986932e-04,\n       4.00436385e-04, 3.99826499e-04, 1.66483786e-06, 3.00458215e-04,\n       2.33601546e-07, 4.00229922e-04, 3.99098417e-04, 5.99432105e-04,\n       4.58536821e-04, 9.47994964e-07, 4.93269600e-04, 9.12554703e-07,\n       7.38712949e-07, 4.58261101e-04, 4.67203091e-07, 2.87093987e-07,\n       5.00226389e-04, 2.99311292e-04, 6.72661590e-07, 5.05199912e-07,\n       3.00352342e-04, 2.99883021e-04, 4.58324164e-04, 3.00042165e-04,\n       3.00075196e-04, 4.58157490e-04, 4.58406690e-04, 4.47234695e-04,\n       2.99947360e-04, 4.88636481e-04, 4.91563859e-04, 1.09879671e-06,\n       4.99868486e-04, 4.90564743e-04, 4.90321731e-04, 4.86280395e-07,\n       6.59002064e-07, 2.78133437e-06, 2.99938692e-04, 3.16297988e-07,\n       4.59969209e-04, 5.38855088e-04, 3.00194461e-04, 4.89658401e-04,\n       2.99946791e-04, 4.89950113e-04, 4.59289732e-04, 2.99947398e-04,\n       7.24729736e-07, 4.58011429e-04, 5.00038123e-04, 3.99947262e-04,\n       4.58951002e-04, 3.00129471e-04, 2.91026965e-07, 2.24923638e-07,\n       4.67203091e-07, 4.00030896e-04, 4.90126543e-04, 4.90339839e-04,\n       4.58510605e-04, 5.54034712e-07, 4.58359740e-04, 3.00153136e-04,\n       2.99986458e-04, 3.00209235e-04, 2.99927245e-04, 3.00354722e-04,\n       4.47288812e-04, 5.43678010e-07, 4.89775144e-04, 5.00250835e-04,\n       2.33601546e-07, 2.99887286e-04, 2.99795698e-04, 3.16297988e-07,\n       3.99947223e-04, 2.99922829e-04, 4.00161942e-04, 3.00081744e-04,\n       2.99972099e-04, 3.99637880e-04, 5.03987834e-04, 3.00483312e-04,\n       5.00111031e-07, 4.90319071e-04, 4.90535275e-04, 2.99836020e-04]), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__n_estimators': masked_array(data=[200, 250, 100, 100, 100, 100, 100, 200, 200, 100, 100,\n                   100, 250, 200, 250, 250, 100, 250, 200, 200, 200, 100,\n                   250, 100, 100, 100, 250, 100, 200, 100, 200, 200, 100,\n                   200, 250, 100, 250, 250, 200, 100, 100, 250, 200, 200,\n                   200, 250, 200, 250, 200, 200, 100, 100, 200, 200, 100,\n                   200, 100, 250, 250, 100, 100, 250, 200, 200, 200, 250,\n                   200, 100, 250, 100, 200, 200, 100, 100, 250, 100, 100,\n                   200, 100, 200, 100, 100, 200, 200, 250, 100, 250, 200,\n                   200, 250, 250, 100, 100, 100, 250, 200, 200, 250, 250,\n                   100],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_split': masked_array(data=[16, 16, 8, 16, 2, 16, 16, 2, 2, 16, 8, 8, 8, 16, 16, 2,\n                   16, 16, 2, 16, 8, 8, 2, 8, 2, 2, 8, 2, 16, 16, 16, 2,\n                   2, 8, 8, 8, 8, 2, 2, 2, 16, 8, 2, 16, 8, 16, 16, 16, 2,\n                   2, 8, 8, 16, 2, 8, 8, 8, 2, 16, 2, 8, 16, 8, 16, 2, 8,\n                   2, 16, 16, 16, 8, 8, 16, 8, 2, 2, 16, 16, 2, 2, 8, 16,\n                   16, 16, 16, 2, 2, 16, 2, 2, 8, 2, 2, 8, 8, 8, 16, 8, 8,\n                   2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__min_samples_leaf': masked_array(data=[1, 16, 1, 8, 16, 16, 8, 8, 8, 16, 16, 8, 1, 8, 16, 8,\n                   1, 8, 1, 16, 16, 1, 16, 16, 8, 1, 8, 8, 8, 8, 1, 16, 8,\n                   1, 8, 16, 8, 8, 8, 8, 16, 16, 8, 16, 1, 8, 16, 1, 16,\n                   16, 1, 8, 16, 1, 8, 16, 1, 16, 1, 1, 8, 8, 16, 8, 1, 8,\n                   8, 8, 1, 1, 1, 8, 1, 1, 8, 16, 16, 8, 1, 16, 16, 16, 8,\n                   8, 16, 16, 16, 1, 8, 16, 16, 8, 8, 16, 1, 1, 16, 1, 1,\n                   16],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__max_depth': masked_array(data=[15, 5, 10, 10, 5, 5, 10, 10, 5, 15, 10, 10, 10, 15, 15,\n                   10, 15, 15, 15, 10, 5, 5, 10, 5, 5, 10, 5, 10, 10, 5,\n                   5, 10, 15, 15, 5, 15, 15, 15, 5, 15, 15, 15, 15, 5, 15,\n                   15, 10, 15, 10, 15, 10, 5, 10, 10, 15, 5, 10, 5, 15,\n                   15, 10, 10, 15, 5, 5, 10, 10, 15, 5, 10, 15, 15, 5, 15,\n                   5, 15, 10, 5, 5, 5, 10, 15, 10, 15, 5, 10, 5, 15, 5, 5,\n                   15, 15, 10, 15, 15, 15, 5, 10, 5, 10],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_regressor__learning_rate': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.001, 0.1, 0.001, 0.1, 0.001, 0.1,\n                   0.1, 0.001, 0.001, 0.001, 0.001, 0.1, 0.001, 0.1, 0.1,\n                   0.1, 0.1, 0.1, 0.1, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.1, 0.1, 0.1, 0.001, 0.1, 0.1, 0.001, 0.001,\n                   0.001, 0.1, 0.001, 0.1, 0.1, 0.1, 0.001, 0.001, 0.001,\n                   0.1, 0.1, 0.001, 0.001, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1,\n                   0.001, 0.1, 0.001, 0.001, 0.001, 0.1, 0.1, 0.001, 0.1,\n                   0.001, 0.001, 0.001, 0.001, 0.1, 0.001, 0.1, 0.1,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.1, 0.001, 0.001,\n                   0.001, 0.001, 0.1, 0.001, 0.1, 0.001, 0.1, 0.1, 0.1,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.1, 0.1, 0.001,\n                   0.1, 0.1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[3, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 3, 3, 2, 1, 3, 1, 3,\n                   1, 3, 1, 3, 3, 1, 1, 1, 3, 3, 1, 1, 1, 3, 3, 1, 2, 1,\n                   2, 2, 3, 2, 1, 3, 3, 3, 3, 3, 2, 1, 2, 2, 1, 2, 1, 3,\n                   2, 3, 2, 3, 1, 2, 2, 3, 2, 2, 1, 2, 3, 2, 3, 2, 2, 3,\n                   1, 3, 3, 3, 2, 3, 1, 1, 3, 3, 3, 1, 2, 1, 3, 2, 2, 2,\n                   3, 3, 1, 3, 1, 2, 1, 2, 3, 3],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 8, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 15, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 200, 'regressor__min_samples_split': 16, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 1, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.001, 'reduce_dim__n_components': 2, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 250, 'regressor__min_samples_split': 8, 'regressor__min_samples_leaf': 1, 'regressor__max_depth': 5, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}, {'scaler': MinMaxScaler(), 'regressor__n_estimators': 100, 'regressor__min_samples_split': 2, 'regressor__min_samples_leaf': 16, 'regressor__max_depth': 10, 'regressor__learning_rate': 0.1, 'reduce_dim__n_components': 3, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1)}], 'split0_test_score': array([-1.57777089, -1.52086526, -1.60510387, -1.68529374, -1.96448597,\n       -1.67995894, -1.92297469, -1.4175886 , -1.85645039, -1.43190011,\n       -1.54234611, -1.93711708, -1.82384736, -1.87557264, -1.8238625 ,\n       -1.7039777 , -1.93726642, -1.62311415, -2.1073329 , -1.57675007,\n       -1.74177867, -1.5333521 , -1.59560968, -1.96448597, -1.93276554,\n       -1.97795853, -1.83763372, -1.9436764 , -1.85516981, -1.70744097,\n       -1.76798909, -1.57675007, -1.94367641, -1.55364882, -1.63604145,\n       -1.96448597, -1.78706871, -1.84439568, -1.60316779, -1.94521674,\n       -1.73149958, -1.6093063 , -1.67557033, -1.86516796, -1.8768637 ,\n       -1.84730703, -1.44332279, -1.5694093 , -1.84484627, -1.87034945,\n       -1.96994459, -1.52882242, -1.48862244, -1.82375574, -1.56170078,\n       -1.5647307 , -1.94021061, -1.57864698, -1.91121558, -1.94293423,\n       -1.94521674, -1.7142208 , -1.44745215, -1.85645039, -1.56000576,\n       -1.78706871, -1.87479413, -1.92297469, -1.8423934 , -1.68092613,\n       -1.80517562, -1.63017543, -1.77333745, -1.94005326, -1.83004327,\n       -1.93898423, -1.94880216, -1.85993758, -1.8296329 , -1.85910912,\n       -1.93898423, -1.93898423, -1.87479412, -1.86259959, -1.83556189,\n       -1.46083558, -1.83187791, -1.63743591, -1.47984414, -1.46205829,\n       -1.83187791, -1.93711709, -1.9326046 , -1.93898423, -1.9130174 ,\n       -1.42757416, -1.74177867, -1.80204785, -1.58762432, -1.54009348]), 'split1_test_score': array([-1.5521334 , -1.47726454, -1.72518189, -1.53721268, -1.94363217,\n       -1.76213845, -1.8877863 , -1.57346778, -1.81794511, -1.44137597,\n       -1.47928043, -1.88736627, -1.77043806, -1.81957581, -1.78785961,\n       -1.60526593, -1.88463596, -1.61535427, -1.9224953 , -1.54879145,\n       -1.78481147, -1.57164442, -1.55147302, -1.94363217, -1.90326352,\n       -1.86914502, -1.75716295, -1.89442786, -1.8194784 , -1.69026075,\n       -1.72092017, -1.54879145, -1.89442786, -1.26833851, -1.57829442,\n       -1.94363217, -1.75772408, -1.78263471, -1.59852071, -1.89991452,\n       -1.79832031, -1.61730257, -1.60287631, -1.81335499, -1.79567893,\n       -1.76836186, -1.47760299, -1.39692745, -1.80811983, -1.81839712,\n       -1.92912401, -1.49929055, -1.3327342 , -1.51306764, -1.5392716 ,\n       -1.53011128, -1.89085354, -1.5329912 , -1.81747466, -1.90003101,\n       -1.89991452, -1.60490939, -1.44508282, -1.81794511, -1.40894515,\n       -1.75772408, -1.80746274, -1.88781223, -1.77846935, -1.47523178,\n       -1.80111476, -1.51893052, -1.65396018, -1.88206478, -1.76637507,\n       -1.89361437, -1.90010079, -1.80609996, -1.58622186, -1.81888701,\n       -1.89361437, -1.89361437, -1.80747219, -1.76017391, -1.78298812,\n       -1.38832253, -1.77937631, -1.48691371, -1.57089185, -1.51750729,\n       -1.77243542, -1.88736627, -1.89827339, -1.89361437, -1.85684188,\n       -1.63353623, -1.78481147, -1.75724654, -1.61995165, -1.49168964]), 'split2_test_score': array([-1.56950144, -1.73375577, -1.47696293, -1.55314525, -1.92139952,\n       -1.7525214 , -1.88891375, -1.54393114, -1.81015594, -1.69692946,\n       -1.55433875, -1.88776638, -1.75316409, -1.82066883, -1.79949658,\n       -1.53297713, -1.87839605, -1.67952223, -1.89142427, -1.71310915,\n       -1.79380868, -1.54479852, -1.71769667, -1.92139952, -1.87726355,\n       -1.86041406, -1.78669639, -1.88729014, -1.79772385, -1.67915181,\n       -1.457526  , -1.71310915, -1.88729014, -1.52867256, -1.467798  ,\n       -1.92139952, -1.78525742, -1.78663553, -1.61817331, -1.89465931,\n       -1.72061873, -1.63111967, -1.60478059, -1.8524989 , -1.79254712,\n       -1.76757802, -1.71528936, -1.56008746, -1.8524989 , -1.80251093,\n       -1.89023101, -1.46116881, -1.60277364, -1.6844553 , -1.60306178,\n       -1.67471512, -1.87035723, -1.6857501 , -1.82386627, -1.8782519 ,\n       -1.89465931, -1.53100993, -1.67898889, -1.81015594, -1.49533319,\n       -1.78525742, -1.80515231, -1.88891376, -1.76724018, -1.46840538,\n       -1.78873882, -1.67948088, -1.43889777, -1.87560777, -1.77402962,\n       -1.9081862 , -1.880856  , -1.80876481, -1.61165554, -1.82775497,\n       -1.9081862 , -1.9081862 , -1.80515231, -1.77752133, -1.7719134 ,\n       -1.59370575, -1.82838202, -1.51911081, -1.66393905, -1.68427236,\n       -1.82838202, -1.88776638, -1.87534369, -1.9081862 , -1.81218657,\n       -1.50782083, -1.79380868, -1.7579242 , -1.61777342, -1.70200997]), 'split3_test_score': array([-1.99535022, -1.92192123, -1.9467643 , -1.86183858, -1.97628818,\n       -1.90733789, -1.94236995, -1.7537482 , -1.9450707 , -1.90918846,\n       -1.87430068, -1.94624675, -1.91323605, -1.92608975, -1.85393068,\n       -2.07650288, -1.93348055, -1.92091245, -2.48670967, -2.10199886,\n       -1.90008514, -1.87087006, -2.12666913, -1.97628818, -1.94483466,\n       -1.94609881, -1.87300882, -1.9618411 , -1.8833635 , -1.98065073,\n       -1.85522151, -2.10199886, -1.9618411 , -1.83308965, -1.90576659,\n       -1.97628818, -1.87351025, -1.9110684 , -1.95522902, -1.96256908,\n       -1.99676878, -2.16000638, -2.06002384, -1.89227421, -1.94161765,\n       -1.91684324, -1.93403859, -1.78012272, -1.87476591, -1.90812731,\n       -1.97824042, -1.85489408, -1.82223809, -2.51567977, -1.85261277,\n       -2.06331007, -1.96298256, -2.0781172 , -1.95701015, -1.95444605,\n       -1.96256908, -2.07669329, -1.95785016, -1.9450707 , -1.74558699,\n       -1.87351025, -1.93033496, -1.94236995, -1.92035759, -1.91974565,\n       -1.8846591 , -1.93134386, -1.84239554, -1.96069021, -1.91814033,\n       -1.94090241, -1.95015666, -1.93134092, -1.91657896, -1.87848574,\n       -1.94090241, -1.94090241, -1.93033496, -2.07949414, -1.90171449,\n       -1.84347028, -1.87325294, -2.00922708, -1.84966557, -1.86001193,\n       -1.8749232 , -1.94624675, -1.94387313, -1.94090241, -1.95232719,\n       -1.94782324, -1.90008514, -1.86517801, -1.89976393, -1.91009166]), 'split4_test_score': array([-1.42192609, -1.27464148, -1.29959414, -1.29470748, -1.89255166,\n       -1.54703897, -1.87345888, -1.08752118, -1.81490064, -1.15771774,\n       -1.45075327, -1.88392118, -1.70483421, -1.80570526, -1.7622244 ,\n       -1.37104666, -1.88893091, -1.15561197, -1.73135758, -1.36952332,\n       -1.53175125, -1.21034822, -1.39624404, -1.89255166, -1.87771034,\n       -1.8824088 , -1.78845711, -1.87857718, -1.79277035, -1.55538075,\n       -1.28037711, -1.36952332, -1.87857718, -1.25963016, -1.36283497,\n       -1.89255166, -1.75418858, -1.77477824, -1.43011338, -1.87817847,\n       -1.48259649, -1.37153991, -1.31537559, -1.81303049, -1.81036452,\n       -1.77695296, -1.12145447, -1.08797385, -1.80218004, -1.81242127,\n       -1.86191246, -1.3780324 , -1.14013377, -1.62813307, -1.05462752,\n       -1.38606135, -1.84827776, -1.39347348, -1.78746658, -1.85441784,\n       -1.87817847, -1.37159576, -1.13318961, -1.81490061, -1.12708315,\n       -1.75418858, -1.80961813, -1.87345888, -1.78714522, -1.21399521,\n       -1.75328921, -1.15556681, -1.31623181, -1.88744197, -1.77967622,\n       -1.87625174, -1.88137958, -1.81058098, -1.3740074 , -1.79836904,\n       -1.87625174, -1.87625174, -1.80961813, -1.48060285, -1.78337482,\n       -1.1600165 , -1.78411067, -1.30379868, -1.073112  , -1.23079171,\n       -1.78253325, -1.88392118, -1.87381147, -1.87625174, -1.74191269,\n       -1.23645017, -1.53175125, -1.71813609, -1.18502752, -1.17184752]), 'split5_test_score': array([-1.726019  , -1.56053471, -1.8712635 , -1.73850909, -1.91354955,\n       -1.49531036, -1.8773791 , -1.47400465, -1.81575136, -1.51760501,\n       -1.6565377 , -1.87572397, -1.84700118, -1.82238678, -1.7698438 ,\n       -1.88720278, -1.87302393, -1.62434067, -2.19858992, -1.83838976,\n       -1.51654484, -1.52634422, -1.85914714, -1.91354955, -1.87271728,\n       -1.85813574, -1.78465688, -1.88710834, -1.82269104, -1.66154985,\n       -1.50960681, -1.83838976, -1.88710834, -1.44821024, -1.82922739,\n       -1.91210564, -1.79556576, -1.79312295, -1.8552824 , -1.88471641,\n       -1.47782573, -1.85886253, -1.88200526, -1.81068446, -1.81678916,\n       -1.78424903, -1.55202706, -1.32657632, -1.81300862, -1.82577491,\n       -1.90718726, -1.69994535, -1.43597938, -1.8716728 , -1.59092704,\n       -1.73963785, -1.89985645, -1.74844523, -1.85402892, -1.9160749 ,\n       -1.88471641, -1.89279432, -1.57632733, -1.81575136, -1.40473649,\n       -1.79556576, -1.81506763, -1.8773791 , -1.78949988, -1.70605005,\n       -1.8134252 , -1.62522261, -1.50684206, -1.87793178, -1.77890664,\n       -1.87777333, -1.88846366, -1.8114185 , -1.7217621 , -1.80201135,\n       -1.87777333, -1.87777333, -1.81506765, -1.64508155, -1.79806938,\n       -1.41991278, -1.78574034, -1.75668982, -1.61016435, -1.50821507,\n       -1.78755432, -1.87564809, -1.88332516, -1.87777333, -1.84974657,\n       -1.73680394, -1.51654484, -1.78553478, -1.49194139, -1.50275452]), 'split6_test_score': array([-1.38847519, -1.27475452, -1.49471863, -1.21024183, -1.89055968,\n       -1.36270931, -1.85199825, -1.14092915, -1.82385008, -1.17282976,\n       -1.29214012, -1.8471956 , -1.75649112, -1.81995171, -1.76294613,\n       -1.37669468, -1.86716008, -1.21318106, -1.90026917, -1.34684551,\n       -1.33269638, -1.14438712, -1.35626483, -1.89055968, -1.86014501,\n       -1.82623598, -1.71137228, -1.88564299, -1.76258126, -1.45111482,\n       -1.27223585, -1.34684551, -1.88564299, -1.24202415, -1.310149  ,\n       -1.89055968, -1.71482913, -1.79244724, -1.36002619, -1.88433106,\n       -1.30138624, -1.34661803, -1.3387388 , -1.7965887 , -1.73585673,\n       -1.79972965, -1.12733827, -1.16285255, -1.79587471, -1.84864563,\n       -1.87472497, -1.2781931 , -1.16240053, -1.65028952, -1.18629722,\n       -1.30312614, -1.87147633, -1.29931632, -1.80390858, -1.85897798,\n       -1.88433106, -1.37440109, -1.14118264, -1.82388662, -1.13164386,\n       -1.71482913, -1.82428955, -1.85199825, -1.79921974, -1.41919124,\n       -1.7641715 , -1.22060559, -1.28163094, -1.83605859, -1.8025213 ,\n       -1.87237899, -1.90085399, -1.8251037 , -1.26759456, -1.79633461,\n       -1.87237899, -1.87237899, -1.82428955, -1.3671234 , -1.82737003,\n       -1.18150252, -1.76357876, -1.41466457, -1.18394289, -1.20279257,\n       -1.76323663, -1.8471956 , -1.85895606, -1.87237899, -1.76851257,\n       -1.46084089, -1.33269638, -1.73036612, -1.18167558, -1.23187684]), 'split7_test_score': array([-1.8365641 , -2.09975932, -1.95672046, -2.02014862, -1.94431441,\n       -2.12431579, -1.92327999, -1.96198508, -1.90538014, -1.94330001,\n       -1.93373704, -1.91556592, -1.85427523, -1.90588368, -1.84587488,\n       -1.9818246 , -1.92484891, -2.11111445, -2.48247298, -1.98416066,\n       -2.20295316, -2.13815535, -1.9981148 , -1.94431441, -1.9154989 ,\n       -1.91585045, -1.86089178, -1.91800208, -1.87497738, -2.22539881,\n       -2.31673679, -1.98416066, -1.91800208, -2.03707799, -2.08906036,\n       -1.94384833, -1.87124971, -1.89217043, -1.88949227, -1.93622976,\n       -2.1763426 , -1.97628228, -1.97822716, -1.86196889, -1.9342456 ,\n       -1.85467995, -2.00340125, -1.98184817, -1.8660544 , -1.86944068,\n       -1.94426175, -2.04072784, -1.99582686, -2.42232213, -1.97969562,\n       -1.94251491, -1.9275531 , -1.95063806, -1.93519456, -1.93319961,\n       -1.93622976, -1.9818246 , -1.98708662, -1.90538014, -2.08541542,\n       -1.87124971, -1.87339871, -1.92327999, -1.87830625, -2.05434127,\n       -1.9398489 , -2.06823863, -2.26495355, -1.93992388, -1.86485598,\n       -1.90069242, -1.91236086, -1.88150809, -2.13075991, -1.86649701,\n       -1.90069242, -1.90069242, -1.87339871, -2.42715063, -1.85142214,\n       -1.97690063, -1.84710789, -1.99286823, -2.06581459, -2.03431   ,\n       -1.84710789, -1.91556592, -1.91208343, -1.90069242, -1.91397827,\n       -2.13072432, -2.20295316, -1.93593321, -2.22812449, -2.02168615]), 'split8_test_score': array([-1.69419726, -1.9368094 , -1.81716005, -1.68711575, -1.92634998,\n       -1.84493445, -1.8646365 , -1.59321655, -1.84679251, -1.67292429,\n       -1.68229375, -1.8704689 , -1.85222304, -1.84447694, -1.78559508,\n       -1.83679197, -1.90159846, -1.78280315, -2.05942508, -1.85724037,\n       -1.87710905, -1.56931123, -1.87964848, -1.92634998, -1.88086436,\n       -1.91304974, -1.74581046, -1.9002582 , -1.80503877, -1.82591139,\n       -1.81063033, -1.85724037, -1.9002582 , -1.69227151, -1.74485571,\n       -1.92634998, -1.74171907, -1.81873666, -1.80078258, -1.90116721,\n       -1.93789934, -1.87929591, -1.75974958, -1.81474305, -1.78009156,\n       -1.82794484, -1.69733191, -1.57727896, -1.81555214, -1.85492197,\n       -1.91542623, -1.74342558, -1.7481678 , -1.60435546, -1.63993245,\n       -1.8351549 , -1.87753639, -1.85185693, -1.83603843, -1.87672681,\n       -1.90116723, -1.82068226, -1.7406907 , -1.84679251, -1.60088921,\n       -1.74171907, -1.84863959, -1.8646365 , -1.83373501, -1.64751969,\n       -1.81313058, -1.78021208, -1.75359294, -1.86535515, -1.83298683,\n       -1.88771806, -1.90252579, -1.85365202, -1.77992925, -1.81733281,\n       -1.88771806, -1.88771806, -1.84863959, -1.9133499 , -1.83675775,\n       -1.67600681, -1.78182921, -1.66959971, -1.63395594, -1.71714903,\n       -1.78182921, -1.8704689 , -1.88203953, -1.88771806, -1.85985885,\n       -1.64438816, -1.87710905, -1.77960035, -1.59237029, -1.92359863]), 'split9_test_score': array([-1.69622052, -1.36268753, -1.57028895, -1.53878162, -1.92576309,\n       -1.65458614, -1.8867808 , -1.62792129, -1.81267511, -1.42100573,\n       -1.49380695, -1.88372449, -1.8388811 , -1.82717582, -1.82346765,\n       -1.56453822, -1.88584138, -1.4989242 , -1.96969571, -1.63495797,\n       -1.67226049, -1.26716879, -1.66945898, -1.92576309, -1.8979958 ,\n       -1.87325451, -1.78591689, -1.89111563, -1.83040469, -1.71055844,\n       -1.64066672, -1.63495797, -1.89111563, -1.61156956, -1.59584718,\n       -1.92576309, -1.78404411, -1.80060377, -1.4478273 , -1.88918935,\n       -1.71687114, -1.6534597 , -1.51184653, -1.83226135, -1.7887029 ,\n       -1.79646957, -1.53610014, -1.50080642, -1.83713654, -1.8238033 ,\n       -1.89118303, -1.46614356, -1.72165655, -1.53881085, -1.54526263,\n       -1.46166117, -1.87756432, -1.48166993, -1.80529553, -1.87160969,\n       -1.88918949, -1.56453822, -1.51512093, -1.81267511, -1.38360562,\n       -1.78404411, -1.82605284, -1.8867808 , -1.79493889, -1.54348729,\n       -1.78441395, -1.46940754, -1.58625181, -1.8685197 , -1.79438426,\n       -1.89696821, -1.88867724, -1.82359998, -1.61695504, -1.84857648,\n       -1.89696821, -1.89696821, -1.82605284, -1.7452456 , -1.80150161,\n       -1.62487027, -1.80137817, -1.53809506, -1.45876796, -1.49809778,\n       -1.80137817, -1.88372449, -1.89257334, -1.89696821, -1.7835542 ,\n       -1.34318601, -1.67226049, -1.74443993, -1.33925124, -1.30819367]), 'mean_test_score': array([-1.64581581, -1.61629938, -1.67637587, -1.61269946, -1.92988942,\n       -1.71308517, -1.89195782, -1.51743136, -1.8448972 , -1.53647765,\n       -1.59595348, -1.89350965, -1.81143914, -1.84674872, -1.80151013,\n       -1.69368226, -1.89751827, -1.62248786, -2.07497726, -1.69717671,\n       -1.73537991, -1.537638  , -1.71503268, -1.92988942, -1.8963059 ,\n       -1.89225516, -1.79316073, -1.90479399, -1.82441991, -1.74874183,\n       -1.66319104, -1.69717671, -1.90479399, -1.54745332, -1.65198751,\n       -1.92969842, -1.78651568, -1.81965936, -1.6558615 , -1.90761719,\n       -1.73401289, -1.71037933, -1.6729194 , -1.8352573 , -1.82727579,\n       -1.81401161, -1.56079068, -1.49438832, -1.83100373, -1.84343926,\n       -1.91622357, -1.59506437, -1.54505333, -1.82525423, -1.55533894,\n       -1.65010235, -1.89666683, -1.66009054, -1.85314993, -1.898667  ,\n       -1.90761721, -1.69326697, -1.56229718, -1.84490085, -1.49432448,\n       -1.78651568, -1.84148106, -1.89196041, -1.81913055, -1.61288937,\n       -1.81479676, -1.60791839, -1.64180941, -1.89336471, -1.81419195,\n       -1.899347  , -1.90541767, -1.84120065, -1.68350975, -1.83133581,\n       -1.899347  , -1.899347  , -1.84148201, -1.80583429, -1.81906736,\n       -1.53255437, -1.80766342, -1.63284036, -1.55900983, -1.5715206 ,\n       -1.8071258 , -1.89350207, -1.89528838, -1.899347  , -1.84519362,\n       -1.6069148 , -1.73537991, -1.78764071, -1.57435038, -1.58038421]), 'std_test_score': array([0.17477253, 0.27801276, 0.21046374, 0.23076411, 0.02656364,\n       0.20747779, 0.02726894, 0.2477294 , 0.04358196, 0.25654431,\n       0.18567113, 0.02901707, 0.05957644, 0.03927556, 0.03189811,\n       0.23291862, 0.02429014, 0.27524443, 0.23848884, 0.23717857,\n       0.2296148 , 0.2844187 , 0.23893213, 0.02656364, 0.02629612,\n       0.04331505, 0.04832908, 0.02632308, 0.03599056, 0.2078312 ,\n       0.29425115, 0.23717857, 0.02632308, 0.24711903, 0.23209916,\n       0.02663071, 0.04884415, 0.04528765, 0.1985495 , 0.0279175 ,\n       0.25037748, 0.24474157, 0.23860715, 0.02942617, 0.06453497,\n       0.04532307, 0.2792909 , 0.25472848, 0.02643113, 0.03115395,\n       0.03706934, 0.22243156, 0.26950844, 0.33954893, 0.25815775,\n       0.23375606, 0.03419196, 0.23669968, 0.05687071, 0.03425163,\n       0.02791749, 0.23294194, 0.27805957, 0.0435802 , 0.26873224,\n       0.04884415, 0.03846852, 0.02726854, 0.04661736, 0.23341489,\n       0.05362036, 0.27089429, 0.27508026, 0.037792  , 0.04565197,\n       0.02297334, 0.02395463, 0.03864408, 0.23964568, 0.02839669,\n       0.02297334, 0.02297334, 0.03846769, 0.28396255, 0.03752329,\n       0.25052126, 0.03370361, 0.22069727, 0.27455499, 0.24651092,\n       0.03471314, 0.02902173, 0.02559115, 0.02297334, 0.06528116,\n       0.26070986, 0.2296148 , 0.06329597, 0.30093341, 0.2853081 ]), 'rank_test_score': array([ 26,  22,  33,  20,  98,  40,  76,   3,  71,   5,  17,  81,  54,\n        74,  50,  36,  85,  23, 100,  37,  43,   6,  41,  98,  83,  78,\n        49,  91,  61,  45,  31,  37,  92,   8,  28,  97,  47,  60,  29,\n        94,  42,  39,  32,  66,  63,  55,  11,   2,  64,  70,  96,  16,\n         7,  62,   9,  27,  84,  30,  75,  86,  95,  35,  12,  72,   1,\n        46,  68,  77,  59,  21,  57,  19,  25,  79,  56,  90,  93,  67,\n        34,  65,  88,  88,  69,  51,  58,   4,  53,  24,  10,  13,  52,\n        80,  82,  87,  73,  18,  43,  48,  14,  15]), 'split0_train_score': array([-0.04078315, -0.53264906, -0.04563405, -0.367023  , -1.90980216,\n       -1.02538648, -1.86339819, -0.20309221, -1.78856579, -0.70536609,\n       -0.7231713 , -1.85888411, -1.61079055, -1.77283878, -1.76650782,\n       -0.09830978, -1.84702714, -0.06561209, -0.0404226 , -0.4104406 ,\n       -0.78281597, -0.41298847, -0.33221838, -1.90980216, -1.87132283,\n       -1.79650555, -1.72161836, -1.86848658, -1.76996231, -0.8063004 ,\n       -0.37331146, -0.4104406 , -1.86848658, -0.04042596, -0.37369631,\n       -1.90980216, -1.72091722, -1.72824149, -0.43435822, -1.86891486,\n       -0.82099994, -0.33296607, -0.09475993, -1.79568338, -1.66965203,\n       -1.72775384, -0.45948486, -0.04096783, -1.7979657 , -1.81606548,\n       -1.82594841, -0.69414376, -0.54272781, -0.0404226 , -0.27115271,\n       -0.61880891, -1.81809508, -0.54157734, -1.68915895, -1.78552542,\n       -1.86891486, -0.10244203, -0.44711957, -1.78856579, -0.1502339 ,\n       -1.72091722, -1.7721923 , -1.86339819, -1.73539271, -0.13591514,\n       -1.66713685, -0.0924764 , -0.62593211, -1.81433816, -1.74722634,\n       -1.87871276, -1.89129116, -1.78763368, -0.4315496 , -1.80271727,\n       -1.87871276, -1.87871276, -1.7721923 , -0.14554396, -1.78236836,\n       -0.79198388, -1.75798999, -0.04083957, -0.42984117, -0.58621598,\n       -1.75798999, -1.85888411, -1.86593582, -1.87871276, -1.61849215,\n       -0.04042304, -0.78281597, -1.60919906, -0.15026899, -0.67344492]), 'split1_train_score': array([-0.04092456, -0.55937283, -0.05622761, -0.39594704, -1.9114134 ,\n       -1.00940891, -1.85962099, -0.20821694, -1.79759604, -0.67841052,\n       -0.73180673, -1.85877842, -1.62828265, -1.77002289, -1.77511841,\n       -0.11007901, -1.84644413, -0.06246543, -0.04035672, -0.42445282,\n       -0.79390031, -0.41714567, -0.35098932, -1.9114134 , -1.87232786,\n       -1.7957109 , -1.72501144, -1.86574213, -1.7685598 , -0.80366734,\n       -0.38918381, -0.42445282, -1.86574213, -0.04035723, -0.41489046,\n       -1.9114134 , -1.71059738, -1.72682602, -0.43445196, -1.86605405,\n       -0.84055432, -0.33598419, -0.10660196, -1.80329863, -1.67395228,\n       -1.72511901, -0.44371544, -0.04052029, -1.7996803 , -1.81732492,\n       -1.83732845, -0.69777851, -0.53099365, -0.04035672, -0.27472465,\n       -0.65337956, -1.82485051, -0.57818602, -1.71960837, -1.7890097 ,\n       -1.86605405, -0.11007901, -0.42861091, -1.79759604, -0.12669284,\n       -1.71059738, -1.7689635 , -1.85962148, -1.74427416, -0.16406458,\n       -1.67685393, -0.08565427, -0.67490126, -1.81850962, -1.75585875,\n       -1.88219191, -1.89160357, -1.7959701 , -0.45355463, -1.8125065 ,\n       -1.88219191, -1.88219191, -1.76896349, -0.1705043 , -1.78468699,\n       -0.77712471, -1.76600854, -0.04119162, -0.43627069, -0.57109694,\n       -1.76095681, -1.85877842, -1.86561115, -1.88219191, -1.63018635,\n       -0.04035744, -0.79390031, -1.61980772, -0.12824002, -0.64555487]), 'split2_train_score': array([-0.04118327, -0.55291855, -0.04873552, -0.36078499, -1.91045653,\n       -1.0394207 , -1.86234863, -0.21109286, -1.79088178, -0.67376421,\n       -0.70976167, -1.86146557, -1.62328343, -1.77343702, -1.77111313,\n       -0.09927   , -1.85550053, -0.07964082, -0.04035672, -0.40272208,\n       -0.79082779, -0.38957251, -0.32747719, -1.91045653, -1.87354568,\n       -1.79534973, -1.72340279, -1.8674238 , -1.77059976, -0.77964271,\n       -0.36862441, -0.40272208, -1.8674238 , -0.04035882, -0.37024913,\n       -1.91045653, -1.71455979, -1.72862274, -0.43532237, -1.87138776,\n       -0.81326796, -0.32443348, -0.10464344, -1.80170713, -1.67660145,\n       -1.71898521, -0.44783309, -0.04086514, -1.80170713, -1.81387733,\n       -1.83141723, -0.68457857, -0.52897342, -0.04035672, -0.29557998,\n       -0.59557946, -1.82617191, -0.52060096, -1.700497  , -1.79135808,\n       -1.87138776, -0.09927   , -0.42817324, -1.79088178, -0.14940148,\n       -1.71455979, -1.76556175, -1.86234863, -1.7369197 , -0.15395395,\n       -1.67491537, -0.11936818, -0.65915585, -1.82060487, -1.74617773,\n       -1.88404312, -1.89138036, -1.78755049, -0.47971259, -1.80712554,\n       -1.88404312, -1.88404312, -1.76556175, -0.17389587, -1.77885288,\n       -0.77858428, -1.76478755, -0.04154211, -0.47204391, -0.58934927,\n       -1.76478755, -1.86146557, -1.86800503, -1.88404312, -1.62428176,\n       -0.04035718, -0.79082779, -1.60990396, -0.12506214, -0.65840429]), 'split3_train_score': array([-0.04075777, -0.55246058, -0.04754116, -0.37972556, -1.89878432,\n       -1.01466317, -1.85465741, -0.24422185, -1.77660101, -0.67427046,\n       -0.72070634, -1.85229987, -1.61364007, -1.7621127 , -1.75443977,\n       -0.09141186, -1.83988729, -0.07253488, -0.04035672, -0.38358806,\n       -0.81007407, -0.42201059, -0.31312642, -1.89878432, -1.86561921,\n       -1.79714044, -1.70877446, -1.85757752, -1.7506041 , -0.81606656,\n       -0.383675  , -0.38358806, -1.85757752, -0.04035724, -0.38199504,\n       -1.89878432, -1.69532816, -1.71576123, -0.39962121, -1.86224684,\n       -0.85886925, -0.31012099, -0.10112752, -1.78223491, -1.6600499 ,\n       -1.70611199, -0.43819275, -0.04049058, -1.78676529, -1.80278237,\n       -1.82472916, -0.66078122, -0.53631355, -0.04035672, -0.27775501,\n       -0.60218018, -1.82193541, -0.53806056, -1.69839997, -1.78787827,\n       -1.86224684, -0.09141186, -0.43381213, -1.77660101, -0.12374766,\n       -1.69532816, -1.75323116, -1.85465741, -1.7208878 , -0.15110452,\n       -1.66432173, -0.09552912, -0.67831361, -1.80964031, -1.72665047,\n       -1.87207531, -1.88345147, -1.77009143, -0.44486236, -1.79410651,\n       -1.87207531, -1.87207531, -1.75323116, -0.15895524, -1.76472073,\n       -0.76726583, -1.74191148, -0.04128983, -0.45171423, -0.56998968,\n       -1.7414073 , -1.85229987, -1.85832817, -1.87207531, -1.61718189,\n       -0.04035685, -0.81007407, -1.60469475, -0.11265426, -0.63973831]), 'split4_train_score': array([-0.04073576, -0.57297861, -0.05447561, -0.39475929, -1.90603733,\n       -1.03760043, -1.86489029, -0.25283188, -1.79386878, -0.72319419,\n       -0.7331151 , -1.86139914, -1.62252202, -1.77705312, -1.77563333,\n       -0.11233033, -1.8563762 , -0.07365867, -0.04035672, -0.43236021,\n       -0.81447314, -0.43907355, -0.33635059, -1.90603733, -1.8753174 ,\n       -1.79635805, -1.73046048, -1.86989716, -1.76724614, -0.81197767,\n       -0.39848891, -0.43236021, -1.86989716, -0.04035829, -0.41959982,\n       -1.90603733, -1.71887231, -1.73304783, -0.42201873, -1.87319081,\n       -0.85400465, -0.33623827, -0.12016307, -1.80287148, -1.67422061,\n       -1.726782  , -0.46631582, -0.04077402, -1.80381824, -1.81809524,\n       -1.83627549, -0.71683219, -0.56211338, -0.04035672, -0.28104006,\n       -0.62126072, -1.82772433, -0.56655691, -1.70832411, -1.79241482,\n       -1.87319081, -0.11233033, -0.46349846, -1.79386878, -0.14234953,\n       -1.71887231, -1.77155657, -1.86489029, -1.73702698, -0.16177738,\n       -1.67270098, -0.10271294, -0.6473711 , -1.81930589, -1.74781129,\n       -1.88725147, -1.89387038, -1.78890883, -0.41428909, -1.81205085,\n       -1.88725147, -1.88725147, -1.77155657, -0.16777467, -1.78531755,\n       -0.8038167 , -1.76453517, -0.0413221 , -0.51003471, -0.61062396,\n       -1.76418278, -1.86139914, -1.8662994 , -1.88725147, -1.6341008 ,\n       -0.04035761, -0.81447314, -1.61109856, -0.15525666, -0.68772474]), 'split5_train_score': array([-0.04098035, -0.57279682, -0.04736107, -0.3635802 , -1.90926855,\n       -1.00027119, -1.86354451, -0.25637964, -1.791191  , -0.69431347,\n       -0.71239692, -1.86312174, -1.60407225, -1.77468013, -1.77779559,\n       -0.09646141, -1.85314456, -0.06844614, -0.04035672, -0.40591453,\n       -0.78623968, -0.37170036, -0.32917411, -1.90926855, -1.87483552,\n       -1.79854597, -1.72338013, -1.86702364, -1.77102096, -0.78126022,\n       -0.40251496, -0.40591453, -1.86702364, -0.04035855, -0.35260308,\n       -1.90866577, -1.71314887, -1.73117792, -0.37282399, -1.87084124,\n       -0.8148781 , -0.32162395, -0.09376458, -1.80038086, -1.66542874,\n       -1.71969182, -0.45619682, -0.04091933, -1.79911619, -1.81763326,\n       -1.83600791, -0.63391826, -0.56265583, -0.04035672, -0.27593773,\n       -0.60220285, -1.81958269, -0.52869544, -1.70953738, -1.79241482,\n       -1.87084124, -0.09651947, -0.43216597, -1.791191  , -0.1401898 ,\n       -1.71314887, -1.76540454, -1.86354451, -1.72685894, -0.14183583,\n       -1.66715083, -0.09443176, -0.67044459, -1.81469036, -1.74524854,\n       -1.88286923, -1.89281214, -1.7865911 , -0.4325593 , -1.81230938,\n       -1.88286923, -1.88286923, -1.76540454, -0.15904988, -1.78649222,\n       -0.80724614, -1.76224898, -0.04078288, -0.42865746, -0.59720604,\n       -1.76053609, -1.86312174, -1.86880638, -1.88286923, -1.62644037,\n       -0.04035678, -0.78623968, -1.59876735, -0.10958197, -0.6608745 ]), 'split6_train_score': array([-0.04054821, -0.58085035, -0.04818734, -0.37838005, -1.91392798,\n       -1.03452111, -1.863488  , -0.2520474 , -1.79112352, -0.71304056,\n       -0.72944472, -1.86390072, -1.62175443, -1.77645351, -1.77689562,\n       -0.10096007, -1.85434548, -0.07428047, -0.04035672, -0.43015902,\n       -0.78933636, -0.3963953 , -0.35175651, -1.91392798, -1.87210973,\n       -1.80002264, -1.72733159, -1.86948091, -1.76922665, -0.79585928,\n       -0.38185662, -0.43015902, -1.86948091, -0.04035961, -0.3999406 ,\n       -1.91392798, -1.71460636, -1.73543328, -0.41390059, -1.87028325,\n       -0.85131844, -0.34029067, -0.11067332, -1.80606884, -1.67633594,\n       -1.72881146, -0.47585462, -0.04065039, -1.80727494, -1.82102678,\n       -1.83414998, -0.69662573, -0.54831473, -0.04035672, -0.29284547,\n       -0.62817825, -1.82687865, -0.56508777, -1.70700185, -1.79241482,\n       -1.87028325, -0.09820626, -0.45226425, -1.79112397, -0.14222762,\n       -1.71460636, -1.77248511, -1.863488  , -1.73456721, -0.15000355,\n       -1.67239422, -0.10324201, -0.66599448, -1.82179799, -1.7512143 ,\n       -1.88735892, -1.89519841, -1.79121022, -0.43460013, -1.81198403,\n       -1.88735892, -1.88735892, -1.77248511, -0.16785992, -1.79133561,\n       -0.79515448, -1.77001877, -0.04096939, -0.48463072, -0.62241068,\n       -1.76971453, -1.86390072, -1.86915179, -1.88735892, -1.62037209,\n       -0.04035701, -0.78933636, -1.61236844, -0.1258985 , -0.68705558]), 'split7_train_score': array([-0.04078997, -0.50920823, -0.04710834, -0.35643568, -1.90831808,\n       -0.99625895, -1.85817797, -0.18591323, -1.78193528, -0.63319046,\n       -0.67627542, -1.85556445, -1.61550044, -1.77121931, -1.76431324,\n       -0.09164455, -1.84487639, -0.060853  , -0.04035672, -0.39192933,\n       -0.77168862, -0.37604264, -0.32398643, -1.90831808, -1.87077831,\n       -1.80062723, -1.70884828, -1.8681427 , -1.75852572, -0.77544334,\n       -0.35343179, -0.39192933, -1.8681427 , -0.04035757, -0.34884884,\n       -1.90801558, -1.69634357, -1.72677095, -0.39940288, -1.8693219 ,\n       -0.80005118, -0.3137967 , -0.10194653, -1.79303786, -1.66016631,\n       -1.72503777, -0.41621375, -0.04055562, -1.79249038, -1.80872071,\n       -1.83053137, -0.62560563, -0.49269733, -0.04035672, -0.24829898,\n       -0.55696673, -1.82424818, -0.48826343, -1.68608715, -1.79176534,\n       -1.8693219 , -0.09164455, -0.39975234, -1.78193528, -0.13219101,\n       -1.69634357, -1.76945212, -1.85817797, -1.72948941, -0.15860822,\n       -1.6667788 , -0.08846254, -0.59409754, -1.81182924, -1.74178658,\n       -1.88077625, -1.88877037, -1.78280613, -0.38454568, -1.80139429,\n       -1.88077625, -1.88077625, -1.76945212, -0.15067684, -1.77381848,\n       -0.73193144, -1.75354024, -0.04132539, -0.41937821, -0.54782119,\n       -1.75354024, -1.85556445, -1.86324988, -1.88077625, -1.62326508,\n       -0.0403569 , -0.77168862, -1.60253878, -0.13269185, -0.61351591]), 'split8_train_score': array([-6.61620612e-03, -5.19716418e-01, -3.01298078e-02, -3.32040410e-01,\n       -1.90917831e+00, -1.01298168e+00, -1.86316886e+00, -2.17029044e-01,\n       -1.78519692e+00, -6.66126208e-01, -7.02825671e-01, -1.86142565e+00,\n       -1.60585508e+00, -1.76703901e+00, -1.77293461e+00, -9.01226999e-02,\n       -1.84826524e+00, -6.95058870e-02, -1.39705704e-09, -3.98126251e-01,\n       -7.84781956e-01, -4.38273326e-01, -3.22253343e-01, -1.90917831e+00,\n       -1.87276833e+00, -1.79553594e+00, -1.72381746e+00, -1.86656728e+00,\n       -1.76835710e+00, -7.99292208e-01, -3.73201597e-01, -3.98126251e-01,\n       -1.86656728e+00, -2.13868983e-04, -3.70925541e-01, -1.90917831e+00,\n       -1.71099570e+00, -1.72120875e+00, -3.99274637e-01, -1.86654163e+00,\n       -8.32217668e-01, -3.12205180e-01, -1.00393667e-01, -1.80591341e+00,\n       -1.66685306e+00, -1.71919547e+00, -4.23591010e-01, -5.12828746e-03,\n       -1.80562487e+00, -1.80938900e+00, -1.82588455e+00, -6.32375591e-01,\n       -5.08466020e-01, -1.82908805e-07, -2.83630969e-01, -5.83543929e-01,\n       -1.82183320e+00, -5.03529555e-01, -1.69123926e+00, -1.79168291e+00,\n       -1.86654163e+00, -9.73206596e-02, -4.14112735e-01, -1.78519692e+00,\n       -1.24328475e-01, -1.71099570e+00, -1.76546082e+00, -1.86316886e+00,\n       -1.72196597e+00, -1.42144758e-01, -1.66810073e+00, -9.78873076e-02,\n       -6.42083343e-01, -1.81588056e+00, -1.73994813e+00, -1.88699273e+00,\n       -1.88895905e+00, -1.78227912e+00, -4.86609117e-01, -1.80866652e+00,\n       -1.88699273e+00, -1.88699273e+00, -1.76546082e+00, -1.62037405e-01,\n       -1.77462454e+00, -7.58225678e-01, -1.76888618e+00, -9.52798047e-03,\n       -4.72294854e-01, -5.55791056e-01, -1.76888618e+00, -1.86142565e+00,\n       -1.86948768e+00, -1.88699273e+00, -1.61569953e+00, -4.76784076e-04,\n       -7.84781956e-01, -1.60188270e+00, -1.31560292e-01, -6.23150326e-01]), 'split9_train_score': array([-4.81487782e-03, -5.51863659e-01, -3.20713575e-02, -3.59064131e-01,\n       -1.91117768e+00, -1.03106445e+00, -1.85676840e+00, -2.25900239e-01,\n       -1.79702417e+00, -6.77600150e-01, -7.17078987e-01, -1.85613437e+00,\n       -1.63061175e+00, -1.77824573e+00, -1.77474808e+00, -9.47436044e-02,\n       -1.84777942e+00, -5.53821363e-02, -1.53932566e-09, -4.04614819e-01,\n       -8.11669243e-01, -4.26959092e-01, -3.28406781e-01, -1.91117768e+00,\n       -1.87236403e+00, -1.80287284e+00, -1.71768649e+00, -1.86932900e+00,\n       -1.75842397e+00, -8.22269302e-01, -4.40575558e-01, -4.04614819e-01,\n       -1.86932900e+00, -3.12306405e-04, -3.93833521e-01, -1.91117768e+00,\n       -1.70208524e+00, -1.73545636e+00, -4.27040527e-01, -1.87304653e+00,\n       -8.38378223e-01, -3.22232897e-01, -1.34416777e-01, -1.80426780e+00,\n       -1.66163119e+00, -1.72726610e+00, -4.36985356e-01, -6.07857591e-03,\n       -1.80668043e+00, -1.81298618e+00, -1.83669661e+00, -7.02329341e-01,\n       -5.18619566e-01, -3.04967569e-07, -2.71632450e-01, -6.01161964e-01,\n       -1.82585899e+00, -5.30806221e-01, -1.71222267e+00, -1.79168366e+00,\n       -1.87304664e+00, -9.47436044e-02, -4.23507565e-01, -1.79702417e+00,\n       -1.51296704e-01, -1.70208524e+00, -1.77131783e+00, -1.85676840e+00,\n       -1.73237576e+00, -1.55884820e-01, -1.66440342e+00, -9.08984390e-02,\n       -6.68370038e-01, -1.81284165e+00, -1.74768025e+00, -1.88767512e+00,\n       -1.89041251e+00, -1.78791768e+00, -4.71932270e-01, -1.81112674e+00,\n       -1.88767512e+00, -1.88767512e+00, -1.77131783e+00, -1.54004634e-01,\n       -1.78411280e+00, -7.56025014e-01, -1.76517522e+00, -7.64524019e-03,\n       -4.61590613e-01, -5.98293915e-01, -1.76517522e+00, -1.85613437e+00,\n       -1.86273306e+00, -1.88767512e+00, -1.62952934e+00, -8.58465172e-05,\n       -8.11669243e-01, -1.60581425e+00, -1.46847168e-01, -6.57281469e-01]), 'mean_train_score': array([-0.03381341, -0.55048151, -0.04574719, -0.36877404, -1.90883643,\n       -1.02015771, -1.86100633, -0.22567253, -1.78939843, -0.68392763,\n       -0.71565829, -1.8592974 , -1.61763127, -1.77231022, -1.77094996,\n       -0.09853333, -1.84936464, -0.06823795, -0.03229196, -0.40843077,\n       -0.79358071, -0.40901615, -0.33157391, -1.90883643, -1.87209889,\n       -1.79786693, -1.72103315, -1.86696707, -1.76525265, -0.7991779 ,\n       -0.38648641, -0.40843077, -1.86696707, -0.03234594, -0.38265823,\n       -1.90874591, -1.70974546, -1.72825466, -0.41382151, -1.86918289,\n       -0.83245397, -0.32498924, -0.10684908, -1.79954643, -1.66848915,\n       -1.72247547, -0.44643835, -0.03369501, -1.80011235, -1.81379013,\n       -1.83189691, -0.67449688, -0.53318753, -0.03229201, -0.2772598 ,\n       -0.60632626, -1.82371789, -0.53613642, -1.70220767, -1.79061478,\n       -1.8691829 , -0.09939678, -0.43230172, -1.78939847, -0.1382659 ,\n       -1.70974546, -1.76756257, -1.86100637, -1.73197586, -0.15152927,\n       -1.66947569, -0.0970663 , -0.65266639, -1.81594387, -1.74496024,\n       -1.88299468, -1.89077494, -1.78609588, -0.44342148, -1.80739876,\n       -1.88299468, -1.88299468, -1.76756257, -0.16103027, -1.78063302,\n       -0.77673581, -1.76151021, -0.03464361, -0.45664566, -0.58487987,\n       -1.76071767, -1.8592974 , -1.86576084, -1.88299468, -1.62395494,\n       -0.03234854, -0.79358071, -1.60760756, -0.13180618, -0.65467449]), 'std_train_score': array([0.01405561, 0.02232745, 0.00799705, 0.01820868, 0.00388659,\n       0.0148046 , 0.00328745, 0.02324428, 0.00625736, 0.02472869,\n       0.01612643, 0.00350441, 0.00862904, 0.00469313, 0.0069013 ,\n       0.00719518, 0.00503574, 0.00689973, 0.01614599, 0.01534472,\n       0.01337111, 0.02312826, 0.01151023, 0.00388659, 0.00254646,\n       0.00242617, 0.0068814 , 0.0033795 , 0.00656391, 0.01526493,\n       0.02263835, 0.01534472, 0.0033795 , 0.01604146, 0.02290404,\n       0.00388872, 0.00845538, 0.00587389, 0.01963048, 0.00323697,\n       0.01864668, 0.01036434, 0.01171574, 0.00702029, 0.00625295,\n       0.00649237, 0.01768645, 0.01404828, 0.00618977, 0.00519844,\n       0.00467645, 0.03175781, 0.02126056, 0.01614589, 0.01244804,\n       0.02490408, 0.00306035, 0.02691695, 0.01041669, 0.00223263,\n       0.00323698, 0.00670963, 0.01758383, 0.00625737, 0.01024197,\n       0.00845538, 0.00547467, 0.00328743, 0.00689392, 0.00874906,\n       0.00418663, 0.00916921, 0.02493925, 0.003799  , 0.00741997,\n       0.00468301, 0.00309352, 0.00648958, 0.02958317, 0.0058575 ,\n       0.00468301, 0.00468301, 0.00547467, 0.00867775, 0.00735721,\n       0.02260143, 0.0080058 , 0.01303721, 0.02733158, 0.02248587,\n       0.00792493, 0.00350441, 0.00332806, 0.00468301, 0.0057992 ,\n       0.01603386, 0.01337111, 0.00582941, 0.01439336, 0.02355077])}"}]