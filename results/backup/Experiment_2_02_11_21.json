[{"dataset_variant": "only_totals", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1, 2]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "5", "n_split_outer_kcv": 10}, "best_params": "{'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}", "mean_test_score": 0.7802521008403361, "cv_results": "{'mean_fit_time': array([2.87497187e-01, 2.90599871e-01, 3.11299229e-01, 3.95300341e-01,\n       3.25299215e-01, 1.00026131e-03, 3.59899402e-01, 9.21803641e-01,\n       9.51291347e-01, 4.51199770e-01, 4.63299537e-01, 1.00040436e-03,\n       4.17999601e-01, 4.10199928e-01, 4.28399611e-01, 4.38898921e-01,\n       4.74500442e-01, 1.00014210e-03, 4.57699323e-01, 4.23600221e-01,\n       4.57199383e-01, 4.52799153e-01, 6.39299250e-01, 1.00028515e-03,\n       7.71399355e-01, 6.64498496e-01, 5.61698627e-01, 5.52099204e-01,\n       6.78199697e-01, 1.00018978e-03, 6.54299116e-01, 5.49899340e-01,\n       5.59799576e-01, 5.55099416e-01, 6.58409944e+00, 8.99720192e-04,\n       5.63400126e-01, 6.17100096e-01, 7.10800338e-01, 7.16600347e-01,\n       8.07300162e-01, 8.50700212e-01, 7.92899084e-01, 8.30000329e-01,\n       9.38300204e-01, 9.15800381e-01, 1.02239995e+00, 8.48699784e-01]), 'std_fit_time': array([3.92865632e-02, 1.34916984e-02, 2.16745374e-02, 2.54674601e-02,\n       1.16448062e-02, 7.92181383e-07, 2.21064421e-02, 3.38965649e-01,\n       3.08503388e-01, 2.92528291e-02, 1.46159966e-02, 4.47288708e-04,\n       1.71691546e-02, 2.06284776e-02, 2.29401116e-02, 1.81297738e-02,\n       4.89247665e-02, 6.52500734e-07, 3.56766423e-02, 3.52542434e-02,\n       4.00499321e-02, 3.28264578e-02, 7.04293285e-02, 4.79808135e-07,\n       9.25588149e-02, 9.53108409e-02, 4.52997427e-02, 4.16471954e-02,\n       4.18560187e-02, 4.57987135e-07, 7.64417050e-02, 2.98748451e-02,\n       4.56717423e-02, 2.96058180e-02, 8.85532508e+00, 2.99907375e-04,\n       1.11281479e-02, 6.02617299e-02, 1.45245765e-02, 1.57558194e-02,\n       2.12132545e-02, 3.93629220e-02, 2.29792491e-02, 5.69103115e-02,\n       1.48324638e-02, 2.46365561e-02, 9.37094106e-02, 1.28440187e-01]), 'mean_score_time': array([0.00419943, 0.00270076, 0.00310035, 0.00300059, 0.00330112,\n       0.        , 0.00350125, 0.00710077, 0.00440111, 0.00300012,\n       0.00310078, 0.        , 0.00300083, 0.00300019, 0.00289984,\n       0.00300043, 0.00340064, 0.        , 0.00310068, 0.00330024,\n       0.00280011, 0.0031013 , 0.00330057, 0.        , 0.00360038,\n       0.00320013, 0.00280108, 0.00290074, 0.00310061, 0.        ,\n       0.00290072, 0.00280056, 0.00300028, 0.00300062, 0.01320086,\n       0.        , 0.03840015, 0.04649975, 0.04689968, 0.05049953,\n       0.05640006, 0.05340011, 0.05430021, 0.05939996, 0.06180027,\n       0.06250012, 0.07250059, 0.04960012]), 'std_score_time': array([2.26701798e-03, 4.58382270e-04, 1.04492811e-03, 6.33051876e-04,\n       1.26919654e-03, 0.00000000e+00, 1.62775707e-03, 1.81368836e-03,\n       2.33460438e-03, 4.47182977e-04, 5.38469279e-04, 0.00000000e+00,\n       4.47129064e-04, 4.47501525e-04, 2.99996667e-04, 4.47448718e-04,\n       1.20025489e-03, 0.00000000e+00, 5.38885767e-04, 6.40639602e-04,\n       5.99822408e-04, 3.00903871e-04, 4.57799721e-04, 0.00000000e+00,\n       6.62587558e-04, 3.99137483e-04, 4.00379369e-04, 5.38433576e-04,\n       2.99939905e-04, 0.00000000e+00, 5.38828428e-04, 3.99757736e-04,\n       4.47716987e-04, 7.63311891e-07, 1.94925147e-02, 0.00000000e+00,\n       6.63521540e-04, 6.85967036e-03, 7.39525794e-03, 8.05300266e-03,\n       7.65743661e-03, 9.10182993e-03, 1.07614983e-02, 8.08933571e-03,\n       8.90845390e-03, 1.30023843e-02, 2.65263088e-02, 1.59326634e-02]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --, --, --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 5, 5, 10, 10, 10, 10, 15,\n                   15, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150, 150, 150, 150, 150, 150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=10, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.68571429, 0.71428571, 0.71428571, 0.71428571, 0.71428571,\n              nan, 0.71428571, 0.74285714, 0.71428571, 0.74285714,\n       0.68571429,        nan, 0.71428571, 0.74285714, 0.71428571,\n       0.71428571, 0.68571429,        nan, 0.65714286, 0.71428571,\n       0.71428571, 0.71428571, 0.68571429,        nan, 0.65714286,\n       0.74285714, 0.74285714, 0.65714286, 0.65714286,        nan,\n       0.65714286, 0.74285714, 0.74285714, 0.65714286, 0.65714286,\n              nan, 0.65714286, 0.68571429, 0.65714286, 0.68571429,\n       0.65714286, 0.65714286, 0.68571429, 0.71428571, 0.65714286,\n       0.65714286, 0.65714286, 0.71428571]), 'split1_test_score': array([0.85294118, 0.85294118, 0.88235294, 0.85294118, 0.88235294,\n              nan, 0.88235294, 0.88235294, 0.88235294, 0.85294118,\n       0.91176471,        nan, 0.85294118, 0.88235294, 0.88235294,\n       0.82352941, 0.91176471,        nan, 0.73529412, 0.73529412,\n       0.82352941, 0.82352941, 0.79411765,        nan, 0.73529412,\n       0.73529412, 0.73529412, 0.82352941, 0.79411765,        nan,\n       0.73529412, 0.73529412, 0.73529412, 0.82352941, 0.79411765,\n              nan, 0.73529412, 0.91176471, 0.76470588, 0.82352941,\n       0.76470588, 0.82352941, 0.82352941, 0.85294118, 0.76470588,\n       0.85294118, 0.82352941, 0.85294118]), 'split2_test_score': array([0.64705882, 0.64705882, 0.64705882, 0.64705882, 0.5       ,\n              nan, 0.61764706, 0.61764706, 0.64705882, 0.58823529,\n       0.58823529,        nan, 0.55882353, 0.55882353, 0.64705882,\n       0.58823529, 0.58823529,        nan, 0.70588235, 0.70588235,\n       0.70588235, 0.67647059, 0.61764706,        nan, 0.73529412,\n       0.67647059, 0.67647059, 0.58823529, 0.58823529,        nan,\n       0.73529412, 0.67647059, 0.67647059, 0.58823529, 0.58823529,\n              nan, 0.70588235, 0.64705882, 0.70588235, 0.70588235,\n       0.61764706, 0.67647059, 0.73529412, 0.64705882, 0.61764706,\n       0.67647059, 0.70588235, 0.64705882]), 'split3_test_score': array([0.76470588, 0.79411765, 0.79411765, 0.76470588, 0.70588235,\n              nan, 0.70588235, 0.70588235, 0.76470588, 0.76470588,\n       0.73529412,        nan, 0.67647059, 0.70588235, 0.76470588,\n       0.73529412, 0.73529412,        nan, 0.79411765, 0.79411765,\n       0.79411765, 0.76470588, 0.76470588,        nan, 0.76470588,\n       0.79411765, 0.79411765, 0.76470588, 0.76470588,        nan,\n       0.76470588, 0.79411765, 0.79411765, 0.76470588, 0.76470588,\n              nan, 0.79411765, 0.70588235, 0.79411765, 0.73529412,\n       0.76470588, 0.73529412, 0.73529412, 0.76470588, 0.73529412,\n       0.70588235, 0.73529412, 0.76470588]), 'split4_test_score': array([0.79411765, 0.82352941, 0.76470588, 0.79411765, 0.76470588,\n              nan, 0.79411765, 0.85294118, 0.79411765, 0.76470588,\n       0.76470588,        nan, 0.79411765, 0.79411765, 0.79411765,\n       0.79411765, 0.76470588,        nan, 0.76470588, 0.76470588,\n       0.76470588, 0.79411765, 0.82352941,        nan, 0.76470588,\n       0.76470588, 0.73529412, 0.82352941, 0.85294118,        nan,\n       0.76470588, 0.76470588, 0.73529412, 0.82352941, 0.85294118,\n              nan, 0.82352941, 0.79411765, 0.82352941, 0.82352941,\n       0.79411765, 0.82352941, 0.82352941, 0.88235294, 0.82352941,\n       0.79411765, 0.82352941, 0.85294118]), 'split5_test_score': array([0.70588235, 0.61764706, 0.61764706, 0.73529412, 0.61764706,\n              nan, 0.70588235, 0.61764706, 0.64705882, 0.67647059,\n       0.70588235,        nan, 0.70588235, 0.61764706, 0.64705882,\n       0.67647059, 0.70588235,        nan, 0.64705882, 0.64705882,\n       0.58823529, 0.76470588, 0.73529412,        nan, 0.64705882,\n       0.64705882, 0.58823529, 0.73529412, 0.73529412,        nan,\n       0.64705882, 0.64705882, 0.58823529, 0.73529412, 0.73529412,\n              nan, 0.67647059, 0.73529412, 0.64705882, 0.70588235,\n       0.73529412, 0.73529412, 0.70588235, 0.79411765, 0.73529412,\n       0.70588235, 0.73529412, 0.73529412]), 'split6_test_score': array([0.76470588, 0.82352941, 0.79411765, 0.73529412, 0.76470588,\n              nan, 0.79411765, 0.82352941, 0.82352941, 0.76470588,\n       0.73529412,        nan, 0.79411765, 0.82352941, 0.82352941,\n       0.76470588, 0.73529412,        nan, 0.70588235, 0.73529412,\n       0.73529412, 0.61764706, 0.61764706,        nan, 0.70588235,\n       0.73529412, 0.73529412, 0.58823529, 0.61764706,        nan,\n       0.70588235, 0.73529412, 0.73529412, 0.58823529, 0.61764706,\n              nan, 0.70588235, 0.73529412, 0.70588235, 0.73529412,\n       0.73529412, 0.73529412, 0.73529412, 0.76470588, 0.73529412,\n       0.73529412, 0.73529412, 0.76470588]), 'split7_test_score': array([0.76470588, 0.76470588, 0.73529412, 0.67647059, 0.64705882,\n              nan, 0.76470588, 0.67647059, 0.82352941, 0.70588235,\n       0.61764706,        nan, 0.73529412, 0.70588235, 0.82352941,\n       0.70588235, 0.61764706,        nan, 0.79411765, 0.79411765,\n       0.79411765, 0.79411765, 0.79411765,        nan, 0.79411765,\n       0.76470588, 0.79411765, 0.79411765, 0.79411765,        nan,\n       0.79411765, 0.76470588, 0.79411765, 0.79411765, 0.79411765,\n              nan, 0.67647059, 0.79411765, 0.70588235, 0.70588235,\n       0.64705882, 0.73529412, 0.58823529, 0.67647059, 0.67647059,\n       0.73529412, 0.55882353, 0.61764706]), 'split8_test_score': array([0.88235294, 0.76470588, 0.79411765, 0.88235294, 0.91176471,\n              nan, 0.85294118, 0.79411765, 0.73529412, 0.88235294,\n       0.88235294,        nan, 0.88235294, 0.79411765, 0.79411765,\n       0.88235294, 0.88235294,        nan, 0.76470588, 0.73529412,\n       0.70588235, 0.82352941, 0.85294118,        nan, 0.76470588,\n       0.73529412, 0.64705882, 0.82352941, 0.88235294,        nan,\n       0.76470588, 0.73529412, 0.64705882, 0.82352941, 0.88235294,\n              nan, 0.79411765, 0.85294118, 0.79411765, 0.91176471,\n       0.76470588, 0.91176471, 0.79411765, 0.88235294, 0.73529412,\n       0.88235294, 0.85294118, 0.94117647]), 'split9_test_score': array([0.88235294, 0.82352941, 0.85294118, 0.82352941, 0.82352941,\n              nan, 0.88235294, 0.85294118, 0.85294118, 0.85294118,\n       0.88235294,        nan, 0.85294118, 0.82352941, 0.88235294,\n       0.85294118, 0.85294118,        nan, 0.82352941, 0.76470588,\n       0.76470588, 0.85294118, 0.79411765,        nan, 0.82352941,\n       0.76470588, 0.76470588, 0.85294118, 0.79411765,        nan,\n       0.82352941, 0.76470588, 0.76470588, 0.85294118, 0.79411765,\n              nan, 0.82352941, 0.82352941, 0.85294118, 0.82352941,\n       0.79411765, 0.88235294, 0.85294118, 0.82352941, 0.79411765,\n       0.88235294, 0.82352941, 0.82352941]), 'mean_test_score': array([0.77445378, 0.76260504, 0.75966387, 0.76260504, 0.73319328,\n              nan, 0.77142857, 0.75663866, 0.76848739, 0.75957983,\n       0.75092437,        nan, 0.75672269, 0.74487395, 0.77731092,\n       0.75378151, 0.74798319,        nan, 0.7392437 , 0.73907563,\n       0.73907563, 0.76260504, 0.74798319,        nan, 0.7392437 ,\n       0.73605042, 0.72134454, 0.74512605, 0.74806723,        nan,\n       0.7392437 , 0.73605042, 0.72134454, 0.74512605, 0.74806723,\n              nan, 0.7392437 , 0.76857143, 0.74512605, 0.76563025,\n       0.72747899, 0.77159664, 0.74798319, 0.7802521 , 0.72747899,\n       0.76277311, 0.74512605, 0.77142857]), 'std_test_score': array([0.07676111, 0.07549591, 0.0792727 , 0.0719764 , 0.11854772,\n              nan, 0.08236152, 0.09384128, 0.0776902 , 0.08486101,\n       0.10564412,        nan, 0.09356549, 0.09485247, 0.08060221,\n       0.08399579, 0.10230067,        nan, 0.0564829 , 0.04195163,\n       0.06331725, 0.06953115, 0.07835922,        nan, 0.05333196,\n       0.04165635, 0.06226454, 0.09482407, 0.09308922,        nan,\n       0.05333196, 0.04165635, 0.06226454, 0.09482407, 0.09308922,\n              nan, 0.06090443, 0.07728096, 0.06703233, 0.07095687,\n       0.06052993, 0.08045384, 0.07497423, 0.07845   , 0.05908352,\n       0.08018766, 0.08622361, 0.09412515]), 'rank_test_score': array([ 3, 12, 14, 11, 38, 43,  6, 17,  8, 15, 19, 46, 16, 29,  2, 18, 22,\n       45, 30, 34, 34, 12, 23, 48, 30, 36, 41, 25, 20, 44, 30, 36, 41, 25,\n       20, 47, 30,  7, 25,  9, 40,  4, 23,  1, 39, 10, 25,  5]), 'split0_train_score': array([0.99673203, 0.99673203, 0.99673203, 0.99673203, 0.99673203,\n              nan, 0.99673203, 0.99673203, 0.99673203, 0.99673203,\n       0.99673203,        nan, 0.99673203, 0.99673203, 0.99673203,\n       0.99673203, 0.99673203,        nan, 0.86601307, 0.86928105,\n       0.86601307, 0.87254902, 0.86928105,        nan, 0.87581699,\n       0.88888889, 0.88235294, 0.89215686, 0.87581699,        nan,\n       0.87581699, 0.88888889, 0.88235294, 0.89215686, 0.87581699,\n              nan, 0.84640523, 0.90196078, 0.87581699, 0.91176471,\n       0.99019608, 0.99346405, 0.99346405, 0.99673203, 0.99673203,\n       0.99673203, 0.99673203, 0.99673203]), 'split1_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.85016287, 0.85016287,\n       0.85016287, 0.83713355, 0.84690554,        nan, 0.8762215 ,\n       0.88273616, 0.87296417, 0.86319218, 0.8534202 ,        nan,\n       0.8762215 , 0.88273616, 0.87296417, 0.86319218, 0.8534202 ,\n              nan, 0.83713355, 0.87296417, 0.85667752, 0.8990228 ,\n       0.99674267, 0.98697068, 0.99348534, 0.99022801, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.85667752, 0.86970684,\n       0.86970684, 0.88599349, 0.87296417,        nan, 0.89250814,\n       0.88273616, 0.88925081, 0.91530945, 0.90228013,        nan,\n       0.89250814, 0.88273616, 0.88925081, 0.91530945, 0.90228013,\n              nan, 0.85016287, 0.8990228 , 0.85993485, 0.90553746,\n       0.99674267, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split3_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.85016287, 0.85667752,\n       0.85667752, 0.85667752, 0.85016287,        nan, 0.8762215 ,\n       0.87947883, 0.87947883, 0.88273616, 0.85993485,        nan,\n       0.8762215 , 0.87947883, 0.87947883, 0.88273616, 0.85993485,\n              nan, 0.83713355, 0.8762215 , 0.86644951, 0.8990228 ,\n       0.98371336, 0.99022801, 0.99348534, 0.99348534, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split4_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.86319218, 0.86319218,\n       0.86970684, 0.85016287, 0.84690554,        nan, 0.86970684,\n       0.87947883, 0.87296417, 0.86319218, 0.86970684,        nan,\n       0.86970684, 0.87947883, 0.87296417, 0.86319218, 0.86970684,\n              nan, 0.83061889, 0.89250814, 0.85667752, 0.89576547,\n       0.99022801, 0.99348534, 0.99348534, 0.99022801, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split5_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.85016287, 0.85016287,\n       0.8534202 , 0.87296417, 0.87947883,        nan, 0.86644951,\n       0.86644951, 0.86970684, 0.88273616, 0.88599349,        nan,\n       0.86644951, 0.86644951, 0.86970684, 0.88273616, 0.88599349,\n              nan, 0.84690554, 0.89250814, 0.85993485, 0.88925081,\n       0.99022801, 0.99022801, 0.99674267, 0.99022801, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split6_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.85993485, 0.8534202 ,\n       0.86644951, 0.86319218, 0.86644951,        nan, 0.85667752,\n       0.86970684, 0.8762215 , 0.87296417, 0.8762215 ,        nan,\n       0.85667752, 0.86970684, 0.8762215 , 0.87296417, 0.8762215 ,\n              nan, 0.85667752, 0.88925081, 0.87947883, 0.91205212,\n       0.97394137, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.8762215 , 0.8762215 ,\n       0.8762215 , 0.86970684, 0.86319218,        nan, 0.8990228 ,\n       0.90228013, 0.89576547, 0.86644951, 0.86644951,        nan,\n       0.8990228 , 0.90228013, 0.89576547, 0.86644951, 0.86644951,\n              nan, 0.83713355, 0.8990228 , 0.85993485, 0.90228013,\n       0.99348534, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split8_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.86970684, 0.88599349,\n       0.88599349, 0.86970684, 0.87296417,        nan, 0.90553746,\n       0.91530945, 0.91205212, 0.87296417, 0.88925081,        nan,\n       0.90553746, 0.91530945, 0.91205212, 0.87296417, 0.88925081,\n              nan, 0.84690554, 0.88925081, 0.85667752, 0.89250814,\n       0.98697068, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'split9_train_score': array([0.99674267, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n              nan, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267,        nan, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99674267,        nan, 0.8534202 , 0.85667752,\n       0.85016287, 0.85016287, 0.85667752,        nan, 0.86644951,\n       0.88273616, 0.88273616, 0.86319218, 0.86644951,        nan,\n       0.86644951, 0.88273616, 0.88273616, 0.86319218, 0.86644951,\n              nan, 0.82736156, 0.8762215 , 0.85993485, 0.89250814,\n       0.97394137, 0.98045603, 0.99022801, 0.99022801, 0.99674267,\n       0.99674267, 0.99674267, 0.99674267]), 'mean_train_score': array([0.99739307, 0.99739307, 0.99739307, 0.99739307, 0.99739307,\n              nan, 0.99739307, 0.99739307, 0.99739307, 0.99739307,\n       0.99739307,        nan, 0.99739307, 0.99739307, 0.99739307,\n       0.99739307, 0.99739307,        nan, 0.85956548, 0.8631496 ,\n       0.86445147, 0.86282493, 0.86249814,        nan, 0.87846118,\n       0.88498009, 0.8833493 , 0.8774893 , 0.87455238,        nan,\n       0.87846118, 0.88498009, 0.8833493 , 0.8774893 , 0.87455238,\n              nan, 0.84164378, 0.88889315, 0.86315173, 0.89997126,\n       0.98761896, 0.99283175, 0.99543761, 0.99446148, 0.99739307,\n       0.99739307, 0.99739307, 0.99739307]), 'std_train_score': array([0.00130347, 0.00130347, 0.00130347, 0.00130347, 0.00130347,\n              nan, 0.00130347, 0.00130347, 0.00130347, 0.00130347,\n       0.00130347,        nan, 0.00130347, 0.00130347, 0.00130347,\n       0.00130347, 0.00130347,        nan, 0.00863981, 0.01135367,\n       0.01120139, 0.01359225, 0.01114369,        nan, 0.01486598,\n       0.01373582, 0.01217298, 0.01573726, 0.01391111,        nan,\n       0.01486598, 0.01373582, 0.01217298, 0.01573726, 0.01391111,\n              nan, 0.00873606, 0.00988559, 0.00777816, 0.00753099,\n       0.00781653, 0.00579012, 0.00298679, 0.00386724, 0.00130347,\n       0.00130347, 0.00130347, 0.00130347])}"}, {"dataset_variant": "complete", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1, 2]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "5", "n_split_outer_kcv": 10}, "best_params": "{'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}", "mean_test_score": 0.7772268907563025, "cv_results": "{'mean_fit_time': array([0.50219972, 0.56499937, 0.60500126, 0.45899832, 0.38749862,\n       0.35769899, 0.448999  , 0.56659973, 0.50489857, 0.44549856,\n       0.43889942, 0.44259977, 0.45740037, 0.4228987 , 0.45219817,\n       0.47839909, 0.48799899, 0.42009923, 0.39930005, 0.44399908,\n       0.44609916, 0.4378005 , 0.49009907, 0.48429766, 0.55779965,\n       0.71771455, 0.8807148 , 0.6930989 , 0.53640018, 0.55179925,\n       0.61789913, 0.67489889, 0.59449863, 0.53009956, 0.5506994 ,\n       5.56811099, 0.57880001, 0.64950008, 0.74510081, 0.79660156,\n       0.81630008, 0.97830048, 0.99540026, 1.00339901, 0.88682768,\n       0.78830025, 0.76450005, 0.72740357]), 'std_fit_time': array([0.10153893, 0.08480441, 0.042448  , 0.06691627, 0.01806744,\n       0.0138136 , 0.01578608, 0.07514415, 0.09691877, 0.01908012,\n       0.02033031, 0.01849003, 0.01553633, 0.02393912, 0.01318256,\n       0.02337728, 0.03524131, 0.01411611, 0.01692347, 0.02181753,\n       0.02366593, 0.02030155, 0.03441053, 0.02914854, 0.04980907,\n       0.18874316, 0.09109875, 0.0611372 , 0.03952285, 0.0469633 ,\n       0.08292993, 0.07912369, 0.03269644, 0.05591303, 0.06180145,\n       7.43493536, 0.02886072, 0.04780438, 0.02998227, 0.03506917,\n       0.02893122, 0.04385466, 0.02029384, 0.02956742, 0.11588344,\n       0.10478098, 0.11967344, 0.09969856]), 'mean_score_time': array([0.00500026, 0.00760045, 0.00359952, 0.00360131, 0.00340042,\n       0.00300081, 0.00320106, 0.00440009, 0.00290029, 0.00310183,\n       0.00300043, 0.0034996 , 0.00319963, 0.00280118, 0.00370092,\n       0.00290084, 0.00540051, 0.00290008, 0.00280018, 0.00300117,\n       0.00350111, 0.00310035, 0.00310054, 0.00290031, 0.00280063,\n       0.00330648, 0.00319996, 0.00320096, 0.00300038, 0.00320072,\n       0.00320101, 0.00300035, 0.00300074, 0.00310059, 0.00380013,\n       0.01940031, 0.04060001, 0.04499979, 0.0526998 , 0.05299931,\n       0.05190005, 0.06829958, 0.06290009, 0.0664001 , 0.0520998 ,\n       0.04759998, 0.0481998 , 0.04139876]), 'std_score_time': array([0.00407376, 0.00635899, 0.00079775, 0.00066398, 0.00091652,\n       0.00044718, 0.00060088, 0.00355626, 0.00030023, 0.00029993,\n       0.00063268, 0.00135996, 0.00039856, 0.00040037, 0.00214616,\n       0.00053903, 0.00720148, 0.00029968, 0.000601  , 0.00044734,\n       0.0009218 , 0.00053842, 0.00053776, 0.00030024, 0.00039991,\n       0.00078694, 0.00040012, 0.00039985, 0.00044681, 0.00039944,\n       0.00039959, 0.00044793, 0.00063343, 0.00053908, 0.00177753,\n       0.02920951, 0.00523795, 0.00806237, 0.0083438 , 0.0070563 ,\n       0.01030953, 0.01419155, 0.00641024, 0.00874288, 0.01234885,\n       0.00714372, 0.01088881, 0.01125075]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --, --, --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 5, 5, 10, 10, 10, 10, 15,\n                   15, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150, 150, 150, 150, 150, 150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=15, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.68571429, 0.71428571, 0.68571429, 0.71428571, 0.71428571,\n       0.74285714, 0.68571429, 0.74285714, 0.68571429, 0.68571429,\n       0.71428571, 0.71428571, 0.68571429, 0.74285714, 0.68571429,\n       0.68571429, 0.71428571, 0.74285714, 0.68571429, 0.71428571,\n       0.71428571, 0.71428571, 0.62857143, 0.71428571, 0.68571429,\n       0.65714286, 0.71428571, 0.65714286, 0.62857143, 0.71428571,\n       0.68571429, 0.65714286, 0.71428571, 0.65714286, 0.62857143,\n       0.71428571, 0.65714286, 0.68571429, 0.65714286, 0.71428571,\n       0.65714286, 0.71428571, 0.62857143, 0.71428571, 0.62857143,\n       0.68571429, 0.65714286, 0.74285714]), 'split1_test_score': array([0.82352941, 0.79411765, 0.85294118, 0.88235294, 0.88235294,\n       0.88235294, 0.85294118, 0.88235294, 0.91176471, 0.88235294,\n       0.88235294, 0.85294118, 0.85294118, 0.88235294, 0.91176471,\n       0.88235294, 0.88235294, 0.85294118, 0.76470588, 0.76470588,\n       0.79411765, 0.91176471, 0.85294118, 0.85294118, 0.76470588,\n       0.76470588, 0.76470588, 0.91176471, 0.85294118, 0.82352941,\n       0.76470588, 0.76470588, 0.76470588, 0.91176471, 0.85294118,\n       0.82352941, 0.73529412, 0.82352941, 0.79411765, 0.85294118,\n       0.73529412, 0.82352941, 0.82352941, 0.88235294, 0.76470588,\n       0.82352941, 0.82352941, 0.85294118]), 'split2_test_score': array([0.70588235, 0.64705882, 0.58823529, 0.61764706, 0.61764706,\n       0.64705882, 0.67647059, 0.61764706, 0.64705882, 0.67647059,\n       0.61764706, 0.64705882, 0.64705882, 0.67647059, 0.64705882,\n       0.67647059, 0.61764706, 0.64705882, 0.61764706, 0.76470588,\n       0.73529412, 0.70588235, 0.70588235, 0.79411765, 0.52941176,\n       0.79411765, 0.73529412, 0.67647059, 0.64705882, 0.79411765,\n       0.52941176, 0.79411765, 0.73529412, 0.67647059, 0.64705882,\n       0.79411765, 0.73529412, 0.67647059, 0.67647059, 0.70588235,\n       0.64705882, 0.67647059, 0.73529412, 0.70588235, 0.64705882,\n       0.67647059, 0.70588235, 0.70588235]), 'split3_test_score': array([0.67647059, 0.70588235, 0.73529412, 0.76470588, 0.79411765,\n       0.73529412, 0.64705882, 0.67647059, 0.70588235, 0.76470588,\n       0.70588235, 0.73529412, 0.61764706, 0.67647059, 0.70588235,\n       0.76470588, 0.73529412, 0.73529412, 0.73529412, 0.73529412,\n       0.73529412, 0.73529412, 0.76470588, 0.67647059, 0.73529412,\n       0.73529412, 0.73529412, 0.73529412, 0.73529412, 0.67647059,\n       0.73529412, 0.73529412, 0.73529412, 0.73529412, 0.73529412,\n       0.67647059, 0.76470588, 0.73529412, 0.70588235, 0.76470588,\n       0.76470588, 0.73529412, 0.76470588, 0.76470588, 0.70588235,\n       0.70588235, 0.73529412, 0.79411765]), 'split4_test_score': array([0.79411765, 0.76470588, 0.76470588, 0.82352941, 0.82352941,\n       0.70588235, 0.73529412, 0.76470588, 0.82352941, 0.79411765,\n       0.82352941, 0.79411765, 0.70588235, 0.76470588, 0.79411765,\n       0.79411765, 0.85294118, 0.79411765, 0.76470588, 0.70588235,\n       0.73529412, 0.76470588, 0.70588235, 0.76470588, 0.70588235,\n       0.73529412, 0.73529412, 0.76470588, 0.76470588, 0.79411765,\n       0.70588235, 0.73529412, 0.73529412, 0.76470588, 0.76470588,\n       0.79411765, 0.82352941, 0.82352941, 0.88235294, 0.79411765,\n       0.85294118, 0.79411765, 0.85294118, 0.85294118, 0.82352941,\n       0.82352941, 0.82352941, 0.85294118]), 'split5_test_score': array([0.73529412, 0.67647059, 0.64705882, 0.70588235, 0.61764706,\n       0.58823529, 0.73529412, 0.64705882, 0.64705882, 0.70588235,\n       0.70588235, 0.55882353, 0.73529412, 0.64705882, 0.64705882,\n       0.70588235, 0.70588235, 0.58823529, 0.73529412, 0.58823529,\n       0.58823529, 0.70588235, 0.73529412, 0.67647059, 0.70588235,\n       0.58823529, 0.61764706, 0.70588235, 0.73529412, 0.64705882,\n       0.70588235, 0.58823529, 0.61764706, 0.70588235, 0.73529412,\n       0.64705882, 0.67647059, 0.70588235, 0.64705882, 0.70588235,\n       0.67647059, 0.70588235, 0.64705882, 0.70588235, 0.67647059,\n       0.73529412, 0.64705882, 0.70588235]), 'split6_test_score': array([0.70588235, 0.76470588, 0.76470588, 0.79411765, 0.82352941,\n       0.73529412, 0.76470588, 0.79411765, 0.79411765, 0.73529412,\n       0.79411765, 0.82352941, 0.76470588, 0.79411765, 0.79411765,\n       0.73529412, 0.79411765, 0.82352941, 0.70588235, 0.76470588,\n       0.82352941, 0.79411765, 0.76470588, 0.64705882, 0.73529412,\n       0.79411765, 0.82352941, 0.76470588, 0.79411765, 0.64705882,\n       0.73529412, 0.79411765, 0.82352941, 0.76470588, 0.79411765,\n       0.64705882, 0.70588235, 0.70588235, 0.70588235, 0.73529412,\n       0.73529412, 0.73529412, 0.76470588, 0.73529412, 0.73529412,\n       0.73529412, 0.79411765, 0.73529412]), 'split7_test_score': array([0.70588235, 0.64705882, 0.67647059, 0.70588235, 0.61764706,\n       0.64705882, 0.73529412, 0.70588235, 0.73529412, 0.64705882,\n       0.61764706, 0.73529412, 0.70588235, 0.70588235, 0.73529412,\n       0.64705882, 0.61764706, 0.73529412, 0.61764706, 0.64705882,\n       0.70588235, 0.67647059, 0.76470588, 0.82352941, 0.58823529,\n       0.64705882, 0.73529412, 0.70588235, 0.76470588, 0.82352941,\n       0.58823529, 0.64705882, 0.73529412, 0.70588235, 0.76470588,\n       0.82352941, 0.64705882, 0.73529412, 0.67647059, 0.70588235,\n       0.64705882, 0.67647059, 0.58823529, 0.67647059, 0.61764706,\n       0.70588235, 0.55882353, 0.67647059]), 'split8_test_score': array([0.79411765, 0.76470588, 0.76470588, 0.88235294, 0.85294118,\n       0.85294118, 0.88235294, 0.73529412, 0.76470588, 0.91176471,\n       0.85294118, 0.82352941, 0.88235294, 0.73529412, 0.76470588,\n       0.91176471, 0.94117647, 0.85294118, 0.73529412, 0.67647059,\n       0.70588235, 0.76470588, 0.85294118, 0.67647059, 0.76470588,\n       0.70588235, 0.73529412, 0.76470588, 0.85294118, 0.64705882,\n       0.76470588, 0.70588235, 0.73529412, 0.76470588, 0.85294118,\n       0.64705882, 0.76470588, 0.88235294, 0.82352941, 0.88235294,\n       0.76470588, 0.88235294, 0.76470588, 0.85294118, 0.73529412,\n       0.82352941, 0.82352941, 0.88235294]), 'split9_test_score': array([0.91176471, 0.88235294, 0.88235294, 0.79411765, 0.82352941,\n       0.85294118, 0.88235294, 0.88235294, 0.85294118, 0.82352941,\n       0.82352941, 0.85294118, 0.88235294, 0.88235294, 0.82352941,\n       0.82352941, 0.79411765, 0.85294118, 0.70588235, 0.85294118,\n       0.85294118, 0.76470588, 0.73529412, 0.70588235, 0.70588235,\n       0.82352941, 0.85294118, 0.76470588, 0.73529412, 0.70588235,\n       0.70588235, 0.82352941, 0.85294118, 0.76470588, 0.73529412,\n       0.70588235, 0.79411765, 0.85294118, 0.85294118, 0.76470588,\n       0.76470588, 0.88235294, 0.76470588, 0.82352941, 0.82352941,\n       0.88235294, 0.85294118, 0.82352941]), 'mean_test_score': array([0.75386555, 0.73613445, 0.73621849, 0.76848739, 0.75672269,\n       0.7389916 , 0.7597479 , 0.74487395, 0.75680672, 0.76268908,\n       0.75378151, 0.75378151, 0.74798319, 0.7507563 , 0.75092437,\n       0.76268908, 0.76554622, 0.76252101, 0.70680672, 0.72142857,\n       0.73907563, 0.75378151, 0.75109244, 0.73319328, 0.69210084,\n       0.72453782, 0.74495798, 0.74512605, 0.75109244, 0.72731092,\n       0.69210084, 0.72453782, 0.74495798, 0.74512605, 0.75109244,\n       0.72731092, 0.73042017, 0.76268908, 0.74218487, 0.76260504,\n       0.72453782, 0.76260504, 0.73344538, 0.77142857, 0.71579832,\n       0.7597479 , 0.74218487, 0.77722689]), 'std_test_score': array([0.07135285, 0.0692908 , 0.08566439, 0.07988609, 0.09982772,\n       0.09342951, 0.0810447 , 0.08524604, 0.08447464, 0.08481919,\n       0.08996308, 0.09091955, 0.09064376, 0.0779841 , 0.07947572,\n       0.08481919, 0.10227964, 0.08650092, 0.05048238, 0.06977953,\n       0.06981494, 0.06277823, 0.06395372, 0.06736462, 0.0722085 ,\n       0.07127299, 0.05986621, 0.06703233, 0.07039269, 0.07069445,\n       0.0722085 , 0.07127299, 0.05986621, 0.06703233, 0.07039269,\n       0.07069445, 0.05563863, 0.07154138, 0.08293466, 0.06019558,\n       0.06357497, 0.07434126, 0.08115037, 0.07108668, 0.070694  ,\n       0.06830175, 0.09278072, 0.06943887]), 'rank_test_score': array([15, 35, 34,  3, 14, 33, 11, 29, 13,  5, 16, 16, 24, 23, 22,  5,  4,\n       10, 46, 44, 32, 16, 19, 37, 47, 41, 27, 25, 19, 39, 47, 41, 27, 25,\n       19, 39, 38,  5, 31,  9, 41,  8, 36,  2, 45, 12, 30,  1]), 'split0_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.86928105, 0.87254902,\n       0.87254902, 0.87908497, 0.87581699, 0.89869281, 0.89215686,\n       0.88235294, 0.87581699, 0.88888889, 0.87581699, 0.90196078,\n       0.89215686, 0.88235294, 0.87581699, 0.88888889, 0.87581699,\n       0.90196078, 0.84313725, 0.90522876, 0.87254902, 0.91503268,\n       0.98366013, 0.99673203, 1.        , 0.99673203, 1.        ,\n       1.        , 1.        , 1.        ]), 'split1_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85993485, 0.85993485,\n       0.8762215 , 0.85993485, 0.85016287, 0.8534202 , 0.88273616,\n       0.88273616, 0.88599349, 0.87296417, 0.8762215 , 0.86319218,\n       0.88273616, 0.88273616, 0.88599349, 0.87296417, 0.8762215 ,\n       0.86319218, 0.84039088, 0.88599349, 0.84039088, 0.89576547,\n       0.99674267, 0.99674267, 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.87296417, 0.86319218,\n       0.86644951, 0.88599349, 0.88273616, 0.89576547, 0.87947883,\n       0.8762215 , 0.8762215 , 0.91530945, 0.88273616, 0.90553746,\n       0.87947883, 0.8762215 , 0.8762215 , 0.91530945, 0.88273616,\n       0.90553746, 0.84690554, 0.91856678, 0.88273616, 0.90228013,\n       0.99348534, 1.        , 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'split3_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85667752, 0.86644951,\n       0.86970684, 0.86319218, 0.85993485, 0.88925081, 0.88273616,\n       0.88273616, 0.8762215 , 0.8762215 , 0.86319218, 0.89576547,\n       0.88273616, 0.88273616, 0.8762215 , 0.8762215 , 0.86319218,\n       0.89576547, 0.84039088, 0.8990228 , 0.87947883, 0.87947883,\n       0.99674267, 1.        , 0.99674267, 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split4_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85016287, 0.87296417,\n       0.85993485, 0.8534202 , 0.86319218, 0.87296417, 0.86970684,\n       0.88599349, 0.88273616, 0.86319218, 0.87296417, 0.8762215 ,\n       0.86970684, 0.88599349, 0.88273616, 0.86319218, 0.87296417,\n       0.8762215 , 0.82084691, 0.89576547, 0.89250814, 0.90228013,\n       0.99348534, 1.        , 1.        , 0.99348534, 1.        ,\n       1.        , 1.        , 1.        ]), 'split5_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85016287, 0.86319218,\n       0.87947883, 0.86644951, 0.88925081, 0.90553746, 0.8762215 ,\n       0.89576547, 0.89250814, 0.86970684, 0.89576547, 0.90879479,\n       0.8762215 , 0.89576547, 0.89250814, 0.86970684, 0.89576547,\n       0.90879479, 0.8534202 , 0.88925081, 0.85993485, 0.88925081,\n       0.99348534, 1.        , 1.        , 0.99348534, 1.        ,\n       1.        , 1.        , 1.        ]), 'split6_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.88273616, 0.86970684,\n       0.86644951, 0.88273616, 0.86644951, 0.88273616, 0.91530945,\n       0.91530945, 0.88925081, 0.8990228 , 0.8990228 , 0.88599349,\n       0.91530945, 0.91530945, 0.88925081, 0.8990228 , 0.8990228 ,\n       0.88599349, 0.85667752, 0.8990228 , 0.89250814, 0.91205212,\n       0.99348534, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85667752, 0.86644951,\n       0.85993485, 0.87947883, 0.89576547, 0.8762215 , 0.88599349,\n       0.88273616, 0.87947883, 0.8990228 , 0.8990228 , 0.89576547,\n       0.88599349, 0.88273616, 0.87947883, 0.8990228 , 0.8990228 ,\n       0.89576547, 0.84039088, 0.90553746, 0.86319218, 0.90228013,\n       0.99022801, 1.        , 0.99674267, 0.99348534, 1.        ,\n       1.        , 1.        , 1.        ]), 'split8_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.87296417, 0.88273616,\n       0.87947883, 0.88273616, 0.86970684, 0.86970684, 0.88599349,\n       0.88925081, 0.88273616, 0.88599349, 0.86970684, 0.88599349,\n       0.88599349, 0.88925081, 0.88273616, 0.88599349, 0.86970684,\n       0.88599349, 0.8534202 , 0.89250814, 0.86970684, 0.89250814,\n       0.99022801, 1.        , 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'split9_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85016287, 0.8534202 ,\n       0.87947883, 0.85993485, 0.85993485, 0.88925081, 0.87947883,\n       0.8762215 , 0.89576547, 0.8762215 , 0.8762215 , 0.90228013,\n       0.87947883, 0.8762215 , 0.89576547, 0.8762215 , 0.8762215 ,\n       0.90228013, 0.82736156, 0.89576547, 0.86970684, 0.88925081,\n       0.99348534, 0.99674267, 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'mean_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.8621724 , 0.86705946,\n       0.87096826, 0.87129612, 0.87129505, 0.88335462, 0.88498116,\n       0.88693236, 0.8836729 , 0.88465436, 0.88106704, 0.89215048,\n       0.88498116, 0.88693236, 0.8836729 , 0.88465436, 0.88106704,\n       0.89215048, 0.84229418, 0.8986662 , 0.87227119, 0.89801793,\n       0.99250282, 0.99902174, 0.99934853, 0.99674161, 1.        ,\n       1.        , 1.        , 1.        ]), 'std_train_score': array([0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.01097454, 0.00764993,\n       0.00730264, 0.01127942, 0.01367075, 0.01480694, 0.01163621,\n       0.01092145, 0.00672976, 0.0152817 , 0.01205152, 0.01359914,\n       0.01163621, 0.01092145, 0.00672976, 0.0152817 , 0.01205152,\n       0.01359914, 0.0108179 , 0.00889138, 0.01498243, 0.0103625 ,\n       0.00359614, 0.00149432, 0.00130293, 0.00252312, 0.        ,\n       0.        , 0.        , 0.        ])}"}]