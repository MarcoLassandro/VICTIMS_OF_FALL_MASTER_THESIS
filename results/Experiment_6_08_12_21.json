[{"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "complete", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.800672268907563, "f1_micro": 0.800672268907563, "f1_macro": 0.739829769264552, "neg_root_mean_squared_error": -0.44112024747967454, "neg_mean_absolute_error": -0.19932773109243698}, "mean_train_score": {"accuracy": 0.9384237082455131, "f1_micro": 0.9384237082455131, "f1_macro": 0.9232133832372037, "neg_root_mean_squared_error": -0.1931563894116763, "neg_mean_absolute_error": -0.06157629175448681}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 16.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.001}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 0.0625, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 0.125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.125, 'estimator__gamma': 10, 'estimator__eta': 0.001}]", "cv_results": "{'fit_time': array([75.32099843, 82.79300404, 73.68999743, 72.89500403, 72.72699785,\n       79.12999725, 67.5909977 , 36.9750402 , 33.61303711, 33.47004032]), 'score_time': array([0.01700234, 0.01300287, 0.01299858, 0.01299834, 0.01199961,\n       0.01300144, 0.0129993 , 0.01200128, 0.01100039, 0.0120101 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.77142857, 0.79411765, 0.88235294, 0.88235294, 0.76470588,\n       0.85294118, 0.70588235, 0.82352941, 0.82352941, 0.70588235]), 'train_accuracy': array([0.96078431, 0.85993485, 0.93485342, 0.99674267, 0.84364821,\n       1.        , 0.97068404, 0.99674267, 1.        , 0.82084691]), 'test_f1_micro': array([0.77142857, 0.79411765, 0.88235294, 0.88235294, 0.76470588,\n       0.85294118, 0.70588235, 0.82352941, 0.82352941, 0.70588235]), 'train_f1_micro': array([0.96078431, 0.85993485, 0.93485342, 0.99674267, 0.84364821,\n       1.        , 0.97068404, 0.99674267, 1.        , 0.82084691]), 'test_f1_macro': array([0.72      , 0.77004831, 0.83653846, 0.84888889, 0.7312253 ,\n       0.76223776, 0.59134615, 0.77333333, 0.77333333, 0.59134615]), 'train_f1_macro': array([0.94962963, 0.81601137, 0.9125655 , 0.99585611, 0.80476948,\n       1.        , 0.96298678, 0.99585611, 1.        , 0.79445885]), 'test_neg_root_mean_squared_error': array([-0.47809144, -0.45374261, -0.34299717, -0.34299717, -0.48507125,\n       -0.38348249, -0.54232614, -0.42008403, -0.42008403, -0.54232614]), 'train_neg_root_mean_squared_error': array([-0.19802951, -0.37425278, -0.25523828, -0.05707301, -0.39541344,\n       -0.        , -0.17121904, -0.05707301, -0.        , -0.4232648 ]), 'test_neg_mean_absolute_error': array([-0.22857143, -0.20588235, -0.11764706, -0.11764706, -0.23529412,\n       -0.14705882, -0.29411765, -0.17647059, -0.17647059, -0.29411765]), 'train_neg_mean_absolute_error': array([-0.03921569, -0.14006515, -0.06514658, -0.00325733, -0.15635179,\n       -0.        , -0.02931596, -0.00325733, -0.        , -0.17915309])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "only_totals", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.7918487394957984, "f1_micro": 0.7918487394957984, "f1_macro": 0.7146502122385289, "neg_root_mean_squared_error": -0.45182691400354236, "neg_mean_absolute_error": -0.20815126050420166}, "mean_train_score": {"accuracy": 0.9110365970492431, "f1_micro": 0.9110365970492431, "f1_macro": 0.8813295481599311, "neg_root_mean_squared_error": -0.25496949943555897, "neg_mean_absolute_error": -0.08896340295075685}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 16.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 2.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 0.25, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 0.25, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 2.0, 'estimator__gamma': 10, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.001}]", "cv_results": "{'fit_time': array([71.13400197, 76.20099831, 70.674999  , 71.15300083, 72.01399612,\n       77.1119976 , 75.77799535, 30.89204717, 33.56904578, 32.16504765]), 'score_time': array([0.01300025, 0.01799917, 0.01200199, 0.01199937, 0.01400137,\n       0.01999927, 0.01400185, 0.01199913, 0.01299906, 0.01200199]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.77142857, 0.79411765, 0.85294118, 0.88235294, 0.76470588,\n       0.85294118, 0.70588235, 0.82352941, 0.73529412, 0.73529412]), 'train_accuracy': array([0.88235294, 1.        , 0.85016287, 1.        , 0.91856678,\n       0.99022801, 0.91530945, 0.90553746, 0.80130293, 0.84690554]), 'test_f1_micro': array([0.77142857, 0.79411765, 0.85294118, 0.88235294, 0.76470588,\n       0.85294118, 0.70588235, 0.82352941, 0.73529412, 0.73529412]), 'train_f1_micro': array([0.88235294, 1.        , 0.85016287, 1.        , 0.91856678,\n       0.99022801, 0.91530945, 0.90553746, 0.80130293, 0.84690554]), 'test_f1_macro': array([0.73484848, 0.77004831, 0.78616352, 0.84888889, 0.69777778,\n       0.78616352, 0.62222222, 0.77333333, 0.51196172, 0.61509434]), 'train_f1_macro': array([0.84642837, 1.        , 0.80399178, 1.        , 0.89302987,\n       0.9874716 , 0.89266889, 0.88161691, 0.69721418, 0.81087387]), 'test_neg_root_mean_squared_error': array([-0.47809144, -0.45374261, -0.38348249, -0.34299717, -0.48507125,\n       -0.38348249, -0.54232614, -0.42008403, -0.51449576, -0.51449576]), 'train_neg_root_mean_squared_error': array([-0.34299717, -0.        , -0.38708802, -0.        , -0.28536507,\n       -0.09885336, -0.29101641, -0.30734759, -0.44575449, -0.39127287]), 'test_neg_mean_absolute_error': array([-0.22857143, -0.20588235, -0.14705882, -0.11764706, -0.23529412,\n       -0.14705882, -0.29411765, -0.17647059, -0.26470588, -0.26470588]), 'train_neg_mean_absolute_error': array([-0.11764706, -0.        , -0.14983713, -0.        , -0.08143322,\n       -0.00977199, -0.08469055, -0.09446254, -0.19869707, -0.15309446])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "only_binary", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8094957983193277, "f1_micro": 0.8094957983193277, "f1_macro": 0.7431341501478921, "neg_root_mean_squared_error": -0.43147060898505485, "neg_mean_absolute_error": -0.19050420168067225}, "mean_train_score": {"accuracy": 0.9097294075067595, "f1_micro": 0.9097294075067595, "f1_macro": 0.878319784035876, "neg_root_mean_squared_error": -0.2739329349762995, "neg_mean_absolute_error": -0.09027059249324051}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 16.0, 'estimator__gamma': 0, 'estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.25, 'estimator__gamma': 10, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 2.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.25, 'estimator__gamma': 10, 'estimator__eta': 1e-05}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 0.015625, 'estimator__gamma': 0, 'estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 0.0625, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([73.43499851, 75.50999522, 74.22199464, 75.26899481, 69.87199759,\n       72.35099626, 76.60799551, 31.6960423 , 29.25304151, 28.19104218]), 'score_time': array([0.01300144, 0.01300025, 0.01199937, 0.0129993 , 0.01399636,\n       0.01300025, 0.01200151, 0.01199794, 0.01299691, 0.01899934]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.77142857, 0.82352941, 0.88235294, 0.88235294, 0.85294118,\n       0.85294118, 0.73529412, 0.73529412, 0.73529412, 0.82352941]), 'train_accuracy': array([0.86928105, 0.94136808, 0.82084691, 0.98697068, 0.93485342,\n       0.87947883, 0.85667752, 0.88599349, 1.        , 0.9218241 ]), 'test_f1_micro': array([0.77142857, 0.82352941, 0.88235294, 0.88235294, 0.85294118,\n       0.85294118, 0.73529412, 0.73529412, 0.73529412, 0.82352941]), 'train_f1_micro': array([0.86928105, 0.94136808, 0.82084691, 0.98697068, 0.93485342,\n       0.87947883, 0.85667752, 0.88599349, 1.        , 0.9218241 ]), 'test_f1_macro': array([0.72      , 0.7875    , 0.82010582, 0.83653846, 0.81740064,\n       0.78616352, 0.64705882, 0.67132116, 0.61509434, 0.73015873]), 'train_f1_macro': array([0.82494279, 0.92330113, 0.74161808, 0.98322954, 0.91680217,\n       0.8345351 , 0.80414105, 0.85605969, 1.        , 0.89856828]), 'test_neg_root_mean_squared_error': array([-0.47809144, -0.42008403, -0.34299717, -0.34299717, -0.38348249,\n       -0.38348249, -0.51449576, -0.51449576, -0.51449576, -0.42008403]), 'train_neg_root_mean_squared_error': array([-0.36155076, -0.24214029, -0.4232648 , -0.11414603, -0.25523828,\n       -0.34716159, -0.37857955, -0.33764851, -0.        , -0.27959953]), 'test_neg_mean_absolute_error': array([-0.22857143, -0.17647059, -0.11764706, -0.11764706, -0.14705882,\n       -0.14705882, -0.26470588, -0.26470588, -0.26470588, -0.17647059]), 'train_neg_mean_absolute_error': array([-0.13071895, -0.05863192, -0.17915309, -0.01302932, -0.06514658,\n       -0.12052117, -0.14332248, -0.11400651, -0.        , -0.0781759 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]