[{"experiment_name": "Experiment_2_23_11_21", "dataset_variant": "only_totals", "estimator": "ChainedEstimator()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_outer_cv", "mean_test_score": {"accuracy": 0.26705882352941174, "f1_micro": 0.26705882352941174, "f1_macro": 0.2381230114423391, "neg_root_mean_squared_error": -1.709858476276493, "neg_mean_absolute_error": -1.28781512605042}, "mean_train_score": {"accuracy": 0.2909561218624258, "f1_micro": 0.2909561218624258, "f1_macro": 0.2663852935021804, "neg_root_mean_squared_error": -1.2965209814923488, "neg_mean_absolute_error": -0.9938387515701177}, "best_params": "[{'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 50, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}]", "cv_results": "{'mean_fit_time': array([ 3.1249975 , 10.94449849, 10.73229759,  9.29559848, 11.71091559,\n       14.53589754, 12.60439723,  9.01589785, 10.13992255, 12.35320752,\n        9.42169704, 14.61749744, 13.42939837, 12.88302503,  8.26959717,\n       12.11499777, 11.42139778, 14.32919776, 11.49339752, 13.24359775]), 'std_fit_time': array([0.45368014, 2.46074396, 3.68096735, 2.41665436, 1.95040172,\n       1.24350901, 2.84492181, 2.98414282, 2.46975119, 2.15181984,\n       3.06770911, 1.63829876, 1.77477619, 1.84442086, 3.89713466,\n       2.62479022, 2.49678319, 2.30565536, 2.91388292, 2.36822772]), 'mean_score_time': array([1.45710073, 1.23430083, 1.10289996, 1.21559916, 0.99500084,\n       0.94889987, 1.19929924, 1.26119981, 1.18940101, 0.98210027,\n       1.08870027, 0.96910021, 1.00299909, 1.01729877, 1.17960026,\n       1.00249956, 1.07940068, 1.02460005, 1.03930027, 1.04200017]), 'std_score_time': array([0.30441468, 0.27374434, 0.19239603, 0.22680995, 0.10779872,\n       0.0471809 , 0.21839297, 0.16970574, 0.20178277, 0.06871839,\n       0.12421592, 0.06176499, 0.12189714, 0.07343299, 0.2767488 ,\n       0.14666909, 0.15136269, 0.13714055, 0.17174292, 0.16175734]), 'param_estimator__regressor__n_estimators': masked_array(data=[100, 150, 100, 100, 100, 50, 125, 125, 125, 50, 50,\n                   125, 100, 100, 150, 50, 125, 100, 125, 100],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__regressor': masked_array(data=[RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5),\n                   RandomForestRegressor(max_depth=5)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__clf__n_estimators': masked_array(data=[50, 150, 125, 50, 100, 150, 125, 50, 100, 100, 100,\n                   150, 150, 125, 50, 100, 125, 150, 150, 150],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__clf__max_depth': masked_array(data=[10, 5, 10, 3, 10, 10, 5, 5, 3, 5, 3, 10, 5, 3, 10, 10,\n                   3, 10, 3, 3],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ,\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n                                 colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n                                 enable_categorical=False, gamma=None, gpu_id=None,\n                                 importance_type=None, interaction_constraints=None,\n                                 learning_rate=None, max_delta_step=None, max_depth=3,\n                                 min_child_weight=None, missing=nan, monotone_constraints=None,\n                                 n_estimators=50, n_jobs=None, num_parallel_tree=None,\n                                 predictor=None, random_state=None, reg_alpha=None,\n                                 reg_lambda=None, scale_pos_weight=None, subsample=None,\n                                 tree_method=None, validate_parameters=None, verbosity=None)       ],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 50, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 150, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 5, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 125, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 50, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 100, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 50, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 125, 'estimator__clf__max_depth': 5, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 50, 'estimator__clf__max_depth': 5, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 100, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 50, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 100, 'estimator__clf__max_depth': 5, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 50, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 100, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 5, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 125, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 150, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 50, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 50, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 100, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 125, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 10, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 125, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}, {'estimator__regressor__n_estimators': 100, 'estimator__regressor': RandomForestRegressor(max_depth=5), 'estimator__clf__n_estimators': 150, 'estimator__clf__max_depth': 3, 'estimator__clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, criterion='entropy',\n              enable_categorical=False, gamma=None, gpu_id=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=3,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=50, n_jobs=None, num_parallel_tree=None,\n              predictor=None, random_state=None, reg_alpha=None,\n              reg_lambda=None, scale_pos_weight=None, subsample=None,\n              tree_method=None, validate_parameters=None, verbosity=None)}], 'split0_test_accuracy': array([0.11428571, 0.22857143, 0.14285714, 0.2       , 0.14285714,\n       0.11428571, 0.17142857, 0.22857143, 0.22857143, 0.17142857,\n       0.17142857, 0.17142857, 0.17142857, 0.17142857, 0.14285714,\n       0.25714286, 0.17142857, 0.2       , 0.17142857, 0.17142857]), 'split1_test_accuracy': array([0.20588235, 0.23529412, 0.20588235, 0.23529412, 0.29411765,\n       0.26470588, 0.23529412, 0.23529412, 0.23529412, 0.32352941,\n       0.20588235, 0.20588235, 0.29411765, 0.17647059, 0.20588235,\n       0.26470588, 0.20588235, 0.26470588, 0.23529412, 0.23529412]), 'split2_test_accuracy': array([0.35294118, 0.32352941, 0.32352941, 0.32352941, 0.35294118,\n       0.26470588, 0.32352941, 0.38235294, 0.32352941, 0.35294118,\n       0.32352941, 0.32352941, 0.26470588, 0.35294118, 0.32352941,\n       0.32352941, 0.35294118, 0.29411765, 0.29411765, 0.35294118]), 'split3_test_accuracy': array([0.11764706, 0.11764706, 0.11764706, 0.14705882, 0.11764706,\n       0.11764706, 0.11764706, 0.14705882, 0.11764706, 0.17647059,\n       0.14705882, 0.14705882, 0.14705882, 0.20588235, 0.11764706,\n       0.08823529, 0.14705882, 0.11764706, 0.14705882, 0.11764706]), 'split4_test_accuracy': array([0.17647059, 0.14705882, 0.17647059, 0.20588235, 0.20588235,\n       0.14705882, 0.17647059, 0.23529412, 0.17647059, 0.20588235,\n       0.23529412, 0.17647059, 0.11764706, 0.20588235, 0.17647059,\n       0.20588235, 0.23529412, 0.11764706, 0.26470588, 0.26470588]), 'split5_test_accuracy': array([0.29411765, 0.29411765, 0.26470588, 0.35294118, 0.29411765,\n       0.26470588, 0.35294118, 0.29411765, 0.35294118, 0.29411765,\n       0.38235294, 0.32352941, 0.32352941, 0.32352941, 0.32352941,\n       0.32352941, 0.32352941, 0.26470588, 0.35294118, 0.32352941]), 'split6_test_accuracy': array([0.41176471, 0.47058824, 0.47058824, 0.47058824, 0.44117647,\n       0.44117647, 0.47058824, 0.41176471, 0.35294118, 0.44117647,\n       0.41176471, 0.38235294, 0.38235294, 0.38235294, 0.41176471,\n       0.47058824, 0.38235294, 0.41176471, 0.41176471, 0.38235294]), 'split7_test_accuracy': array([0.32352941, 0.29411765, 0.23529412, 0.35294118, 0.20588235,\n       0.26470588, 0.26470588, 0.23529412, 0.26470588, 0.26470588,\n       0.29411765, 0.26470588, 0.20588235, 0.29411765, 0.20588235,\n       0.23529412, 0.29411765, 0.20588235, 0.26470588, 0.26470588]), 'split8_test_accuracy': array([0.17647059, 0.14705882, 0.17647059, 0.17647059, 0.17647059,\n       0.11764706, 0.14705882, 0.11764706, 0.11764706, 0.11764706,\n       0.11764706, 0.11764706, 0.08823529, 0.11764706, 0.14705882,\n       0.14705882, 0.14705882, 0.11764706, 0.14705882, 0.14705882]), 'split9_test_accuracy': array([0.26470588, 0.23529412, 0.23529412, 0.20588235, 0.20588235,\n       0.23529412, 0.26470588, 0.29411765, 0.35294118, 0.29411765,\n       0.23529412, 0.26470588, 0.23529412, 0.26470588, 0.29411765,\n       0.26470588, 0.26470588, 0.23529412, 0.26470588, 0.26470588]), 'mean_test_accuracy': array([0.24378151, 0.24932773, 0.23487395, 0.26705882, 0.24369748,\n       0.22319328, 0.25243697, 0.25815126, 0.25226891, 0.26420168,\n       0.25243697, 0.23773109, 0.22302521, 0.2494958 , 0.23487395,\n       0.25806723, 0.25243697, 0.22294118, 0.25537815, 0.25243697]), 'std_test_accuracy': array([0.09625092, 0.09877082, 0.09704791, 0.09744842, 0.09533279,\n       0.09720782, 0.10244328, 0.08725571, 0.08858817, 0.09256767,\n       0.09361903, 0.08300501, 0.08968178, 0.08286792, 0.09248375,\n       0.09911226, 0.08071795, 0.08856605, 0.08164197, 0.08283362]), 'rank_test_accuracy': array([13, 12, 16,  1, 14, 18,  6,  3, 10,  2,  6, 15, 19, 11, 16,  4,  6,\n       20,  5,  6]), 'split0_train_accuracy': array([0.23529412, 0.22222222, 0.26143791, 0.23529412, 0.23856209,\n       0.23529412, 0.23202614, 0.24183007, 0.25490196, 0.23856209,\n       0.26797386, 0.22875817, 0.24183007, 0.23856209, 0.22875817,\n       0.23529412, 0.23202614, 0.23856209, 0.26143791, 0.24836601]), 'split1_train_accuracy': array([0.28013029, 0.27361564, 0.28013029, 0.27035831, 0.27035831,\n       0.26058632, 0.27687296, 0.27687296, 0.27361564, 0.26384365,\n       0.28664495, 0.28338762, 0.28338762, 0.26710098, 0.28013029,\n       0.28013029, 0.26384365, 0.28338762, 0.26058632, 0.27035831]), 'split2_train_accuracy': array([0.26384365, 0.28013029, 0.26710098, 0.29315961, 0.25407166,\n       0.28664495, 0.29315961, 0.28664495, 0.28013029, 0.3029316 ,\n       0.27361564, 0.28338762, 0.29641694, 0.28338762, 0.24429967,\n       0.25407166, 0.27035831, 0.26384365, 0.28664495, 0.27361564]), 'split3_train_accuracy': array([0.29315961, 0.29641694, 0.28990228, 0.29641694, 0.30944625,\n       0.3029316 , 0.29641694, 0.28664495, 0.29315961, 0.28338762,\n       0.3029316 , 0.28990228, 0.29315961, 0.28338762, 0.3029316 ,\n       0.31270358, 0.28990228, 0.30944625, 0.28990228, 0.29315961]), 'split4_train_accuracy': array([0.28664495, 0.29967427, 0.29967427, 0.31596091, 0.30944625,\n       0.29315961, 0.3029316 , 0.29315961, 0.3029316 , 0.28338762,\n       0.31270358, 0.30944625, 0.30944625, 0.31270358, 0.27361564,\n       0.29315961, 0.3257329 , 0.31921824, 0.32247557, 0.31270358]), 'split5_train_accuracy': array([0.28664495, 0.28338762, 0.28338762, 0.30944625, 0.29641694,\n       0.29967427, 0.29641694, 0.31921824, 0.28013029, 0.29315961,\n       0.27687296, 0.31270358, 0.28990228, 0.29641694, 0.29315961,\n       0.29315961, 0.29315961, 0.28990228, 0.30618893, 0.29967427]), 'split6_train_accuracy': array([0.26384365, 0.27687296, 0.27035831, 0.27687296, 0.28338762,\n       0.28013029, 0.28013029, 0.30618893, 0.27361564, 0.29315961,\n       0.27035831, 0.29315961, 0.28664495, 0.28990228, 0.27687296,\n       0.27035831, 0.27687296, 0.27687296, 0.28990228, 0.28013029]), 'split7_train_accuracy': array([0.28990228, 0.28013029, 0.29641694, 0.30618893, 0.28013029,\n       0.29315961, 0.29315961, 0.28664495, 0.3029316 , 0.28664495,\n       0.28990228, 0.28990228, 0.29315961, 0.27035831, 0.26058632,\n       0.28664495, 0.27035831, 0.28990228, 0.29315961, 0.29315961]), 'split8_train_accuracy': array([0.28664495, 0.30618893, 0.29641694, 0.32247557, 0.3029316 ,\n       0.30618893, 0.31921824, 0.30618893, 0.3257329 , 0.3029316 ,\n       0.30944625, 0.30944625, 0.29641694, 0.31596091, 0.3029316 ,\n       0.3029316 , 0.30944625, 0.30944625, 0.31921824, 0.3257329 ]), 'split9_train_accuracy': array([0.27035831, 0.25407166, 0.25732899, 0.28338762, 0.25732899,\n       0.26710098, 0.26384365, 0.26384365, 0.26384365, 0.25407166,\n       0.27687296, 0.26058632, 0.26710098, 0.26710098, 0.27035831,\n       0.25407166, 0.26710098, 0.27035831, 0.27361564, 0.28338762]), 'mean_train_accuracy': array([0.27564668, 0.27727108, 0.28021545, 0.29095612, 0.280208  ,\n       0.28248707, 0.2854176 , 0.28672372, 0.28509932, 0.280208  ,\n       0.28673224, 0.286068  , 0.28574652, 0.28248813, 0.27336442,\n       0.27825254, 0.27988014, 0.28509399, 0.29031317, 0.28802878]), 'std_train_accuracy': array([0.01681616, 0.0231097 , 0.01467333, 0.02450604, 0.02353065,\n       0.02114085, 0.02286508, 0.02119221, 0.020072  , 0.02028583,\n       0.0156504 , 0.02414609, 0.01788646, 0.02198672, 0.02281497,\n       0.02321961, 0.02480781, 0.02302434, 0.02034732, 0.02096607]), 'split0_test_f1_micro': array([0.11428571, 0.22857143, 0.14285714, 0.2       , 0.14285714,\n       0.11428571, 0.17142857, 0.22857143, 0.22857143, 0.17142857,\n       0.17142857, 0.17142857, 0.17142857, 0.17142857, 0.14285714,\n       0.25714286, 0.17142857, 0.2       , 0.17142857, 0.17142857]), 'split1_test_f1_micro': array([0.20588235, 0.23529412, 0.20588235, 0.23529412, 0.29411765,\n       0.26470588, 0.23529412, 0.23529412, 0.23529412, 0.32352941,\n       0.20588235, 0.20588235, 0.29411765, 0.17647059, 0.20588235,\n       0.26470588, 0.20588235, 0.26470588, 0.23529412, 0.23529412]), 'split2_test_f1_micro': array([0.35294118, 0.32352941, 0.32352941, 0.32352941, 0.35294118,\n       0.26470588, 0.32352941, 0.38235294, 0.32352941, 0.35294118,\n       0.32352941, 0.32352941, 0.26470588, 0.35294118, 0.32352941,\n       0.32352941, 0.35294118, 0.29411765, 0.29411765, 0.35294118]), 'split3_test_f1_micro': array([0.11764706, 0.11764706, 0.11764706, 0.14705882, 0.11764706,\n       0.11764706, 0.11764706, 0.14705882, 0.11764706, 0.17647059,\n       0.14705882, 0.14705882, 0.14705882, 0.20588235, 0.11764706,\n       0.08823529, 0.14705882, 0.11764706, 0.14705882, 0.11764706]), 'split4_test_f1_micro': array([0.17647059, 0.14705882, 0.17647059, 0.20588235, 0.20588235,\n       0.14705882, 0.17647059, 0.23529412, 0.17647059, 0.20588235,\n       0.23529412, 0.17647059, 0.11764706, 0.20588235, 0.17647059,\n       0.20588235, 0.23529412, 0.11764706, 0.26470588, 0.26470588]), 'split5_test_f1_micro': array([0.29411765, 0.29411765, 0.26470588, 0.35294118, 0.29411765,\n       0.26470588, 0.35294118, 0.29411765, 0.35294118, 0.29411765,\n       0.38235294, 0.32352941, 0.32352941, 0.32352941, 0.32352941,\n       0.32352941, 0.32352941, 0.26470588, 0.35294118, 0.32352941]), 'split6_test_f1_micro': array([0.41176471, 0.47058824, 0.47058824, 0.47058824, 0.44117647,\n       0.44117647, 0.47058824, 0.41176471, 0.35294118, 0.44117647,\n       0.41176471, 0.38235294, 0.38235294, 0.38235294, 0.41176471,\n       0.47058824, 0.38235294, 0.41176471, 0.41176471, 0.38235294]), 'split7_test_f1_micro': array([0.32352941, 0.29411765, 0.23529412, 0.35294118, 0.20588235,\n       0.26470588, 0.26470588, 0.23529412, 0.26470588, 0.26470588,\n       0.29411765, 0.26470588, 0.20588235, 0.29411765, 0.20588235,\n       0.23529412, 0.29411765, 0.20588235, 0.26470588, 0.26470588]), 'split8_test_f1_micro': array([0.17647059, 0.14705882, 0.17647059, 0.17647059, 0.17647059,\n       0.11764706, 0.14705882, 0.11764706, 0.11764706, 0.11764706,\n       0.11764706, 0.11764706, 0.08823529, 0.11764706, 0.14705882,\n       0.14705882, 0.14705882, 0.11764706, 0.14705882, 0.14705882]), 'split9_test_f1_micro': array([0.26470588, 0.23529412, 0.23529412, 0.20588235, 0.20588235,\n       0.23529412, 0.26470588, 0.29411765, 0.35294118, 0.29411765,\n       0.23529412, 0.26470588, 0.23529412, 0.26470588, 0.29411765,\n       0.26470588, 0.26470588, 0.23529412, 0.26470588, 0.26470588]), 'mean_test_f1_micro': array([0.24378151, 0.24932773, 0.23487395, 0.26705882, 0.24369748,\n       0.22319328, 0.25243697, 0.25815126, 0.25226891, 0.26420168,\n       0.25243697, 0.23773109, 0.22302521, 0.2494958 , 0.23487395,\n       0.25806723, 0.25243697, 0.22294118, 0.25537815, 0.25243697]), 'std_test_f1_micro': array([0.09625092, 0.09877082, 0.09704791, 0.09744842, 0.09533279,\n       0.09720782, 0.10244328, 0.08725571, 0.08858817, 0.09256767,\n       0.09361903, 0.08300501, 0.08968178, 0.08286792, 0.09248375,\n       0.09911226, 0.08071795, 0.08856605, 0.08164197, 0.08283362]), 'rank_test_f1_micro': array([13, 12, 16,  1, 14, 18,  6,  3, 10,  2,  6, 15, 19, 11, 16,  4,  6,\n       20,  5,  6]), 'split0_train_f1_micro': array([0.23529412, 0.22222222, 0.26143791, 0.23529412, 0.23856209,\n       0.23529412, 0.23202614, 0.24183007, 0.25490196, 0.23856209,\n       0.26797386, 0.22875817, 0.24183007, 0.23856209, 0.22875817,\n       0.23529412, 0.23202614, 0.23856209, 0.26143791, 0.24836601]), 'split1_train_f1_micro': array([0.28013029, 0.27361564, 0.28013029, 0.27035831, 0.27035831,\n       0.26058632, 0.27687296, 0.27687296, 0.27361564, 0.26384365,\n       0.28664495, 0.28338762, 0.28338762, 0.26710098, 0.28013029,\n       0.28013029, 0.26384365, 0.28338762, 0.26058632, 0.27035831]), 'split2_train_f1_micro': array([0.26384365, 0.28013029, 0.26710098, 0.29315961, 0.25407166,\n       0.28664495, 0.29315961, 0.28664495, 0.28013029, 0.3029316 ,\n       0.27361564, 0.28338762, 0.29641694, 0.28338762, 0.24429967,\n       0.25407166, 0.27035831, 0.26384365, 0.28664495, 0.27361564]), 'split3_train_f1_micro': array([0.29315961, 0.29641694, 0.28990228, 0.29641694, 0.30944625,\n       0.3029316 , 0.29641694, 0.28664495, 0.29315961, 0.28338762,\n       0.3029316 , 0.28990228, 0.29315961, 0.28338762, 0.3029316 ,\n       0.31270358, 0.28990228, 0.30944625, 0.28990228, 0.29315961]), 'split4_train_f1_micro': array([0.28664495, 0.29967427, 0.29967427, 0.31596091, 0.30944625,\n       0.29315961, 0.3029316 , 0.29315961, 0.3029316 , 0.28338762,\n       0.31270358, 0.30944625, 0.30944625, 0.31270358, 0.27361564,\n       0.29315961, 0.3257329 , 0.31921824, 0.32247557, 0.31270358]), 'split5_train_f1_micro': array([0.28664495, 0.28338762, 0.28338762, 0.30944625, 0.29641694,\n       0.29967427, 0.29641694, 0.31921824, 0.28013029, 0.29315961,\n       0.27687296, 0.31270358, 0.28990228, 0.29641694, 0.29315961,\n       0.29315961, 0.29315961, 0.28990228, 0.30618893, 0.29967427]), 'split6_train_f1_micro': array([0.26384365, 0.27687296, 0.27035831, 0.27687296, 0.28338762,\n       0.28013029, 0.28013029, 0.30618893, 0.27361564, 0.29315961,\n       0.27035831, 0.29315961, 0.28664495, 0.28990228, 0.27687296,\n       0.27035831, 0.27687296, 0.27687296, 0.28990228, 0.28013029]), 'split7_train_f1_micro': array([0.28990228, 0.28013029, 0.29641694, 0.30618893, 0.28013029,\n       0.29315961, 0.29315961, 0.28664495, 0.3029316 , 0.28664495,\n       0.28990228, 0.28990228, 0.29315961, 0.27035831, 0.26058632,\n       0.28664495, 0.27035831, 0.28990228, 0.29315961, 0.29315961]), 'split8_train_f1_micro': array([0.28664495, 0.30618893, 0.29641694, 0.32247557, 0.3029316 ,\n       0.30618893, 0.31921824, 0.30618893, 0.3257329 , 0.3029316 ,\n       0.30944625, 0.30944625, 0.29641694, 0.31596091, 0.3029316 ,\n       0.3029316 , 0.30944625, 0.30944625, 0.31921824, 0.3257329 ]), 'split9_train_f1_micro': array([0.27035831, 0.25407166, 0.25732899, 0.28338762, 0.25732899,\n       0.26710098, 0.26384365, 0.26384365, 0.26384365, 0.25407166,\n       0.27687296, 0.26058632, 0.26710098, 0.26710098, 0.27035831,\n       0.25407166, 0.26710098, 0.27035831, 0.27361564, 0.28338762]), 'mean_train_f1_micro': array([0.27564668, 0.27727108, 0.28021545, 0.29095612, 0.280208  ,\n       0.28248707, 0.2854176 , 0.28672372, 0.28509932, 0.280208  ,\n       0.28673224, 0.286068  , 0.28574652, 0.28248813, 0.27336442,\n       0.27825254, 0.27988014, 0.28509399, 0.29031317, 0.28802878]), 'std_train_f1_micro': array([0.01681616, 0.0231097 , 0.01467333, 0.02450604, 0.02353065,\n       0.02114085, 0.02286508, 0.02119221, 0.020072  , 0.02028583,\n       0.0156504 , 0.02414609, 0.01788646, 0.02198672, 0.02281497,\n       0.02321961, 0.02480781, 0.02302434, 0.02034732, 0.02096607]), 'split0_test_f1_macro': array([0.1010989 , 0.22020202, 0.14365079, 0.1857349 , 0.14047619,\n       0.11507937, 0.1564277 , 0.20675039, 0.20670996, 0.16645022,\n       0.16269841, 0.16706785, 0.16125541, 0.16018981, 0.12187812,\n       0.23662052, 0.14888683, 0.17817896, 0.16018981, 0.14038343]), 'split1_test_f1_macro': array([0.18294087, 0.17575758, 0.15782313, 0.20160792, 0.25784374,\n       0.23764172, 0.18095238, 0.18787879, 0.20265449, 0.27829314,\n       0.17619048, 0.17414966, 0.23783359, 0.13741497, 0.17927786,\n       0.21269841, 0.18063286, 0.23888889, 0.19105339, 0.18528139]), 'split2_test_f1_macro': array([0.32987013, 0.31183261, 0.3017316 , 0.28361345, 0.32568543,\n       0.2498446 , 0.2982393 , 0.35685426, 0.28679654, 0.32292311,\n       0.30272109, 0.30238095, 0.2468254 , 0.32681072, 0.30252525,\n       0.3038961 , 0.32568543, 0.27655123, 0.27097608, 0.32554113]), 'split3_test_f1_macro': array([0.08369408, 0.08369408, 0.07570208, 0.12063492, 0.08369408,\n       0.0855615 , 0.08369408, 0.11940837, 0.07936508, 0.14984721,\n       0.11746032, 0.11746032, 0.11746032, 0.15951108, 0.0907563 ,\n       0.06031746, 0.12250233, 0.08369408, 0.11940837, 0.07936508]), 'split4_test_f1_macro': array([0.13681319, 0.1183499 , 0.15222555, 0.16598639, 0.17521368,\n       0.13125763, 0.14212454, 0.17936508, 0.14242424, 0.16230595,\n       0.1972472 , 0.14029304, 0.09474969, 0.15972599, 0.14080919,\n       0.16073609, 0.1961816 , 0.0976801 , 0.22337662, 0.22475302]), 'split5_test_f1_macro': array([0.26898102, 0.26861472, 0.24675325, 0.31046176, 0.28001047,\n       0.24984721, 0.32422969, 0.26672772, 0.31379335, 0.26462585,\n       0.34220779, 0.28964646, 0.29262796, 0.29211503, 0.29338915,\n       0.30150484, 0.29730983, 0.23061224, 0.31050933, 0.29716553]), 'split6_test_f1_macro': array([0.37441765, 0.42763586, 0.4282638 , 0.42917083, 0.40468975,\n       0.40457638, 0.43459318, 0.37625232, 0.31771086, 0.4031746 ,\n       0.37819958, 0.34801072, 0.35573633, 0.33964131, 0.37625232,\n       0.4282638 , 0.33679654, 0.38394146, 0.35939933, 0.34052614]), 'split7_test_f1_macro': array([0.28943834, 0.25725624, 0.23443223, 0.30658627, 0.20351474,\n       0.2369281 , 0.24217687, 0.20903541, 0.2510989 , 0.22261905,\n       0.28681319, 0.24089636, 0.19871795, 0.28638029, 0.20567924,\n       0.22762951, 0.2736787 , 0.20722135, 0.25360354, 0.25360354]), 'split8_test_f1_macro': array([0.19002268, 0.14401154, 0.1572491 , 0.17948877, 0.18107607,\n       0.10410225, 0.14401154, 0.11168831, 0.11168831, 0.11428571,\n       0.11428571, 0.11746032, 0.08571429, 0.12063492, 0.15510204,\n       0.15827664, 0.14920635, 0.11086691, 0.14401154, 0.14401154]), 'split9_test_f1_macro': array([0.23945578, 0.22427335, 0.2231685 , 0.19794491, 0.20012369,\n       0.20986395, 0.26190476, 0.27959184, 0.34237191, 0.28345702,\n       0.21461871, 0.24621212, 0.23358071, 0.26373944, 0.28427128,\n       0.23800366, 0.25534941, 0.19859307, 0.25437539, 0.25759954]), 'mean_test_f1_macro': array([0.21967326, 0.22316279, 0.2121    , 0.23812301, 0.22523278,\n       0.20247027, 0.22683541, 0.22935525, 0.22546136, 0.23679819,\n       0.22924425, 0.21435778, 0.20245016, 0.22461635, 0.21499408,\n       0.23279471, 0.22862299, 0.20062283, 0.22869034, 0.22482303]), 'std_test_f1_macro': array([0.09242477, 0.09584323, 0.09455789, 0.08753629, 0.08895525,\n       0.09157901, 0.10039937, 0.08534177, 0.08743869, 0.08546381,\n       0.08823455, 0.07817635, 0.08365394, 0.08036937, 0.08897726,\n       0.09431371, 0.07474409, 0.08637798, 0.07217881, 0.08188376]), 'rank_test_f1_macro': array([14, 13, 17,  1, 10, 18,  8,  4,  9,  2,  5, 16, 19, 12, 15,  3,  7,\n       20,  6, 11]), 'split0_train_f1_macro': array([0.2173603 , 0.20967883, 0.24511011, 0.22002695, 0.22195139,\n       0.21753398, 0.20991727, 0.22457271, 0.23424109, 0.22462341,\n       0.25008024, 0.21347211, 0.22625535, 0.22022688, 0.21317953,\n       0.21911404, 0.2162031 , 0.22077529, 0.24156045, 0.22863854]), 'split1_train_f1_macro': array([0.25974477, 0.25121215, 0.25577942, 0.24847649, 0.24922876,\n       0.24040952, 0.25485949, 0.25529243, 0.25410275, 0.24206047,\n       0.26191847, 0.25905688, 0.26165736, 0.24658006, 0.25925933,\n       0.2561897 , 0.24192634, 0.25698902, 0.2378881 , 0.24724097]), 'split2_train_f1_macro': array([0.24320766, 0.25804559, 0.24744284, 0.27254447, 0.23646503,\n       0.26542722, 0.2704851 , 0.26447035, 0.2619104 , 0.27968044,\n       0.24941357, 0.26265035, 0.27497866, 0.25948085, 0.22873592,\n       0.23779618, 0.24874887, 0.24565687, 0.26794378, 0.2515598 ]), 'split3_train_f1_macro': array([0.26721088, 0.26919652, 0.26484971, 0.27073038, 0.28166824,\n       0.27555489, 0.27025831, 0.25600592, 0.26386272, 0.2584269 ,\n       0.27614839, 0.26181868, 0.26817889, 0.25746146, 0.2761228 ,\n       0.28577027, 0.26398259, 0.28208831, 0.26041039, 0.26524805]), 'split4_train_f1_macro': array([0.26242282, 0.27373022, 0.27449766, 0.29239846, 0.28607317,\n       0.26730705, 0.27793705, 0.26686812, 0.27680187, 0.26198541,\n       0.28296598, 0.28558226, 0.28362016, 0.2890563 , 0.25299841,\n       0.27028863, 0.3019101 , 0.29530045, 0.29575379, 0.2845585 ]), 'split5_train_f1_macro': array([0.26164228, 0.25877035, 0.25690666, 0.28050583, 0.26889031,\n       0.27354558, 0.27141767, 0.28977834, 0.25769958, 0.26680673,\n       0.25141375, 0.28260253, 0.26427657, 0.26755754, 0.26615454,\n       0.26636986, 0.26733352, 0.25404545, 0.28025887, 0.27457184]), 'split6_train_f1_macro': array([0.2403754 , 0.2518825 , 0.24614227, 0.24776129, 0.25752729,\n       0.25606146, 0.25399028, 0.27399193, 0.24748914, 0.26256493,\n       0.24533447, 0.26434803, 0.25914688, 0.26216223, 0.25323899,\n       0.2442016 , 0.25144743, 0.2500593 , 0.26206636, 0.2517399 ]), 'split7_train_f1_macro': array([0.26566471, 0.25158558, 0.26873393, 0.27606509, 0.254476  ,\n       0.26417957, 0.26509491, 0.25872303, 0.27157003, 0.25735006,\n       0.26220665, 0.26242593, 0.26259452, 0.24215741, 0.23737466,\n       0.25912243, 0.24326172, 0.25937494, 0.26304857, 0.2640368 ]), 'split8_train_f1_macro': array([0.26585876, 0.28218216, 0.27224822, 0.29639126, 0.27820445,\n       0.28249256, 0.29595005, 0.28358236, 0.29936774, 0.28034015,\n       0.28222661, 0.28585483, 0.27302224, 0.2894321 , 0.28011974,\n       0.27720941, 0.28414822, 0.28521272, 0.2941098 , 0.29788488]), 'split9_train_f1_macro': array([0.24822238, 0.23476279, 0.23569485, 0.2589527 , 0.2356026 ,\n       0.24664031, 0.24261564, 0.24182897, 0.24025252, 0.2339153 ,\n       0.25107651, 0.2392389 , 0.24621315, 0.24386689, 0.24612869,\n       0.23492919, 0.24152917, 0.24657034, 0.25016779, 0.2585922 ]), 'mean_train_f1_macro': array([0.253171  , 0.25410467, 0.25674057, 0.26638529, 0.25700873,\n       0.25891521, 0.26125258, 0.26151142, 0.26072978, 0.25677538,\n       0.26127846, 0.26170505, 0.26199438, 0.25779817, 0.25133126,\n       0.25509913, 0.2560491 , 0.25960727, 0.26532079, 0.26240715]), 'std_train_f1_macro': array([0.01511507, 0.01950893, 0.01242302, 0.02190631, 0.02054205,\n       0.01844192, 0.02200678, 0.01818787, 0.01797027, 0.01736995,\n       0.01361374, 0.02106325, 0.01528478, 0.02017715, 0.01979989,\n       0.01981063, 0.02306304, 0.02106311, 0.01889864, 0.01877338]), 'split0_test_neg_root_mean_squared_error': array([-1.38357714, -1.43427433, -1.4040757 , -1.41421356, -1.43427433,\n       -1.44420022, -1.42427927, -1.37321312, -1.37321312, -1.3938641 ,\n       -1.4832397 , -1.3938641 , -1.42427927, -1.3938641 , -1.4040757 ,\n       -1.2983506 , -1.42427927, -1.38357714, -1.3938641 , -1.42427927]), 'split1_test_neg_root_mean_squared_error': array([-1.72353945, -1.71498585, -1.69774938, -1.74052054, -1.74052054,\n       -1.75733756, -1.74052054, -1.71498585, -1.73205081, -1.71498585,\n       -1.79869234, -1.72353945, -1.75733756, -1.84709629, -1.72353945,\n       -1.73205081, -1.68906518, -1.6803361 , -1.75733756, -1.77399516]), 'split2_test_neg_root_mean_squared_error': array([-1.56242647, -1.50489398, -1.53392998, -1.54348727, -1.47528661,\n       -1.52431277, -1.62697843, -1.48522131, -1.51463449, -1.55298574,\n       -1.58113883, -1.50489398, -1.58113883, -1.51463449, -1.50489398,\n       -1.59963231, -1.47528661, -1.60879933, -1.58113883, -1.55298574]), 'split3_test_neg_root_mean_squared_error': array([-2.3136424 , -2.3136424 , -2.33263295, -2.35147013, -2.3763541 ,\n       -2.27518584, -2.35771574, -2.28807651, -2.33263295, -2.30089497,\n       -2.26222171, -2.19625349, -2.32631999, -2.33263295, -2.3136424 ,\n       -2.27518584, -2.24918286, -2.32631999, -2.28807651, -2.29449469]), 'split4_test_neg_root_mean_squared_error': array([-1.33944677, -1.31730563, -1.39326109, -1.3826658 , -1.40377642,\n       -1.42457424, -1.30609431, -1.21267813, -1.47528661, -1.26025208,\n       -1.31730563, -1.39326109, -1.3826658 , -1.32842233, -1.27186755,\n       -1.3826658 , -1.2833779 , -1.44507276, -1.41421356, -1.27186755]), 'split5_test_neg_root_mean_squared_error': array([-1.71498585, -1.68906518, -1.72353945, -1.78226558, -1.73205081,\n       -1.56242647, -1.63599223, -1.74894926, -1.67156144, -1.6803361 ,\n       -1.79049779, -1.6803361 , -1.6803361 , -1.70638938, -1.67156144,\n       -1.74052054, -1.63599223, -1.78226558, -1.75733756, -1.71498585]), 'split6_test_neg_root_mean_squared_error': array([-1.31730563, -1.32842233, -1.32842233, -1.3826658 , -1.44507276,\n       -1.39326109, -1.41421356, -1.40377642, -1.47528661, -1.39326109,\n       -1.31730563, -1.46528455, -1.36122782, -1.41421356, -1.40377642,\n       -1.32842233, -1.3826658 , -1.40377642, -1.40377642, -1.36122782]), 'split7_test_neg_root_mean_squared_error': array([-2.16251488, -2.12824147, -2.18282063, -2.06511643, -2.18954736,\n       -2.2096047 , -2.15570379, -2.23606798, -2.15570379, -2.22948161,\n       -2.16930458, -2.19625349, -2.13514017, -2.12824147, -2.16930458,\n       -2.18282063, -2.14887111, -2.18282063, -2.15570379, -2.15570379]), 'split8_test_neg_root_mean_squared_error': array([-1.83911744, -1.85504083, -1.83110381, -1.85504083, -1.86295148,\n       -1.78226558, -1.85504083, -1.90201132, -1.96289103, -1.83911744,\n       -1.98523965, -1.88648444, -1.87082869, -1.92506684, -1.91741247,\n       -1.87867287, -1.940285  , -1.84709629, -1.91741247, -1.85504083]), 'split9_test_neg_root_mean_squared_error': array([-1.45521375, -1.54348727, -1.49509   , -1.58113883, -1.55298574,\n       -1.46528455, -1.59041245, -1.55298574, -1.59041245, -1.55298574,\n       -1.59963231, -1.50489398, -1.54348727, -1.50489398, -1.41421356,\n       -1.50489398, -1.56242647, -1.54348727, -1.59041245, -1.51463449]), 'mean_test_neg_root_mean_squared_error': array([-1.68117698, -1.68293593, -1.69226253, -1.70985848, -1.72128202,\n       -1.6838453 , -1.71069512, -1.69179656, -1.72836733, -1.69181647,\n       -1.73045782, -1.69450647, -1.70627615, -1.70954554, -1.67942876,\n       -1.69232157, -1.67914324, -1.72035515, -1.72592733, -1.69192152]), 'std_test_neg_root_mean_squared_error': array([0.3259586 , 0.31608787, 0.32245716, 0.30181099, 0.31894519,\n       0.30630812, 0.31608349, 0.34288815, 0.30412871, 0.32941362,\n       0.31471441, 0.29102964, 0.30727841, 0.32263401, 0.33459831,\n       0.32344881, 0.31311499, 0.30589448, 0.29831191, 0.31941106]), 'rank_test_neg_root_mean_squared_error': array([ 3,  4,  9, 14, 17,  5, 15,  6, 19,  7, 20, 11, 12, 13,  2, 10,  1,\n       16, 18,  8]), 'split0_train_neg_root_mean_squared_error': array([-1.33700475, -1.35159069, -1.29856633, -1.36002691, -1.32965178,\n       -1.33944677, -1.3540064 , -1.33210728, -1.35521264, -1.29856633,\n       -1.31233465, -1.35882494, -1.34674626, -1.347959  , -1.32965178,\n       -1.34553243, -1.32225792, -1.3540064 , -1.3234931 , -1.34188434]), 'split1_train_neg_root_mean_squared_error': array([-1.30146497, -1.28636042, -1.30271578, -1.29895974, -1.29015314,\n       -1.30146497, -1.28889014, -1.26851114, -1.30271578, -1.29895974,\n       -1.33604502, -1.28636042, -1.29015314, -1.3052138 , -1.28889014,\n       -1.28001425, -1.28509369, -1.30895189, -1.29393474, -1.31391947]), 'split2_train_neg_root_mean_squared_error': array([-1.33116001, -1.31267933, -1.30146497, -1.32748446, -1.28382572,\n       -1.28382572, -1.2914149 , -1.29895974, -1.28509369, -1.3052138 ,\n       -1.31267933, -1.30146497, -1.2914149 , -1.28636042, -1.31143803,\n       -1.2607841 , -1.30021296, -1.2761914 , -1.30396539, -1.29015314]), 'split3_train_neg_root_mean_squared_error': array([-1.23467808, -1.25819787, -1.24256748, -1.2093555 , -1.21204595,\n       -1.23862906, -1.23599648, -1.24779937, -1.24256748, -1.22939036,\n       -1.22806487, -1.2659407 , -1.23071442, -1.2607841 , -1.22939036,\n       -1.23203706, -1.23994326, -1.22806487, -1.24649345, -1.24387751]), 'split4_train_neg_root_mean_squared_error': array([-1.31267933, -1.29393474, -1.29770532, -1.29770532, -1.28382572,\n       -1.31391947, -1.29267543, -1.32748446, -1.27746696, -1.31019555,\n       -1.30271578, -1.29267543, -1.30396539, -1.30021296, -1.281286  ,\n       -1.29519282, -1.26851114, -1.2659407 , -1.29895974, -1.30146497]), 'split5_train_neg_root_mean_squared_error': array([-1.28382572, -1.29644967, -1.27874124, -1.26207523, -1.2761914 ,\n       -1.27874124, -1.28255649, -1.25170893, -1.28382572, -1.26851114,\n       -1.31763286, -1.28889014, -1.2761914 , -1.26851114, -1.29519282,\n       -1.25690276, -1.30146497, -1.28382572, -1.29015314, -1.31515843]), 'split6_train_neg_root_mean_squared_error': array([-1.29519282, -1.31639623, -1.31019555, -1.34576184, -1.3052138 ,\n       -1.32993595, -1.32502842, -1.30646102, -1.31639623, -1.31143803,\n       -1.32010265, -1.30021296, -1.33238294, -1.33604502, -1.31639623,\n       -1.31515843, -1.32133582, -1.33238294, -1.30646102, -1.30396539]), 'split7_train_neg_root_mean_squared_error': array([-1.23731347, -1.26979441, -1.26207523, -1.2659407 , -1.26851114,\n       -1.27107639, -1.25949165, -1.29015314, -1.25819787, -1.2761914 ,\n       -1.26722657, -1.27107639, -1.26336503, -1.27107639, -1.25430854,\n       -1.27491457, -1.26207523, -1.24779937, -1.26851114, -1.24125606]), 'split8_train_neg_root_mean_squared_error': array([-1.32625701, -1.30021296, -1.30646102, -1.30396539, -1.32010265,\n       -1.28255649, -1.28889014, -1.31886833, -1.29267543, -1.28636042,\n       -1.3052138 , -1.3052138 , -1.32625701, -1.31391947, -1.31639623,\n       -1.31886833, -1.30895189, -1.29393474, -1.28509369, -1.2876259 ]), 'split9_train_neg_root_mean_squared_error': array([-1.33726348, -1.32993595, -1.31886833, -1.29393474, -1.32625701,\n       -1.33848083, -1.3237987 , -1.32010265, -1.33848083, -1.34091223,\n       -1.33848083, -1.35900903, -1.30146497, -1.33116001, -1.30895189,\n       -1.31763286, -1.32748446, -1.31267933, -1.31391947, -1.32748446]), 'mean_train_neg_root_mean_squared_error': array([-1.29968396, -1.30155523, -1.29193612, -1.29652098, -1.28957783,\n       -1.29780769, -1.29427487, -1.29621561, -1.29526326, -1.2925739 ,\n       -1.30404964, -1.30296688, -1.29626555, -1.30212423, -1.2931902 ,\n       -1.28970376, -1.29373313, -1.29037774, -1.29309849, -1.29667897]), 'std_train_neg_root_mean_squared_error': array([0.03614067, 0.02618863, 0.02248779, 0.04147933, 0.03290628,\n       0.0311474 , 0.03193366, 0.02931119, 0.03266827, 0.0284914 ,\n       0.03150759, 0.03040316, 0.03268307, 0.02880653, 0.02955387,\n       0.03312978, 0.02766671, 0.03633898, 0.02130344, 0.03113112]), 'split0_test_neg_mean_absolute_error': array([-1.17142857, -1.14285714, -1.17142857, -1.14285714, -1.2       ,\n       -1.22857143, -1.17142857, -1.08571429, -1.08571429, -1.14285714,\n       -1.22857143, -1.14285714, -1.17142857, -1.14285714, -1.17142857,\n       -1.        , -1.17142857, -1.11428571, -1.14285714, -1.17142857]), 'split1_test_neg_mean_absolute_error': array([-1.38235294, -1.35294118, -1.35294118, -1.38235294, -1.32352941,\n       -1.38235294, -1.38235294, -1.35294118, -1.35294118, -1.29411765,\n       -1.41176471, -1.38235294, -1.32352941, -1.47058824, -1.38235294,\n       -1.35294118, -1.32352941, -1.29411765, -1.38235294, -1.38235294]), 'split2_test_neg_mean_absolute_error': array([-1.08823529, -1.08823529, -1.11764706, -1.08823529, -1.05882353,\n       -1.14705882, -1.17647059, -1.02941176, -1.11764706, -1.11764706,\n       -1.14705882, -1.08823529, -1.20588235, -1.05882353, -1.08823529,\n       -1.14705882, -1.05882353, -1.17647059, -1.14705882, -1.11764706]), 'split3_test_neg_mean_absolute_error': array([-1.82352941, -1.82352941, -1.85294118, -1.82352941, -1.88235294,\n       -1.82352941, -1.85294118, -1.76470588, -1.85294118, -1.76470588,\n       -1.76470588, -1.70588235, -1.82352941, -1.79411765, -1.82352941,\n       -1.82352941, -1.76470588, -1.88235294, -1.76470588, -1.79411765]), 'split4_test_neg_mean_absolute_error': array([-1.14705882, -1.14705882, -1.17647059, -1.14705882, -1.14705882,\n       -1.20588235, -1.11764706, -1.        , -1.23529412, -1.05882353,\n       -1.08823529, -1.17647059, -1.20588235, -1.11764706, -1.08823529,\n       -1.14705882, -1.05882353, -1.26470588, -1.11764706, -1.02941176]), 'split5_test_neg_mean_absolute_error': array([-1.23529412, -1.20588235, -1.26470588, -1.17647059, -1.23529412,\n       -1.14705882, -1.14705882, -1.23529412, -1.14705882, -1.17647059,\n       -1.20588235, -1.17647059, -1.17647059, -1.20588235, -1.14705882,\n       -1.20588235, -1.14705882, -1.29411765, -1.20588235, -1.17647059]), 'split6_test_neg_mean_absolute_error': array([-0.91176471, -0.88235294, -0.88235294, -0.91176471, -0.97058824,\n       -0.94117647, -0.94117647, -0.97058824, -1.05882353, -0.94117647,\n       -0.91176471, -1.02941176, -0.97058824, -1.        , -0.97058824,\n       -0.88235294, -0.97058824, -0.97058824, -0.97058824, -0.97058824]), 'split7_test_neg_mean_absolute_error': array([-1.55882353, -1.52941176, -1.64705882, -1.44117647, -1.67647059,\n       -1.64705882, -1.58823529, -1.64705882, -1.58823529, -1.61764706,\n       -1.58823529, -1.64705882, -1.61764706, -1.52941176, -1.64705882,\n       -1.64705882, -1.55882353, -1.64705882, -1.58823529, -1.58823529]), 'split8_test_neg_mean_absolute_error': array([-1.5       , -1.5       , -1.47058824, -1.5       , -1.47058824,\n       -1.47058824, -1.5       , -1.55882353, -1.61764706, -1.5       ,\n       -1.64705882, -1.55882353, -1.55882353, -1.58823529, -1.55882353,\n       -1.52941176, -1.58823529, -1.52941176, -1.55882353, -1.5       ]), 'split9_test_neg_mean_absolute_error': array([-1.11764706, -1.20588235, -1.17647059, -1.26470588, -1.23529412,\n       -1.14705882, -1.23529412, -1.17647059, -1.17647059, -1.17647059,\n       -1.26470588, -1.14705882, -1.20588235, -1.14705882, -1.05882353,\n       -1.14705882, -1.20588235, -1.20588235, -1.23529412, -1.17647059]), 'mean_test_neg_mean_absolute_error': array([-1.29361345, -1.28781513, -1.3112605 , -1.28781513, -1.32      ,\n       -1.31403361, -1.3112605 , -1.28210084, -1.32327731, -1.2789916 ,\n       -1.32579832, -1.30546218, -1.32596639, -1.30546218, -1.29361345,\n       -1.28823529, -1.28478992, -1.33789916, -1.31134454, -1.29067227]), 'std_test_neg_mean_absolute_error': array([0.25697836, 0.25555926, 0.26698425, 0.2448412 , 0.26738772,\n       0.25324559, 0.25606883, 0.272045  , 0.25831803, 0.25057099,\n       0.25680432, 0.23565436, 0.24549135, 0.25436692, 0.27643897,\n       0.28143232, 0.25256385, 0.25812507, 0.23966859, 0.25202701]), 'rank_test_neg_mean_absolute_error': array([ 8,  4, 12,  4, 16, 15, 12,  2, 17,  1, 18, 11, 19, 10,  8,  6,  3,\n       20, 14,  7]), 'split0_train_neg_mean_absolute_error': array([-1.06862745, -1.08823529, -1.01960784, -1.08496732, -1.05555556,\n       -1.06862745, -1.0751634 , -1.05555556, -1.06535948, -1.03267974,\n       -1.02287582, -1.08169935, -1.06862745, -1.07189542, -1.06862745,\n       -1.07189542, -1.05555556, -1.0751634 , -1.03267974, -1.05555556]), 'split1_train_neg_mean_absolute_error': array([-1.00325733, -1.00325733, -1.00651466, -1.00977199, -1.00651466,\n       -1.0228013 , -0.99674267, -0.99022801, -1.01302932, -1.01628664,\n       -1.0228013 , -0.99674267, -0.99348534, -1.01954397, -0.99674267,\n       -0.98697068, -1.00651466, -1.00977199, -1.01628664, -1.02931596]), 'split2_train_neg_mean_absolute_error': array([-1.03583062, -1.00651466, -1.00977199, -1.01302932, -1.01628664,\n       -0.98371336, -0.99022801, -0.99674267, -0.99348534, -0.98697068,\n       -1.01954397, -0.99674267, -0.98371336, -0.99022801, -1.03583062,\n       -0.99674267, -1.01302932, -0.99674267, -0.99674267, -1.        ]), 'split3_train_neg_mean_absolute_error': array([-0.95114007, -0.95765472, -0.95765472, -0.92833876, -0.9218241 ,\n       -0.94136808, -0.94788274, -0.96416938, -0.95765472, -0.95114007,\n       -0.93485342, -0.97068404, -0.94788274, -0.97068404, -0.93811075,\n       -0.93159609, -0.95765472, -0.92833876, -0.95439739, -0.95439739]), 'split4_train_neg_mean_absolute_error': array([-1.00651466, -0.99022801, -0.98697068, -0.98045603, -0.97068404,\n       -1.00325733, -0.98697068, -1.01302932, -0.97394137, -1.00651466,\n       -0.98045603, -0.98045603, -0.98371336, -0.98045603, -0.99674267,\n       -0.99348534, -0.95114007, -0.95114007, -0.97068404, -0.9771987 ]), 'split5_train_neg_mean_absolute_error': array([-0.99022801, -1.00325733, -0.99022801, -0.95439739, -0.9771987 ,\n       -0.98371336, -0.98045603, -0.94136808, -0.99674267, -0.9771987 ,\n       -1.02605863, -0.9771987 , -0.98371336, -0.97068404, -0.99348534,\n       -0.96742671, -0.99674267, -0.98371336, -0.98045603, -1.00651466]), 'split6_train_neg_mean_absolute_error': array([-1.00651466, -1.01628664, -1.01954397, -1.03583062, -1.        ,\n       -1.02605863, -1.01954397, -0.98371336, -1.01628664, -1.00977199,\n       -1.02605863, -0.99348534, -1.01954397, -1.0228013 , -1.01628664,\n       -1.01302932, -1.0228013 , -1.02605863, -0.99674267, -1.00325733]), 'split7_train_neg_mean_absolute_error': array([-0.95114007, -0.98045603, -0.96091205, -0.96416938, -0.98371336,\n       -0.97068404, -0.96091205, -0.98697068, -0.95114007, -0.9771987 ,\n       -0.96742671, -0.97068404, -0.96416938, -0.98371336, -0.98697068,\n       -0.98045603, -0.98045603, -0.95765472, -0.96416938, -0.94788274]), 'split8_train_neg_mean_absolute_error': array([-1.00977199, -0.98045603, -0.99022801, -0.97068404, -0.99348534,\n       -0.97394137, -0.96416938, -0.99674267, -0.96091205, -0.9771987 ,\n       -0.97394137, -0.98045603, -1.00325733, -0.98371336, -0.99674267,\n       -0.99674267, -0.98371336, -0.97068404, -0.96091205, -0.96091205]), 'split9_train_neg_mean_absolute_error': array([-1.03908795, -1.04560261, -1.03583062, -0.99674267, -1.04234528,\n       -1.04234528, -1.02931596, -1.03257329, -1.04234528, -1.05537459,\n       -1.03583062, -1.05863192, -1.01628664, -1.03583062, -1.0228013 ,\n       -1.03908795, -1.03257329, -1.02605863, -1.0228013 , -1.01954397]), 'mean_train_neg_mean_absolute_error': array([-1.00621128, -1.00719486, -0.99772626, -0.99383875, -0.99676077,\n       -1.00165102, -0.99513849, -0.9961093 , -0.99708969, -0.99903345,\n       -1.00098465, -1.00067808, -0.99643929, -1.00295501, -1.00523408,\n       -0.99774329, -1.0000181 , -0.99253263, -0.98958719, -0.99545784]), 'std_train_neg_mean_absolute_error': array([0.03492376, 0.03511249, 0.02412102, 0.04259072, 0.03588984,\n       0.03632058, 0.0358334 , 0.03072311, 0.03585483, 0.02940223,\n       0.03228549, 0.03629633, 0.03174747, 0.03161353, 0.03252549,\n       0.03629209, 0.03117336, 0.04122688, 0.02631115, 0.03319356])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["only_totals"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 2)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"estimator__regressor": "[RandomForestRegressor(max_depth = 5, criterion = 'squared_error', n_estimators = 150)]", "estimator__clf": "[XGBClassifier(max_depth = 10, n_estimators = 100, criterion = 'entropy')]", "estimator__regressor__n_estimators": "[50, 100, 125, 150]", "estimator__clf__n_estimators": "[50, 100, 125, 150]", "estimator__clf__max_depth": "[3, 5, 10]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10}}}]