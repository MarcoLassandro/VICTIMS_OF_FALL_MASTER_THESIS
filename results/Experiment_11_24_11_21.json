[{"experiment_name": "Experiment_11_24_11_21", "dataset_variant": "complete", "estimator": "LogisticAT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.29310924369747904, "f1_micro": 0.29310924369747904, "f1_macro": 0.27600556122338527, "neg_root_mean_squared_error": -1.6499189926074234, "neg_mean_absolute_error": -1.2352941176470589}, "mean_train_score": {"accuracy": 0.3189936343701433, "f1_micro": 0.3189936343701433, "f1_macro": 0.31151004663211884, "neg_root_mean_squared_error": -1.5346272425216265, "neg_mean_absolute_error": -1.1186082902216263}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__alpha': 1.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__alpha': 0.03125}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=17), 'estimator__alpha': 0.125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__alpha': 1.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__alpha': 0.03125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__alpha': 0.125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 23, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=23), 'estimator__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__alpha': 0.015625}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__alpha': 0.03125}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=9), 'estimator__alpha': 0.125}]", "cv_results": "{'fit_time': array([117.43684316, 118.11084461, 123.16250396, 118.45884633,\n       121.18650126, 125.95849895, 123.59649825, 126.69821119,\n       123.11923099, 128.97778177]), 'score_time': array([0.1200006 , 0.08799958, 0.08199716, 0.13200164, 0.18099833,\n       0.05300188, 0.11799955, 0.00399494, 0.00698066, 0.00299954]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=23)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=9)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.34285714, 0.38235294, 0.29411765, 0.29411765, 0.32352941,\n       0.29411765, 0.26470588, 0.23529412, 0.29411765, 0.20588235]), 'train_accuracy': array([0.31045752, 0.32247557, 0.30944625, 0.3257329 , 0.30944625,\n       0.31921824, 0.33550489, 0.34527687, 0.28990228, 0.32247557]), 'test_f1_micro': array([0.34285714, 0.38235294, 0.29411765, 0.29411765, 0.32352941,\n       0.29411765, 0.26470588, 0.23529412, 0.29411765, 0.20588235]), 'train_f1_micro': array([0.31045752, 0.32247557, 0.30944625, 0.3257329 , 0.30944625,\n       0.31921824, 0.33550489, 0.34527687, 0.28990228, 0.32247557]), 'test_f1_macro': array([0.37071341, 0.36940837, 0.26349206, 0.28502208, 0.28605442,\n       0.26410256, 0.27567694, 0.20436508, 0.27026307, 0.17095761]), 'train_f1_macro': array([0.30316037, 0.3191776 , 0.30903389, 0.31816503, 0.29416853,\n       0.31191602, 0.33577917, 0.32985535, 0.27934013, 0.31450439]), 'test_neg_root_mean_squared_error': array([-1.38357714, -1.43486011, -1.90972742, -1.97036873, -1.45521375,\n       -1.54348727, -1.71498585, -1.83911744, -1.72353945, -1.52431277]), 'train_neg_root_mean_squared_error': array([-1.52859455, -1.54940358, -1.46956086, -1.51001003, -1.59294045,\n       -1.56405053, -1.51216565, -1.52930122, -1.55987972, -1.53036582]), 'test_neg_mean_absolute_error': array([-1.        , -1.        , -1.41176471, -1.47058824, -1.05882353,\n       -1.14705882, -1.35294118, -1.44117647, -1.26470588, -1.20588235]), 'train_neg_mean_absolute_error': array([-1.12745098, -1.1237785 , -1.09120521, -1.1009772 , -1.16286645,\n       -1.13680782, -1.09446254, -1.08143322, -1.15635179, -1.11074919])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticAT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_11_24_11_21", "dataset_variant": "only_totals", "estimator": "LogisticAT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3045378151260504, "f1_micro": 0.3045378151260504, "f1_macro": 0.27057750716530027, "neg_root_mean_squared_error": -1.5915169088683627, "neg_mean_absolute_error": -1.1680672268907561}, "mean_train_score": {"accuracy": 0.3108439249749846, "f1_micro": 0.3108439249749846, "f1_macro": 0.29530273239862603, "neg_root_mean_squared_error": -1.561607395116377, "neg_mean_absolute_error": -1.1358870366822083}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 0.015625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 0.03125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 0.0625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 8.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 0.5}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 0.015625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 0.125}]", "cv_results": "{'fit_time': array([82.13060164, 82.78260779, 80.61660314, 82.40160728, 80.7976048 ,\n       82.56760883, 82.55460691, 76.69099331, 77.86999798, 76.43799567]), 'score_time': array([0.06100154, 0.01200008, 0.08400106, 0.02499819, 0.08199954,\n       0.0279994 , 0.01899838, 0.0030005 , 0.00299907, 0.00299907]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.45714286, 0.32352941, 0.32352941, 0.20588235, 0.29411765,\n       0.41176471, 0.35294118, 0.20588235, 0.20588235, 0.26470588]), 'train_accuracy': array([0.29084967, 0.31921824, 0.29967427, 0.30944625, 0.30618893,\n       0.32899023, 0.29315961, 0.31921824, 0.31270358, 0.32899023]), 'test_f1_micro': array([0.45714286, 0.32352941, 0.32352941, 0.20588235, 0.29411765,\n       0.41176471, 0.35294118, 0.20588235, 0.20588235, 0.26470588]), 'train_f1_micro': array([0.29084967, 0.31921824, 0.29967427, 0.30944625, 0.30618893,\n       0.32899023, 0.29315961, 0.31921824, 0.31270358, 0.32899023]), 'test_f1_macro': array([0.47345512, 0.2904968 , 0.256656  , 0.20150376, 0.23509824,\n       0.35070644, 0.31332953, 0.1859944 , 0.18076923, 0.21776557]), 'train_f1_macro': array([0.27064524, 0.30548876, 0.29027482, 0.2989799 , 0.28994808,\n       0.31289769, 0.27179138, 0.30407241, 0.29572468, 0.31320435]), 'test_neg_root_mean_squared_error': array([-1.37321312, -1.52431277, -1.73205081, -1.90201132, -1.32842233,\n       -1.51463449, -1.45521375, -1.88648444, -1.72353945, -1.47528661]), 'train_neg_root_mean_squared_error': array([-1.58113883, -1.5650915 , -1.55883528, -1.56196652, -1.58268316,\n       -1.58268316, -1.57959299, -1.4959228 , -1.56613177, -1.54202794]), 'test_neg_mean_absolute_error': array([-0.85714286, -1.08823529, -1.23529412, -1.5       , -1.        ,\n       -1.        , -1.05882353, -1.5       , -1.32352941, -1.11764706]), 'train_neg_mean_absolute_error': array([-1.17320261, -1.13355049, -1.14006515, -1.13029316, -1.14983713,\n       -1.13029316, -1.15960912, -1.08469055, -1.14332248, -1.11400651])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticAT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_11_24_11_21", "dataset_variant": "only_binary", "estimator": "LogisticAT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3047899159663866, "f1_micro": 0.3047899159663866, "f1_macro": 0.28507676951285976, "neg_root_mean_squared_error": -1.5993937824811124, "neg_mean_absolute_error": -1.1826050420168068}, "mean_train_score": {"accuracy": 0.31182325264524924, "f1_micro": 0.31182325264524924, "f1_macro": 0.30524564496984063, "neg_root_mean_squared_error": -1.5344231599439706, "neg_mean_absolute_error": -1.1270890549487984}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13), 'estimator__alpha': 0.0625}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__alpha': 0.0625}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__alpha': 0.125}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 2.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__alpha': 0.0625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__alpha': 0.015625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5), 'estimator__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=15), 'estimator__alpha': 0.125}]", "cv_results": "{'fit_time': array([92.85424995, 91.51125026, 91.33223128, 94.75424814, 92.99224639,\n       92.72624588, 92.1852448 , 89.0999949 , 88.11199737, 89.37101722]), 'score_time': array([0.05099964, 0.08200121, 0.07300138, 0.01599622, 0.05100131,\n       0.01700044, 0.08299971, 0.00300336, 0.00400186, 0.00300002]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticAT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.37142857, 0.38235294, 0.26470588, 0.32352941, 0.38235294,\n       0.44117647, 0.29411765, 0.11764706, 0.20588235, 0.26470588]), 'train_accuracy': array([0.29738562, 0.31596091, 0.33550489, 0.30618893, 0.29315961,\n       0.29967427, 0.3029316 , 0.3485342 , 0.31596091, 0.3029316 ]), 'test_f1_micro': array([0.37142857, 0.38235294, 0.26470588, 0.32352941, 0.38235294,\n       0.44117647, 0.29411765, 0.11764706, 0.20588235, 0.26470588]), 'train_f1_micro': array([0.29738562, 0.31596091, 0.33550489, 0.30618893, 0.29315961,\n       0.29967427, 0.3029316 , 0.3485342 , 0.31596091, 0.3029316 ]), 'test_f1_macro': array([0.38470736, 0.35178097, 0.23809524, 0.30943105, 0.33806907,\n       0.42252747, 0.28253968, 0.1151753 , 0.18326118, 0.22518038]), 'train_f1_macro': array([0.2829173 , 0.31485064, 0.33496804, 0.30336123, 0.27771651,\n       0.29255598, 0.29482952, 0.34216191, 0.31212472, 0.29697062]), 'test_neg_root_mean_squared_error': array([-1.30930734, -1.45521375, -1.83911744, -1.940285  , -1.23669388,\n       -1.49509   , -1.59963231, -1.73205081, -1.67156144, -1.71498585]), 'train_neg_root_mean_squared_error': array([-1.56973   , -1.55987972, -1.46512109, -1.4959228 , -1.55045438,\n       -1.55569773, -1.56613177, -1.50893107, -1.52716979, -1.54519324]), 'test_neg_mean_absolute_error': array([-0.91428571, -1.        , -1.38235294, -1.41176471, -0.88235294,\n       -1.        , -1.20588235, -1.47058824, -1.26470588, -1.29411765]), 'train_neg_mean_absolute_error': array([-1.16339869, -1.14332248, -1.06514658, -1.10423453, -1.15309446,\n       -1.14983713, -1.14332248, -1.0781759 , -1.12703583, -1.14332248])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticAT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]