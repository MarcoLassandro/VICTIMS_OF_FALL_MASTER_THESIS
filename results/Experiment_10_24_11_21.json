[{"experiment_name": "Experiment_10_24_11_21", "dataset_variant": "complete", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.17865546218487396, "f1_micro": 0.17865546218487396, "f1_macro": 0.07823747732692508, "neg_root_mean_squared_error": -3.1014913841054947, "neg_mean_absolute_error": -2.4711764705882358}, "mean_train_score": {"accuracy": 0.19028975325200656, "f1_micro": 0.19028975325200656, "f1_macro": 0.0854608948823781, "neg_root_mean_squared_error": -3.028687492261291, "neg_mean_absolute_error": -2.376011794511507}, "best_params": "[{'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=15), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'lbfgs', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([826.10600495, 828.27300262, 819.81400156, 821.70999765,\n       827.36500478, 810.69699907, 815.58899093, 511.6095221 ,\n       509.54952073, 500.1225214 ]), 'score_time': array([0.07500172, 0.04899812, 0.09900093, 0.09300065, 0.0670011 ,\n       0.09600067, 0.11800051, 0.0449996 , 0.04300189, 0.0439992 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.20588235, 0.14705882, 0.17647059, 0.14705882,\n       0.08823529, 0.17647059, 0.14705882, 0.23529412, 0.20588235]), 'train_accuracy': array([0.18954248, 0.19218241, 0.18566775, 0.18241042, 0.19869707,\n       0.18566775, 0.2019544 , 0.19869707, 0.18241042, 0.18566775]), 'test_f1_micro': array([0.25714286, 0.20588235, 0.14705882, 0.17647059, 0.14705882,\n       0.08823529, 0.17647059, 0.14705882, 0.23529412, 0.20588235]), 'train_f1_micro': array([0.18954248, 0.19218241, 0.18566775, 0.18241042, 0.19869707,\n       0.18566775, 0.2019544 , 0.19869707, 0.18241042, 0.18566775]), 'test_f1_macro': array([0.11564626, 0.09157509, 0.06320346, 0.07750411, 0.06320346,\n       0.03174603, 0.07769424, 0.05986395, 0.10920635, 0.09273183]), 'train_f1_macro': array([0.08408847, 0.08716435, 0.08346825, 0.08112673, 0.09043933,\n       0.08261553, 0.09067723, 0.09034015, 0.08160261, 0.0830863 ]), 'test_neg_root_mean_squared_error': array([-2.43193045, -2.9852579 , -3.43853594, -3.16692465, -3.35629347,\n       -3.65818984, -2.84398229, -3.43853594, -2.94058818, -2.75467517]), 'train_neg_root_mean_squared_error': array([-3.00598531, -3.01408204, -3.11453459, -3.05167226, -2.97053938,\n       -3.08669521, -2.95073557, -2.966699  , -2.98639696, -3.1395346 ]), 'test_neg_mean_absolute_error': array([-1.8       , -2.32352941, -2.82352941, -2.5       , -2.73529412,\n       -3.08823529, -2.20588235, -2.82352941, -2.29411765, -2.11764706]), 'train_neg_mean_absolute_error': array([-2.35620915, -2.36156352, -2.46254072, -2.40065147, -2.31596091,\n       -2.43322476, -2.29641694, -2.31270358, -2.33224756, -2.48859935])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_10_24_11_21", "dataset_variant": "only_totals", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.1904201680672269, "f1_micro": 0.1904201680672269, "f1_macro": 0.08743914743666976, "neg_root_mean_squared_error": -3.03412677077007, "neg_mean_absolute_error": -2.400756302521008}, "mean_train_score": {"accuracy": 0.1974569415171063, "f1_micro": 0.1974569415171063, "f1_macro": 0.08998455410482567, "neg_root_mean_squared_error": -2.990472385372093, "neg_mean_absolute_error": -2.3375859572927977}, "best_params": "[{'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'lbfgs', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 1.0, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([755.43605423, 772.2480576 , 755.28105426, 760.82305193,\n       760.243047  , 744.2330544 , 754.30505395, 502.44799685,\n       484.06799889, 494.73101449]), 'score_time': array([0.08699918, 0.05199766, 0.09499812, 0.07900047, 0.08400202,\n       0.09099913, 0.09000111, 0.04499888, 0.04899836, 0.0449996 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=LogisticRegression()))]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__binary_...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.23529412, 0.17647059, 0.23529412, 0.14705882,\n       0.08823529, 0.17647059, 0.14705882, 0.23529412, 0.20588235]), 'train_accuracy': array([0.19281046, 0.19869707, 0.19869707, 0.19218241, 0.21172638,\n       0.19218241, 0.19543974, 0.20521173, 0.19218241, 0.19543974]), 'test_f1_micro': array([0.25714286, 0.23529412, 0.17647059, 0.23529412, 0.14705882,\n       0.08823529, 0.17647059, 0.14705882, 0.23529412, 0.20588235]), 'train_f1_micro': array([0.19281046, 0.19869707, 0.19869707, 0.19218241, 0.21172638,\n       0.19218241, 0.19543974, 0.20521173, 0.19218241, 0.19543974]), 'test_f1_macro': array([0.11564626, 0.12256494, 0.06966925, 0.11201702, 0.06320346,\n       0.03902116, 0.07769424, 0.06018519, 0.11375661, 0.10063336]), 'train_f1_macro': array([0.08697792, 0.09145123, 0.09203997, 0.08598154, 0.09783681,\n       0.08517232, 0.08943089, 0.09534694, 0.08681319, 0.08879473]), 'test_neg_root_mean_squared_error': array([-2.36038738, -2.92554671, -3.17156484, -2.93558292, -3.24943434,\n       -3.56040315, -2.84398229, -3.53969091, -3.        , -2.75467517]), 'train_neg_root_mean_squared_error': array([-3.03842494, -2.96175404, -2.98639696, -2.99347825, -2.8769555 ,\n       -3.11819291, -2.97711138, -2.96010388, -2.97984544, -3.01246055]), 'test_neg_mean_absolute_error': array([-1.74285714, -2.26470588, -2.52941176, -2.26470588, -2.61764706,\n       -2.97058824, -2.20588235, -2.94117647, -2.35294118, -2.11764706]), 'train_neg_mean_absolute_error': array([-2.38888889, -2.30944625, -2.33224756, -2.34201954, -2.2247557 ,\n       -2.46579805, -2.32247557, -2.30618893, -2.3257329 , -2.35830619])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_10_24_11_21", "dataset_variant": "only_binary", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.18764705882352942, "f1_micro": 0.18764705882352942, "f1_macro": 0.08497043406125886, "neg_root_mean_squared_error": -3.04302153301004, "neg_mean_absolute_error": -2.399075630252101}, "mean_train_score": {"accuracy": 0.1964797428200379, "f1_micro": 0.1964797428200379, "f1_macro": 0.08884263047250089, "neg_root_mean_squared_error": -2.9821448287234538, "neg_mean_absolute_error": -2.3297555938770733}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'lbfgs', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.6, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'lbfgs', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'newton-cg', 'estimator__estimator__C': 0.4, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=15), 'estimator__estimator__tol': 0.1, 'estimator__estimator__solver': 'sag', 'estimator__estimator__C': 1.0, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__C': 0.2, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([760.64252591, 780.73052478, 768.58152485, 765.74552393,\n       754.5225246 , 766.65452456, 766.17052197, 496.24002242,\n       498.00602269, 499.43804359]), 'score_time': array([0.16399837, 0.05800056, 0.06900311, 0.0930016 , 0.09700036,\n       0.12400055, 0.08099914, 0.04599905, 0.04499984, 0.04400015]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OrdinalBinaryClassifier(estimator=Logis...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.2       , 0.20588235, 0.17647059, 0.23529412, 0.17647059,\n       0.17647059, 0.20588235, 0.11764706, 0.20588235, 0.17647059]), 'train_accuracy': array([0.19281046, 0.19869707, 0.2019544 , 0.19543974, 0.20521173,\n       0.2019544 , 0.20521173, 0.20521173, 0.17915309, 0.17915309]), 'test_f1_micro': array([0.2       , 0.20588235, 0.17647059, 0.23529412, 0.17647059,\n       0.17647059, 0.20588235, 0.11764706, 0.20588235, 0.17647059]), 'train_f1_micro': array([0.19281046, 0.19869707, 0.2019544 , 0.19543974, 0.20521173,\n       0.2019544 , 0.20521173, 0.20521173, 0.17915309, 0.17915309]), 'test_f1_macro': array([0.09123649, 0.1004329 , 0.06989247, 0.1122449 , 0.08205128,\n       0.07804233, 0.09273183, 0.04960317, 0.09589947, 0.07756949]), 'train_f1_macro': array([0.08714001, 0.09036735, 0.09238095, 0.08826639, 0.09250261,\n       0.09146322, 0.09426154, 0.0937379 , 0.078834  , 0.07947233]), 'test_neg_root_mean_squared_error': array([-3.        , -3.04379794, -3.11542651, -2.87484015, -3.1389395 ,\n       -2.90537028, -2.78123967, -3.58919948, -3.22672662, -2.75467517]), 'train_neg_root_mean_squared_error': array([-2.99945529, -2.97492233, -2.97327948, -2.93413028, -2.91072374,\n       -2.95073557, -2.92412185, -2.90007301, -3.10825317, -3.14575356]), 'test_neg_mean_absolute_error': array([-2.31428571, -2.38235294, -2.47058824, -2.20588235, -2.5       ,\n       -2.26470588, -2.14705882, -3.        , -2.58823529, -2.11764706]), 'train_neg_mean_absolute_error': array([-2.3496732 , -2.32247557, -2.31921824, -2.28338762, -2.25732899,\n       -2.29641694, -2.27035831, -2.247557  , -2.45602606, -2.49511401])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OrdinalBinaryClassifier(estimator = LogisticRegression())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]