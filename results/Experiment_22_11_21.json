[{"experiment_name": "Experiment_22_11_21", "dataset_variant": "complete", "estimator": "GradientBoostingRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5087220867797515, "r2": 0.40961885837104983, "neg_mean_absolute_error": -1.225191689007138}, "mean_train_score": {"neg_root_mean_squared_error": -1.0218306900253835, "r2": 0.725379777901358, "neg_mean_absolute_error": -0.8128122381950466}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__subsample': 0.5, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 1, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 15, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 5, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.5, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 10, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 1, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}]", "cv_results": "{'fit_time': array([294.53798008, 211.89100313, 308.80943346, 328.6719842 ,\n       357.45901966, 302.44599986, 262.72600007, 281.77554488,\n       255.72099638, 290.36898065]), 'score_time': array([0.00199962, 0.00199938, 0.00200009, 0.00199986, 0.00299692,\n       0.00200033, 0.00200129, 0.00199938, 0.00200033, 0.0040009 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRe...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.42492141, -1.30326176, -1.53881203, -1.78077696, -1.31548769,\n       -1.53957278, -1.35140671, -1.86934081, -1.58017116, -1.38346956]), 'train_neg_root_mean_squared_error': array([-1.07772668, -1.02414051, -1.10300218, -1.10893973, -0.51983583,\n       -1.01409146, -1.12813294, -1.03244332, -1.01291459, -1.19707966]), 'test_r2': array([0.50610778, 0.57213863, 0.39007542, 0.21282616, 0.54995116,\n       0.3835661 , 0.52503871, 0.09669792, 0.35454748, 0.50523923]), 'train_r2': array([0.70172064, 0.73169336, 0.68959726, 0.68497577, 0.93113589,\n       0.73793153, 0.67567451, 0.72816349, 0.73834985, 0.63455549]), 'test_neg_mean_absolute_error': array([-1.14844899, -1.08983675, -1.19502672, -1.43689076, -1.0421976 ,\n       -1.18669397, -1.18501273, -1.51959727, -1.2896217 , -1.15859039]), 'train_neg_mean_absolute_error': array([-0.84155797, -0.81642557, -0.86162677, -0.88269213, -0.41974419,\n       -0.81250122, -0.85836261, -0.8384757 , -0.80942933, -0.98730689])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 50, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[5, 10, 15]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__subsample": "[1.0, 0.5, 0.2]", "estimator__loss": "['squared_error', 'absolute_error', 'huber', 'quantile']", "estimator__criterion": "['squared_error', 'absolute_error', 'mse', 'mae']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_22_11_21", "dataset_variant": "only_totals", "estimator": "GradientBoostingRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5337784421423533, "r2": 0.38749859080588844, "neg_mean_absolute_error": -1.2152431596821782}, "mean_train_score": {"neg_root_mean_squared_error": -0.9642631527959027, "r2": 0.7420758710428864, "neg_mean_absolute_error": -0.7391256783400169}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__subsample': 1.0, 'estimator__n_estimators': 100, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.1, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.5, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 15, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 1.0, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 10, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 15, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 1.0, 'estimator__n_estimators': 250, 'estimator__max_depth': 15, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'squared_error'}]", "cv_results": "{'fit_time': array([187.37399864, 363.11099696, 463.02200317, 393.52199626,\n       323.16799998, 312.553725  , 261.98700142, 368.01301932,\n       333.63597894, 210.58499813]), 'score_time': array([0.00099993, 0.00200462, 0.0030005 , 0.00200009, 0.00200129,\n       0.00199938, 0.00299978, 0.00200009, 0.00300002, 0.00200057]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=50, n_jobs=8,\n                   param_distributions={'estimator__criterion': ['squared_error',\n                                                                 'absolu...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.30470306, -1.40258406, -1.61188254, -1.8748961 , -1.2982711 ,\n       -1.50497637, -1.38396613, -1.86411849, -1.70968095, -1.38270563]), 'train_neg_root_mean_squared_error': array([-0.87590049, -0.51998836, -1.0794413 , -0.88909363, -1.10921176,\n       -1.01585151, -1.32636412, -1.17941523, -0.40911946, -1.23824568]), 'test_r2': array([0.58593004, 0.50443849, 0.3307756 , 0.12741848, 0.5616542 ,\n       0.41095913, 0.50187654, 0.10173792, 0.24441003, 0.50578548]), 'train_r2': array([0.80297766, 0.9308329 , 0.70271646, 0.79750091, 0.68646253,\n       0.73702105, 0.55168213, 0.64526111, 0.95731497, 0.60898899]), 'test_neg_mean_absolute_error': array([-1.02071934, -1.08114253, -1.2508078 , -1.47997239, -1.07474327,\n       -1.15122145, -1.18707585, -1.5232265 , -1.29547052, -1.08805194]), 'train_neg_mean_absolute_error': array([-0.52748094, -0.4279922 , -0.87506713, -0.69159093, -0.90501861,\n       -0.80792743, -1.01838664, -0.94792657, -0.2461784 , -0.94368795])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 50, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[5, 10, 15]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__subsample": "[1.0, 0.5, 0.2]", "estimator__loss": "['squared_error', 'absolute_error', 'huber', 'quantile']", "estimator__criterion": "['squared_error', 'absolute_error', 'mse', 'mae']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_22_11_21", "dataset_variant": "only_binary", "estimator": "GradientBoostingRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5475251209800622, "r2": 0.37689056574142155, "neg_mean_absolute_error": -1.2537836843721322}, "mean_train_score": {"neg_root_mean_squared_error": -0.9498975477881686, "r2": 0.7522636000149578, "neg_mean_absolute_error": -0.7288505392457798}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 15, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.5, 'estimator__n_estimators': 250, 'estimator__max_depth': 15, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.5, 'estimator__n_estimators': 200, 'estimator__max_depth': 10, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.5, 'estimator__n_estimators': 250, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 1, 'estimator__subsample': 0.5, 'estimator__n_estimators': 200, 'estimator__max_depth': 15, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.5, 'estimator__n_estimators': 100, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.1, 'estimator__criterion': 'absolute_error'}, {'feature_extraction__n_components': 3, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mse'}, {'feature_extraction__n_components': 1, 'estimator__subsample': 0.2, 'estimator__n_estimators': 250, 'estimator__max_depth': 5, 'estimator__loss': 'huber', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'squared_error'}, {'feature_extraction__n_components': 1, 'estimator__subsample': 1.0, 'estimator__n_estimators': 250, 'estimator__max_depth': 10, 'estimator__loss': 'absolute_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'mae'}, {'feature_extraction__n_components': 2, 'estimator__subsample': 0.2, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__loss': 'squared_error', 'estimator__learning_rate': 0.01, 'estimator__criterion': 'absolute_error'}]", "cv_results": "{'fit_time': array([389.65300012, 287.8140018 , 321.8629992 , 201.03099942,\n       259.46299672, 272.44901967, 282.68798041, 301.59400105,\n       327.67500353, 138.55299759]), 'score_time': array([0.00200009, 0.00299954, 0.00300026, 0.00200009, 0.00300312,\n       0.00199962, 0.00199938, 0.00199962, 0.00199819, 0.00199962]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingRegressor())]),\n                   n_iter=...\n                                        'estimator__loss': ['squared_error',\n                                                            'absolute_error',\n                                                            'huber',\n                                                            'quantile'],\n                                        'estimator__max_depth': [5, 10, 15],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'estimator__subsample': [1.0, 0.5, 0.2],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.47214795, -1.19614431, -1.64250144, -1.83208976, -1.29236918,\n       -1.4906816 , -1.51682657, -1.90062129, -1.64532125, -1.48654787]), 'train_neg_root_mean_squared_error': array([-1.1320351 , -0.50469218, -0.67584317, -1.13527047, -0.64644294,\n       -0.90255801, -1.29944543, -1.12229035, -0.84749922, -1.23289858]), 'test_r2': array([0.47282685, 0.63958162, 0.30510929, 0.166808  , 0.56563057,\n       0.4220958 , 0.40164638, 0.0662143 , 0.30022656, 0.42876628]), 'train_r2': array([0.67090163, 0.93484234, 0.88346278, 0.66983825, 0.89350703,\n       0.79240792, 0.56969478, 0.67879241, 0.81683016, 0.61235869]), 'test_neg_mean_absolute_error': array([-1.24146101, -0.97661241, -1.23902394, -1.44406333, -1.07068762,\n       -1.08752948, -1.29639945, -1.54628458, -1.37112293, -1.26465208]), 'train_neg_mean_absolute_error': array([-0.87231117, -0.41294286, -0.55777938, -0.84950432, -0.53153822,\n       -0.56004505, -1.02068305, -0.91433301, -0.56354105, -1.00582728])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 50, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[5, 10, 15]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__subsample": "[1.0, 0.5, 0.2]", "estimator__loss": "['squared_error', 'absolute_error', 'huber', 'quantile']", "estimator__criterion": "['squared_error', 'absolute_error', 'mse', 'mae']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]