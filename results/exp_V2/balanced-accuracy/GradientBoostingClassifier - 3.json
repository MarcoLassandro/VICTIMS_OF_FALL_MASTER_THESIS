[{"experiment_name": "GradientBoostingClassifier - 3", "dataset_variant": "complete", "estimator": "GradientBoostingClassifier()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.751324062233589, "f1_micro": 0.7657926829268293, "f1_macro": 0.7536701260547706, "neg_root_mean_squared_error": -0.47812726343888234, "neg_mean_absolute_error": -0.23420731707317072}, "mean_train_score": {"balanced_accuracy": 0.9424278813560543, "f1_micro": 0.9437626072557579, "f1_macro": 0.9419758674539397, "neg_root_mean_squared_error": -0.23420075731134213, "neg_mean_absolute_error": -0.056237392744242054}, "best_params": "[{'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=15)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=10)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=6)}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=3)}]", "cv_results": "{'fit_time': array([107.9579103 , 110.19438815, 110.4989574 , 109.95833588,\n       107.91790366, 111.10658693, 110.07536054, 109.76528788,\n       111.29862642, 108.48551941]), 'score_time': array([0.00350046, 0.0025003 , 0.00300026, 0.00300002, 0.00349998,\n       0.00300026, 0.00300026, 0.00450063, 0.00300026, 0.00350165]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoosti...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.64828431, 0.77818627, 0.73161765, 0.68137255, 0.76102941,\n       0.82480818, 0.89002558, 0.80208333, 0.69791667, 0.69791667]), 'train_balanced_accuracy': array([0.97797508, 0.9523053 , 0.95897196, 0.9129595 , 0.92429907,\n       0.94542636, 0.94007752, 0.93456397, 0.95676796, 0.9209321 ]), 'test_f1_micro': array([0.65853659, 0.7804878 , 0.75609756, 0.70731707, 0.7804878 ,\n       0.825     , 0.9       , 0.825     , 0.7       , 0.725     ]), 'train_f1_micro': array([0.97527473, 0.9532967 , 0.95879121, 0.91758242, 0.92857143,\n       0.94520548, 0.94246575, 0.9369863 , 0.95616438, 0.92328767]), 'test_f1_macro': array([0.64828431, 0.77568389, 0.73717949, 0.68461538, 0.76660342,\n       0.82222222, 0.89583333, 0.81068289, 0.69309463, 0.70250169]), 'train_f1_macro': array([0.97465318, 0.95185447, 0.95760047, 0.9146021 , 0.92598849,\n       0.94363108, 0.94052099, 0.93498749, 0.95498828, 0.9209321 ]), 'test_neg_root_mean_squared_error': array([-0.58434871, -0.46852129, -0.4938648 , -0.54100178, -0.46852129,\n       -0.41833001, -0.31622777, -0.41833001, -0.54772256, -0.52440442]), 'train_neg_root_mean_squared_error': array([-0.15724273, -0.21610946, -0.20299949, -0.28708463, -0.26726124,\n       -0.23408229, -0.23986297, -0.25102529, -0.20936957, -0.27696991]), 'test_neg_mean_absolute_error': array([-0.34146341, -0.2195122 , -0.24390244, -0.29268293, -0.2195122 ,\n       -0.175     , -0.1       , -0.175     , -0.3       , -0.275     ]), 'train_neg_mean_absolute_error': array([-0.02472527, -0.0467033 , -0.04120879, -0.08241758, -0.07142857,\n       -0.05479452, -0.05753425, -0.0630137 , -0.04383562, -0.07671233])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": [3], "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingClassifier()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "GradientBoostingClassifier - 3", "dataset_variant": "only_totals", "estimator": "GradientBoostingClassifier()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.7639492753623187, "f1_micro": 0.7777439024390245, "f1_macro": 0.7662241661204287, "neg_root_mean_squared_error": -0.46549991051363027, "neg_mean_absolute_error": -0.2222560975609756}, "mean_train_score": {"balanced_accuracy": 0.9282653036843417, "f1_micro": 0.9308633147674245, "f1_macro": 0.9285585063209318, "neg_root_mean_squared_error": -0.2622233304679995, "neg_mean_absolute_error": -0.06913668523257564}, "best_params": "[{'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3)}]", "cv_results": "{'fit_time': array([8.98657537, 8.5144732 , 8.50647163, 8.31592584, 8.13588381,\n       8.31492567, 8.35143757, 8.70451403, 8.48146749, 8.53397775]), 'score_time': array([0.0030005 , 0.00300074, 0.00350118, 0.00300074, 0.0035007 ,\n       0.00300074, 0.0035007 , 0.00300121, 0.00399971, 0.00350046]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.63970588, 0.81985294, 0.78186275, 0.79901961, 0.78186275,\n       0.78132992, 0.89002558, 0.79166667, 0.70833333, 0.64583333]), 'train_balanced_accuracy': array([0.91663551, 0.93196262, 0.91196262, 0.93096573, 0.94196262,\n       0.94108527, 0.91178295, 0.9384632 , 0.91469642, 0.9431361 ]), 'test_f1_micro': array([0.65853659, 0.82926829, 0.80487805, 0.80487805, 0.80487805,\n       0.775     , 0.9       , 0.8       , 0.725     , 0.675     ]), 'train_f1_micro': array([0.92307692, 0.93406593, 0.91758242, 0.93406593, 0.94230769,\n       0.94246575, 0.91506849, 0.9369863 , 0.92054795, 0.94246575]), 'test_f1_macro': array([0.64125   , 0.82251082, 0.78974359, 0.79901961, 0.78974359,\n       0.77372722, 0.89583333, 0.79166667, 0.71033575, 0.64841109]), 'train_f1_macro': array([0.9199447 , 0.93196262, 0.91441738, 0.93182457, 0.94064065,\n       0.94064075, 0.91219766, 0.93546726, 0.91751412, 0.94097535]), 'test_neg_root_mean_squared_error': array([-0.58434871, -0.41319694, -0.4417261 , -0.4417261 , -0.4417261 ,\n       -0.47434165, -0.31622777, -0.4472136 , -0.52440442, -0.57008771]), 'train_neg_root_mean_squared_error': array([-0.2773501 , -0.2567763 , -0.28708463, -0.2567763 , -0.24019223,\n       -0.23986297, -0.29143011, -0.25102529, -0.28187241, -0.23986297]), 'test_neg_mean_absolute_error': array([-0.34146341, -0.17073171, -0.19512195, -0.19512195, -0.19512195,\n       -0.225     , -0.1       , -0.2       , -0.275     , -0.325     ]), 'train_neg_mean_absolute_error': array([-0.07692308, -0.06593407, -0.08241758, -0.06593407, -0.05769231,\n       -0.05753425, -0.08493151, -0.0630137 , -0.07945205, -0.05753425])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": [3], "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingClassifier()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "GradientBoostingClassifier - 3", "dataset_variant": "only_binary", "estimator": "GradientBoostingClassifier()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.7172660912190962, "f1_micro": 0.7335975609756098, "f1_macro": 0.717314516354381, "neg_root_mean_squared_error": -0.5132748576251239, "neg_mean_absolute_error": -0.26640243902439026}, "mean_train_score": {"balanced_accuracy": 0.9581639153212205, "f1_micro": 0.9591148577449948, "f1_macro": 0.9578300730707596, "neg_root_mean_squared_error": -0.2008446172401836, "neg_mean_absolute_error": -0.040885142255005266}, "best_params": "[{'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13)}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4)}, {'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9)}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3)}]", "cv_results": "{'fit_time': array([76.0834558 , 77.43073511, 77.54726434, 76.99564195, 76.09395814,\n       77.53475976, 76.534549  , 75.40781355, 76.49504209, 76.33600783]), 'score_time': array([0.0030005 , 0.0035007 , 0.0030005 , 0.00350118, 0.0030005 ,\n       0.0030005 , 0.00350118, 0.00349998, 0.0035007 , 0.0030005 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=9)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GradientBoostingClassifier())]),\n                   n_iter=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.54779412, 0.73651961, 0.73161765, 0.71078431, 0.76102941,\n       0.78132992, 0.78900256, 0.75      , 0.6875    , 0.67708333]), 'train_balanced_accuracy': array([0.94429907, 0.96464174, 0.95931464, 0.95598131, 0.93663551,\n       0.95139535, 0.96674419, 0.96377731, 0.97371108, 0.96513895]), 'test_f1_micro': array([0.56097561, 0.73170732, 0.75609756, 0.73170732, 0.7804878 ,\n       0.775     , 0.775     , 0.775     , 0.725     , 0.725     ]), 'train_f1_micro': array([0.94505495, 0.96428571, 0.96153846, 0.95879121, 0.93956044,\n       0.95342466, 0.96438356, 0.96438356, 0.97260274, 0.96712329]), 'test_f1_macro': array([0.54779412, 0.72912913, 0.73717949, 0.71473751, 0.76660342,\n       0.77372722, 0.77485929, 0.75659229, 0.69252271, 0.68      ]), 'train_f1_macro': array([0.94341324, 0.96325374, 0.960231  , 0.95734608, 0.93750585,\n       0.95185033, 0.96346093, 0.96332537, 0.97186768, 0.96604651]), 'test_neg_root_mean_squared_error': array([-0.66258916, -0.51796977, -0.4938648 , -0.51796977, -0.46852129,\n       -0.47434165, -0.47434165, -0.47434165, -0.52440442, -0.52440442]), 'train_neg_root_mean_squared_error': array([-0.23440362, -0.18898224, -0.19611614, -0.20299949, -0.24584459,\n       -0.21581321, -0.18872318, -0.18872318, -0.16552118, -0.18131937]), 'test_neg_mean_absolute_error': array([-0.43902439, -0.26829268, -0.24390244, -0.26829268, -0.2195122 ,\n       -0.225     , -0.225     , -0.225     , -0.275     , -0.275     ]), 'train_neg_mean_absolute_error': array([-0.05494505, -0.03571429, -0.03846154, -0.04120879, -0.06043956,\n       -0.04657534, -0.03561644, -0.03561644, -0.02739726, -0.03287671])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": [3], "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingClassifier()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]