[{"experiment_name": "Experiment_3_08_12_21", "dataset_variant": "complete", "estimator": "SVC()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8047560975609755, "f1_micro": 0.8047560975609755, "f1_macro": 0.7224735469442678, "neg_root_mean_squared_error": -0.43851255843066494, "neg_mean_absolute_error": -0.1952439024390244}, "mean_train_score": {"accuracy": 0.8510409453560138, "f1_micro": 0.8510409453560138, "f1_macro": 0.7880678412892788, "neg_root_mean_squared_error": -0.38449199965388925, "neg_mean_absolute_error": -0.14895905464398615}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=11), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 24, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=24), 'estimator__tol': 0.1, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=13), 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=3), 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__C': 0.1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__tol': 0.1, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 23, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=23), 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5), 'estimator__tol': 0.1, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__tol': 0.1, 'estimator__kernel': 'linear', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=14), 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__C': 0.1}]", "cv_results": "{'fit_time': array([8.83400321, 8.91099977, 9.7409997 , 8.34999967, 9.11300087,\n       9.33899879, 9.1070025 , 7.67199707, 6.99599838, 7.26200199]), 'score_time': array([0.01300168, 0.00901103, 0.0079999 , 0.01200104, 0.0089972 ,\n       0.00699663, 0.00699735, 0.00399947, 0.00499821, 0.00499439]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=23)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_ite...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.73170732, 0.82926829, 0.87804878, 0.85365854, 0.80487805,\n       0.775     , 0.8       , 0.8       , 0.725     , 0.85      ]), 'train_accuracy': array([0.91208791, 0.84615385, 0.83241758, 0.83241758, 0.87637363,\n       0.85205479, 0.83835616, 0.84383562, 0.84383562, 0.83287671]), 'test_f1_micro': array([0.73170732, 0.82926829, 0.87804878, 0.85365854, 0.80487805,\n       0.775     , 0.8       , 0.8       , 0.725     , 0.85      ]), 'train_f1_micro': array([0.91208791, 0.84615385, 0.83241758, 0.83241758, 0.87637363,\n       0.85205479, 0.83835616, 0.84383562, 0.84383562, 0.83287671]), 'test_f1_macro': array([0.6479313 , 0.76023392, 0.82873851, 0.74159664, 0.73548387,\n       0.66386555, 0.71326165, 0.71326165, 0.62036238, 0.8       ]), 'train_f1_macro': array([0.87819977, 0.79334955, 0.75457329, 0.76097745, 0.81894751,\n       0.79124301, 0.77471257, 0.77488882, 0.77683025, 0.75695619]), 'test_neg_root_mean_squared_error': array([-0.51796977, -0.41319694, -0.34921515, -0.38254603, -0.4417261 ,\n       -0.47434165, -0.4472136 , -0.4472136 , -0.52440442, -0.38729833]), 'train_neg_root_mean_squared_error': array([-0.29649973, -0.39223227, -0.40936832, -0.40936832, -0.35160542,\n       -0.38463646, -0.40204954, -0.3951764 , -0.3951764 , -0.40880715]), 'test_neg_mean_absolute_error': array([-0.26829268, -0.17073171, -0.12195122, -0.14634146, -0.19512195,\n       -0.225     , -0.2       , -0.2       , -0.275     , -0.15      ]), 'train_neg_mean_absolute_error': array([-0.08791209, -0.15384615, -0.16758242, -0.16758242, -0.12362637,\n       -0.14794521, -0.16164384, -0.15616438, -0.15616438, -0.16712329])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "SVC()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__tol": "[1e-4, 1e-3, 0.1]", "estimator__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_08_12_21", "dataset_variant": "only_totals", "estimator": "SVC()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8223170731707317, "f1_micro": 0.8223170731707317, "f1_macro": 0.7382821464853302, "neg_root_mean_squared_error": -0.4124978063718504, "neg_mean_absolute_error": -0.1776829268292683}, "mean_train_score": {"accuracy": 0.8587038988408853, "f1_micro": 0.8587038988408853, "f1_macro": 0.7972402408683534, "neg_root_mean_squared_error": -0.37500066491756356, "neg_mean_absolute_error": -0.1412961011591149}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.1, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__C': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 1}]", "cv_results": "{'fit_time': array([9.65400243, 7.32000327, 7.73101664, 8.56101084, 8.95900846,\n       9.32000899, 7.3130002 , 6.03498268, 6.11799121, 5.91798162]), 'score_time': array([0.00399971, 0.00799823, 0.01898789, 0.03799939, 0.04599833,\n       0.02300215, 0.0059998 , 0.00400472, 0.00499487, 0.00400233]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions={'estimator__C': [0.0001, 0.1, 1, 2],\n                                        'estimator__kernel': ['linear', 'rbf',\n                                                              'sigmo...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.75609756, 0.85365854, 0.85365854, 0.80487805, 0.80487805,\n       0.75      , 0.9       , 0.825     , 0.725     , 0.95      ]), 'train_accuracy': array([0.86538462, 0.86813187, 0.83791209, 0.82967033, 0.86813187,\n       0.87123288, 0.83013699, 0.87945205, 0.88767123, 0.84931507]), 'test_f1_micro': array([0.75609756, 0.85365854, 0.85365854, 0.80487805, 0.80487805,\n       0.75      , 0.9       , 0.825     , 0.725     , 0.95      ]), 'train_f1_micro': array([0.86538462, 0.86813187, 0.83791209, 0.82967033, 0.86813187,\n       0.87123288, 0.83013699, 0.87945205, 0.88767123, 0.84931507]), 'test_f1_macro': array([0.66935484, 0.8016129 , 0.8016129 , 0.60952381, 0.73548387,\n       0.609375  , 0.84375   , 0.75841242, 0.62036238, 0.93333333]), 'train_f1_macro': array([0.81120132, 0.80774648, 0.76262007, 0.74469433, 0.81581278,\n       0.82337194, 0.76228992, 0.8269844 , 0.84083343, 0.77684775]), 'test_neg_root_mean_squared_error': array([-0.4938648 , -0.38254603, -0.38254603, -0.4417261 , -0.4417261 ,\n       -0.5       , -0.31622777, -0.41833001, -0.52440442, -0.2236068 ]), 'train_neg_root_mean_squared_error': array([-0.36689969, -0.36313652, -0.40260143, -0.41271015, -0.36313652,\n       -0.35884136, -0.41214441, -0.34720015, -0.33515484, -0.38818157]), 'test_neg_mean_absolute_error': array([-0.24390244, -0.14634146, -0.14634146, -0.19512195, -0.19512195,\n       -0.25      , -0.1       , -0.175     , -0.275     , -0.05      ]), 'train_neg_mean_absolute_error': array([-0.13461538, -0.13186813, -0.16208791, -0.17032967, -0.13186813,\n       -0.12876712, -0.16986301, -0.12054795, -0.11232877, -0.15068493])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "SVC()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__tol": "[1e-4, 1e-3, 0.1]", "estimator__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_08_12_21", "dataset_variant": "only_binary", "estimator": "SVC()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8270121951219511, "f1_micro": 0.8270121951219511, "f1_macro": 0.7489275676036123, "neg_root_mean_squared_error": -0.4145394756243547, "neg_mean_absolute_error": -0.17298780487804882}, "mean_train_score": {"accuracy": 0.8496545235586332, "f1_micro": 0.8496545235586332, "f1_macro": 0.778881379634481, "neg_root_mean_squared_error": -0.3872120910283897, "neg_mean_absolute_error": -0.15034547644136687}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__kernel': 'rbf', 'estimator__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__kernel': 'rbf', 'estimator__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.1, 'estimator__kernel': 'rbf', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__tol': 0.1, 'estimator__kernel': 'linear', 'estimator__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__kernel': 'rbf', 'estimator__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=15), 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__C': 1}]", "cv_results": "{'fit_time': array([9.75400639, 9.25600171, 9.75699949, 9.37399936, 9.5009985 ,\n       9.26799893, 9.21499944, 5.75701666, 5.2949965 , 5.58799624]), 'score_time': array([0.00799608, 0.00700212, 0.0059998 , 0.00899935, 0.008003  ,\n       0.00700116, 0.00699973, 0.00499988, 0.00399971, 0.00399923]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', SVC())]),\n                   n_iter=20,\n                   param_distributions=...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.82926829, 0.82926829, 0.85365854, 0.87804878, 0.80487805,\n       0.85      , 0.825     , 0.8       , 0.775     , 0.825     ]), 'train_accuracy': array([0.85714286, 0.82692308, 0.86813187, 0.83516484, 0.85164835,\n       0.83835616, 0.83835616, 0.87123288, 0.83835616, 0.87123288]), 'test_f1_micro': array([0.82926829, 0.82926829, 0.85365854, 0.87804878, 0.80487805,\n       0.85      , 0.825     , 0.8       , 0.775     , 0.825     ]), 'train_f1_micro': array([0.85714286, 0.82692308, 0.86813187, 0.83516484, 0.85164835,\n       0.83835616, 0.83835616, 0.87123288, 0.83835616, 0.87123288]), 'test_f1_macro': array([0.74027149, 0.77595628, 0.78645833, 0.7960199 , 0.73548387,\n       0.765625  , 0.73856209, 0.6875    , 0.6893874 , 0.7740113 ]), 'train_f1_macro': array([0.78380848, 0.74419668, 0.805996  , 0.75293   , 0.7732872 ,\n       0.75837307, 0.76899973, 0.80930625, 0.77285912, 0.81905726]), 'test_neg_root_mean_squared_error': array([-0.41319694, -0.41319694, -0.38254603, -0.34921515, -0.4417261 ,\n       -0.38729833, -0.41833001, -0.4472136 , -0.47434165, -0.41833001]), 'train_neg_root_mean_squared_error': array([-0.37796447, -0.41602515, -0.36313652, -0.40599897, -0.38516444,\n       -0.40204954, -0.40204954, -0.35884136, -0.40204954, -0.35884136]), 'test_neg_mean_absolute_error': array([-0.17073171, -0.17073171, -0.14634146, -0.12195122, -0.19512195,\n       -0.15      , -0.175     , -0.2       , -0.225     , -0.175     ]), 'train_neg_mean_absolute_error': array([-0.14285714, -0.17307692, -0.13186813, -0.16483516, -0.14835165,\n       -0.16164384, -0.16164384, -0.12876712, -0.16164384, -0.12876712])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "SVC()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__tol": "[1e-4, 1e-3, 0.1]", "estimator__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]