[{"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "complete", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.552231649053144, "r2": 0.37200768420259794, "neg_mean_absolute_error": -1.2213823446378418}, "mean_train_score": {"neg_root_mean_squared_error": -1.394796856063124, "r2": 0.4967741284543418, "neg_mean_absolute_error": -1.031727041019122}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.25}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 1.0}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 1.0}, {'feature_extraction__n_components': 6, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 2.0}]", "cv_results": "{'fit_time': array([323.47999763, 364.85500097, 388.63499975, 501.22000146,\n       427.12000203, 495.7699964 , 441.09700131, 342.23999834,\n       264.35400128, 260.91000104]), 'score_time': array([0.00700164, 0.00399947, 0.00700212, 0.00400376, 0.00399971,\n       0.00399852, 0.00799894, 0.0030005 , 0.00399756, 0.00400519]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=50...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.51528533, -1.45900061, -1.32571487, -1.48975431, -1.69192349,\n       -1.63316416, -1.39590049, -1.81489795, -1.52209098, -1.67458431]), 'train_neg_root_mean_squared_error': array([-1.45598741, -1.39117798, -1.42194922, -1.38567885, -1.35601437,\n       -1.4174141 , -1.43521681, -1.30125414, -1.41874035, -1.36453533]), 'test_r2': array([0.42563592, 0.45033552, 0.5461765 , 0.41524178, 0.27156537,\n       0.30165926, 0.489828  , 0.14653161, 0.39970566, 0.27339721]), 'train_r2': array([0.45009842, 0.49981743, 0.4774458 , 0.50488708, 0.52396148,\n       0.48155944, 0.46845444, 0.56255211, 0.47999453, 0.51897057]), 'test_neg_mean_absolute_error': array([-1.22045561, -1.14958285, -1.07199249, -1.26477834, -1.31551453,\n       -1.29720225, -1.09582869, -1.45443607, -1.15281437, -1.19121825]), 'train_neg_mean_absolute_error': array([-1.13613921, -1.00877153, -1.06100649, -1.03273222, -1.01840294,\n       -1.05708966, -1.04732346, -0.91055202, -1.07169468, -0.97355819])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "only_totals", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5546009839124708, "r2": 0.3711406052124624, "neg_mean_absolute_error": -1.2059126277463512}, "mean_train_score": {"neg_root_mean_squared_error": -1.4225966788293458, "r2": 0.47686200824499664, "neg_mean_absolute_error": -1.0630489117600308}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.25}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 2.0}]", "cv_results": "{'fit_time': array([288.34400058, 281.79599667, 277.64299393, 294.9849956 ,\n       286.58500099, 289.31799722, 292.18799591, 179.73599696,\n       186.66799951, 183.52899933]), 'score_time': array([0.00699949, 0.00800061, 0.00700259, 0.00399566, 0.00399971,\n       0.00799966, 0.00700212, 0.00400424, 0.0039959 , 0.00300145]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.50310526, -1.53467036, -1.31417414, -1.4914428 , -1.74226262,\n       -1.63048981, -1.39378229, -1.67880568, -1.57865663, -1.67862025]), 'train_neg_root_mean_squared_error': array([-1.43501147, -1.40560911, -1.45353855, -1.42843524, -1.40722875,\n       -1.42891048, -1.44113805, -1.44455911, -1.41916621, -1.36236981]), 'test_r2': array([0.43483244, 0.39184129, 0.55404344, 0.4139155 , 0.2275749 ,\n       0.30394449, 0.49137514, 0.26972929, 0.35425898, 0.26989061]), 'train_r2': array([0.46582879, 0.4893865 , 0.45397029, 0.47386136, 0.48732408,\n       0.47311539, 0.46405941, 0.46089581, 0.4796823 , 0.52049616]), 'test_neg_mean_absolute_error': array([-1.15970416, -1.19815013, -1.03478913, -1.22253556, -1.29618094,\n       -1.29058486, -1.10055059, -1.35396105, -1.19657361, -1.20609624]), 'train_neg_mean_absolute_error': array([-1.07183727, -1.03599881, -1.09132762, -1.07064538, -1.06685242,\n       -1.05648734, -1.05296615, -1.12414147, -1.07502425, -0.98520841])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_20_11_21", "dataset_variant": "only_binary", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.565279001120771, "r2": 0.3617244841985407, "neg_mean_absolute_error": -1.2325653405692691}, "mean_train_score": {"neg_root_mean_squared_error": -1.4296704195028402, "r2": 0.47101235018116483, "neg_mean_absolute_error": -1.0674861919118606}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 0.25}, {'feature_extraction__n_components': 4, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 2.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 0.0625}, {'feature_extraction__n_components': 8, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.5}]", "cv_results": "{'fit_time': array([374.0529995 , 365.78199887, 370.60999966, 389.29399776,\n       351.04099917, 394.75799823, 394.16099739, 277.47702241,\n       243.072999  , 216.69099975]), 'score_time': array([0.0079999 , 0.00700188, 0.008003  , 0.00399923, 0.00300217,\n       0.00399828, 0.00299954, 0.00399971, 0.00299907, 0.0039978 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=500,\n                   param_distribution...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.56103306, -1.57963489, -1.35442871, -1.48347078, -1.82990234,\n       -1.75648076, -1.44269944, -1.67064693, -1.44173066, -1.53276245]), 'train_neg_root_mean_squared_error': array([-1.48864951, -1.31670657, -1.44045531, -1.42180884, -1.5162951 ,\n       -1.37537902, -1.44015189, -1.39401112, -1.46187407, -1.44137276]), 'test_r2': array([0.39043132, 0.35568216, 0.52630476, 0.4201642 , 0.14791098,\n       0.19221741, 0.45504652, 0.27681007, 0.46141868, 0.39125876]), 'train_r2': array([0.42514985, 0.55193484, 0.46375563, 0.47873147, 0.40477525,\n       0.5118534 , 0.46479264, 0.49796436, 0.4478946 , 0.46327146]), 'test_neg_mean_absolute_error': array([-1.2038045 , -1.25050882, -1.06268263, -1.2100331 , -1.43135465,\n       -1.41108762, -1.17610419, -1.29307167, -1.13609471, -1.15091152]), 'train_neg_mean_absolute_error': array([-1.16868652, -0.88124687, -1.06342096, -1.03785457, -1.18515911,\n       -1.04389567, -1.05200641, -1.01156675, -1.11499844, -1.11602663])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]