[{"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "complete", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.706454015235252, "r2": 0.24221271483141288, "neg_mean_absolute_error": -1.3981831863857228}, "mean_train_score": {"neg_root_mean_squared_error": -1.4554560383038238, "r2": 0.4496966593984193, "neg_mean_absolute_error": -1.125315875367881}, "best_params": "[{'estimator__criterion': 'absolute_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 5}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}]", "cv_results": "{'fit_time': array([231.4989996 , 228.38799667, 231.06300354, 232.8360014 ,\n       230.97899985, 231.19700098, 231.75700021, 181.80999732,\n       181.92199636, 181.87800169]), 'score_time': array([0.00199652, 0.00299644, 0.00299931, 0.00199676, 0.0120008 ,\n       0.00700092, 0.00800109, 0.00299859, 0.00200081, 0.00299954]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.68204289, -1.52384004, -1.72696484, -1.57595   , -1.84000178,\n       -1.67925386, -1.48190153, -1.94398406, -1.72789348, -1.88270767]), 'train_neg_root_mean_squared_error': array([-1.54510926, -1.47024598, -1.35835114, -1.20869573, -1.53797321,\n       -1.47117436, -1.49353518, -1.59075081, -1.39953874, -1.47918597]), 'test_r2': array([0.2922619 , 0.40039467, 0.22988831, 0.34561716, 0.13847947,\n       0.26168718, 0.4250284 , 0.02080673, 0.22639912, 0.0815642 ]), 'train_r2': array([0.38071847, 0.44134567, 0.52314398, 0.62328487, 0.38763401,\n       0.44148638, 0.42437932, 0.34625801, 0.49397506, 0.43474081]), 'test_neg_mean_absolute_error': array([-1.31707317, -1.2524327 , -1.35786728, -1.29808805, -1.52563879,\n       -1.41192475, -1.24276694, -1.61981188, -1.42179426, -1.53443404]), 'train_neg_mean_absolute_error': array([-1.10714286, -1.15323215, -1.04489956, -0.92350476, -1.22546912,\n       -1.12164168, -1.18575518, -1.26358629, -1.06413809, -1.16378908])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "only_totals", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.778264188706307, "r2": 0.17279154863708834, "neg_mean_absolute_error": -1.4163680070292262}, "mean_train_score": {"neg_root_mean_squared_error": -1.4456223002195863, "r2": 0.4537191197829332, "neg_mean_absolute_error": -1.127074889062699}, "best_params": "[{'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'poisson', 'estimator__max_depth': 8, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'absolute_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}]", "cv_results": "{'fit_time': array([21.74800849, 21.70000386, 21.45200086, 22.01600385, 21.74900532,\n       22.02100205, 21.97300196, 21.19299793, 21.08600116, 21.1309979 ]), 'score_time': array([0.00299716, 0.00299978, 0.00200152, 0.01599956, 0.00200105,\n       0.00299954, 0.002002  , 0.00299931, 0.0029974 , 0.00199986]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.89988077, -1.80386444, -1.67552584, -1.77379296, -1.98481908,\n       -2.04213148, -1.30060832, -1.92198435, -1.65871966, -1.72131499]), 'train_neg_root_mean_squared_error': array([-1.23694611, -1.70712856, -1.53117532, -1.62737569, -1.40960754,\n       -1.36048305, -1.54176384, -1.50400189, -1.33437189, -1.20336909]), 'test_r2': array([ 0.09707613,  0.15977709,  0.27508183,  0.17100313, -0.0024691 ,\n       -0.09188047,  0.55710502,  0.04284403,  0.28709936,  0.23227847]), 'train_r2': array([0.60310896, 0.24682547, 0.39408318, 0.31710374, 0.48558935,\n       0.52236983, 0.38660365, 0.4156153 , 0.54000211, 0.6258896 ]), 'test_neg_mean_absolute_error': array([-1.43486432, -1.49279053, -1.31801988, -1.48780488, -1.5063405 ,\n       -1.54107546, -1.08158038, -1.56183185, -1.40243146, -1.33694082]), 'train_neg_mean_absolute_error': array([-0.93120831, -1.35797781, -1.23923956, -1.19505495, -1.09689195,\n       -1.03761264, -1.2578717 , -1.21371411, -1.00849809, -0.93267978])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "only_binary", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.7490082329357186, "r2": 0.20255401236411422, "neg_mean_absolute_error": -1.3904554466249852}, "mean_train_score": {"neg_root_mean_squared_error": -1.418999394385295, "r2": 0.47410526658923624, "neg_mean_absolute_error": -1.113741853823985}, "best_params": "[{'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 8}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}]", "cv_results": "{'fit_time': array([190.57500672, 190.9350059 , 188.72000122, 188.97400188,\n       188.67100382, 189.26300216, 190.49499965, 153.01199603,\n       152.64899802, 153.26899505]), 'score_time': array([0.00699925, 0.00900054, 0.00499988, 0.00200248, 0.00699925,\n       0.03100038, 0.00600123, 0.00199938, 0.00299978, 0.00200367]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             n_jobs=7,\n             param_gr...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.87135473, -1.97538988, -1.57849774, -1.62593192, -2.04062092,\n       -1.80070661, -1.57394476, -1.71831854, -1.49287916, -1.81243806]), 'train_neg_root_mean_squared_error': array([-1.38242206, -1.22863994, -1.49214342, -1.21023037, -1.67119848,\n       -1.2301822 , -1.51554649, -1.53608806, -1.47256056, -1.45098236]), 'test_r2': array([ 0.12398674, -0.00760978,  0.35660948,  0.30345088, -0.05962895,\n        0.15102751,  0.35138548,  0.23494902,  0.42252614,  0.1488436 ]), 'train_r2': array([0.50426333, 0.60986723, 0.42458086, 0.62232766, 0.27694791,\n       0.60947904, 0.40728762, 0.39041496, 0.43979317, 0.45609088]), 'test_neg_mean_absolute_error': array([-1.46159265, -1.50895843, -1.32402283, -1.31497007, -1.70409478,\n       -1.45055129, -1.22112855, -1.37182355, -1.22756394, -1.31984837]), 'train_neg_mean_absolute_error': array([-1.06388466, -0.93283463, -1.20725196, -0.93179217, -1.32837903,\n       -0.92376538, -1.19606447, -1.25010937, -1.15172187, -1.151615  ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]