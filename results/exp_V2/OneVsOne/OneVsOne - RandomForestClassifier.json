[{"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "complete", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3313445378151261, "f1_micro": 0.3313445378151261, "f1_macro": 0.3219807923169268, "neg_root_mean_squared_error": -1.9488003764797852, "neg_mean_absolute_error": -1.3784033613445377}, "mean_train_score": {"accuracy": 0.9993485342019544, "f1_micro": 0.9993485342019544, "f1_macro": 0.9993523865287317, "neg_root_mean_squared_error": -0.034243808732120976, "neg_mean_absolute_error": -0.001954397394136808}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([16.32049155, 16.46029377, 16.42120194, 16.40917373, 16.57059002,\n       16.15488911, 16.51947284, 16.45027399, 16.64475918, 16.54354882]), 'score_time': array([0.16994143, 0.17195511, 0.18698263, 0.16745996, 0.16333055,\n       0.17613626, 0.15781689, 0.14989281, 0.17029095, 0.19386077]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.34285714, 0.44117647, 0.47058824, 0.20588235, 0.35294118,\n       0.38235294, 0.29411765, 0.29411765, 0.17647059, 0.35294118]), 'train_accuracy': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 0.99674267, 0.99674267, 1.        , 1.        ]), 'test_f1_micro': array([0.34285714, 0.44117647, 0.47058824, 0.20588235, 0.35294118,\n       0.38235294, 0.29411765, 0.29411765, 0.17647059, 0.35294118]), 'train_f1_micro': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 0.99674267, 0.99674267, 1.        , 1.        ]), 'test_f1_macro': array([0.33269429, 0.43447663, 0.44593898, 0.21062271, 0.34177489,\n       0.3501776 , 0.26708847, 0.27789116, 0.18343958, 0.37570361]), 'train_f1_macro': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 0.99667729, 0.99684657, 1.        , 1.        ]), 'test_neg_root_mean_squared_error': array([-1.97845539, -1.2833779 , -1.88648444, -2.30727749, -1.81497043,\n       -1.85504083, -2.10042013, -2.35147013, -2.12824147, -1.78226558]), 'train_neg_root_mean_squared_error': array([-0.        , -0.        , -0.        , -0.        , -0.        ,\n       -0.        , -0.28536507, -0.05707301, -0.        , -0.        ]), 'test_neg_mean_absolute_error': array([-1.34285714, -0.88235294, -1.14705882, -1.79411765, -1.23529412,\n       -1.20588235, -1.52941176, -1.70588235, -1.70588235, -1.23529412]), 'train_neg_mean_absolute_error': array([-0.        , -0.        , -0.        , -0.        , -0.        ,\n       -0.        , -0.01628664, -0.00325733, -0.        , -0.        ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "only_totals", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.331344537815126, "f1_micro": 0.331344537815126, "f1_macro": 0.32192288570439825, "neg_root_mean_squared_error": -1.939672638854575, "neg_mean_absolute_error": -1.3665546218487397}, "mean_train_score": {"accuracy": 0.9967416065231738, "f1_micro": 0.9967416065231738, "f1_macro": 0.9969037587082976, "neg_root_mean_squared_error": -0.06037254179634124, "neg_mean_absolute_error": -0.0039098592748717294}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([16.14028025, 16.48057294, 16.41791868, 16.67899728, 16.60292816,\n       16.68523407, 17.00324035, 16.55863404, 16.6044333 , 16.39633918]), 'score_time': array([0.15597582, 0.13766694, 0.13755417, 0.13794017, 0.20664287,\n       0.19011712, 0.20826817, 0.21241164, 0.20363832, 0.22064042]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.34285714, 0.35294118, 0.41176471, 0.23529412, 0.32352941,\n       0.41176471, 0.38235294, 0.35294118, 0.20588235, 0.29411765]), 'train_accuracy': array([0.99673203, 0.99348534, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99348534, 0.99674267, 1.        , 1.        ]), 'test_f1_micro': array([0.34285714, 0.35294118, 0.41176471, 0.23529412, 0.32352941,\n       0.41176471, 0.38235294, 0.35294118, 0.20588235, 0.29411765]), 'train_f1_micro': array([0.99673203, 0.99348534, 0.99674267, 0.99674267, 0.99674267,\n       0.99674267, 0.99348534, 0.99674267, 1.        , 1.        ]), 'test_f1_macro': array([0.32342783, 0.34067203, 0.38956916, 0.23051948, 0.31894455,\n       0.39480519, 0.36980638, 0.34920635, 0.21724387, 0.28503401]), 'train_f1_macro': array([0.99699248, 0.99350349, 0.99699248, 0.99702349, 0.99702349,\n       0.99702349, 0.99348753, 0.99699115, 1.        , 1.        ]), 'test_neg_root_mean_squared_error': array([-1.9856629 , -1.6803361 , -1.9326909 , -2.21625015, -1.83911744,\n       -1.81497043, -1.73205081, -2.16251488, -2.242635  , -1.79049779]), 'train_neg_root_mean_squared_error': array([-0.0571662 , -0.08071343, -0.05707301, -0.05707301, -0.05707301,\n       -0.05707301, -0.18048072, -0.05707301, -0.        , -0.        ]), 'test_neg_mean_absolute_error': array([-1.37142857, -1.17647059, -1.20588235, -1.67647059, -1.32352941,\n       -1.11764706, -1.23529412, -1.55882353, -1.67647059, -1.32352941]), 'train_neg_mean_absolute_error': array([-0.00326797, -0.00651466, -0.00325733, -0.00325733, -0.00325733,\n       -0.00325733, -0.01302932, -0.00325733, -0.        , -0.        ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "only_binary", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.346218487394958, "f1_micro": 0.346218487394958, "f1_macro": 0.33606799829488904, "neg_root_mean_squared_error": -1.8890154275402256, "neg_mean_absolute_error": -1.3221008403361345}, "mean_train_score": {"accuracy": 0.9990228013029316, "f1_micro": 0.9990228013029316, "f1_macro": 0.9990523415952509, "neg_root_mean_squared_error": -0.03799267394620397, "neg_mean_absolute_error": -0.002931596091205212}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([16.27194595, 16.35502052, 16.44098973, 16.41466141, 16.27394867,\n       16.49810696, 16.47655773, 16.40163207, 16.38411427, 16.31048679]), 'score_time': array([0.17504978, 0.17213941, 0.20744133, 0.15760469, 0.16103911,\n       0.15733957, 0.17137265, 0.17113757, 0.16658473, 0.16857147]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.44117647, 0.47058824, 0.23529412, 0.35294118,\n       0.44117647, 0.44117647, 0.32352941, 0.20588235, 0.26470588]), 'train_accuracy': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 0.99674267, 1.        , 0.99348534]), 'test_f1_micro': array([0.28571429, 0.44117647, 0.47058824, 0.23529412, 0.35294118,\n       0.44117647, 0.44117647, 0.32352941, 0.20588235, 0.26470588]), 'train_f1_micro': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 0.99674267, 1.        , 0.99348534]), 'test_f1_macro': array([0.23639456, 0.41153846, 0.44627851, 0.22991453, 0.35735534,\n       0.42680098, 0.43109668, 0.33205128, 0.21544012, 0.27380952]), 'train_f1_macro': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 0.99682187, 1.        , 0.99370155]), 'test_neg_root_mean_squared_error': array([-2.07019668, -1.39326109, -1.64495664, -2.20293921, -1.83911744,\n       -1.90201132, -1.74894926, -2.2096047 , -1.88648444, -1.99263349]), 'train_neg_root_mean_squared_error': array([-0.        , -0.        , -0.        , -0.        , -0.        ,\n       -0.        , -0.        , -0.05707301, -0.        , -0.32285372]), 'test_neg_mean_absolute_error': array([-1.48571429, -0.94117647, -1.        , -1.61764706, -1.26470588,\n       -1.20588235, -1.17647059, -1.58823529, -1.44117647, -1.5       ]), 'train_neg_mean_absolute_error': array([-0.        , -0.        , -0.        , -0.        , -0.        ,\n       -0.        , -0.        , -0.00325733, -0.        , -0.02605863])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]