[{"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "complete", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5589827908795113, "r2": 0.36731453891895965, "neg_mean_absolute_error": -1.2416439578335472}, "mean_train_score": {"neg_root_mean_squared_error": -1.5230193493203603, "r2": 0.4004906823087769, "neg_mean_absolute_error": -1.2072705011588347}, "best_params": "[{'feature_extraction__n_components': 6, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 6, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.015625}, {'feature_extraction__n_components': 6, 'estimator__alpha': 8.0}, {'feature_extraction__n_components': 6, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 6, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 6, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.0625}]", "cv_results": "{'fit_time': array([59.2020092 , 59.40000319, 57.55000448, 58.36500239, 55.73700333,\n       57.1630044 , 58.33099985, 38.33299375, 37.8320055 , 37.62199903]), 'score_time': array([0.00299287, 0.00299692, 0.00299716, 0.00300145, 0.00300193,\n       0.00299907, 0.00300097, 0.00100303, 0.00100207, 0.00200057]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag'...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.55435542, -1.55947242, -1.36656076, -1.52665977, -1.80845202,\n       -1.65776532, -1.35227282, -1.72417256, -1.52179472, -1.5183221 ]), 'train_neg_root_mean_squared_error': array([-1.51697333, -1.51832867, -1.55404265, -1.53257183, -1.48726123,\n       -1.50793092, -1.54060218, -1.5008062 , -1.53671989, -1.5349566 ]), 'test_r2': array([0.39563528, 0.37202534, 0.51778067, 0.38591066, 0.16777046,\n       0.28046189, 0.52121963, 0.22972735, 0.39993933, 0.40267478]), 'train_r2': array([0.40306695, 0.40420788, 0.37584992, 0.39435134, 0.42735163,\n       0.41322937, 0.38752764, 0.41809605, 0.38991339, 0.39131265]), 'test_neg_mean_absolute_error': array([-1.20407847, -1.21748645, -1.05759792, -1.30395736, -1.44739423,\n       -1.30309152, -1.13885151, -1.30529771, -1.20987679, -1.22880762]), 'train_neg_mean_absolute_error': array([-1.20670775, -1.2050535 , -1.24170865, -1.20854625, -1.18273069,\n       -1.1934178 , -1.21184232, -1.18932682, -1.21584031, -1.21753091])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "only_totals", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5667594852148803, "r2": 0.361803468826399, "neg_mean_absolute_error": -1.2487891536274227}, "mean_train_score": {"neg_root_mean_squared_error": -1.5404514691380533, "r2": 0.3867382980233311, "neg_mean_absolute_error": -1.2224343282975696}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.03125}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.015625}, {'feature_extraction__n_components': 3, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 2.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.015625}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.25}, {'feature_extraction__n_components': 3, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 3, 'estimator__alpha': 0.125}]", "cv_results": "{'fit_time': array([5.02500153, 5.09200597, 4.9719975 , 5.08800602, 5.08200312,\n       5.06700373, 5.07700706, 3.51299262, 3.56299186, 3.44699192]), 'score_time': array([0.00199866, 0.00299716, 0.00300026, 0.00299859, 0.00300026,\n       0.0019989 , 0.00300026, 0.00100064, 0.00100207, 0.0030005 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter=500,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.571303  , -1.59698553, -1.37477145, -1.53686244, -1.76041738,\n       -1.63844523, -1.36239376, -1.73213315, -1.56495897, -1.52932393]), 'train_neg_root_mean_squared_error': array([-1.53724933, -1.54117072, -1.56175052, -1.54083137, -1.51749069,\n       -1.53292395, -1.56244297, -1.52506987, -1.54184189, -1.54374339]), 'test_r2': array([0.38238431, 0.3414501 , 0.51196863, 0.37767532, 0.21139334,\n       0.29713559, 0.51402605, 0.22259815, 0.36541627, 0.39398694]), 'train_r2': array([0.38700299, 0.3861466 , 0.36964313, 0.38780567, 0.40383622,\n       0.39361745, 0.37003877, 0.39912857, 0.38583968, 0.3843239 ]), 'test_neg_mean_absolute_error': array([-1.22765045, -1.2597824 , -1.06147637, -1.30280824, -1.38844242,\n       -1.28508598, -1.12117449, -1.34526213, -1.24763972, -1.24856932]), 'train_neg_mean_absolute_error': array([-1.22379014, -1.22654792, -1.2500919 , -1.21546172, -1.20711836,\n       -1.2141811 , -1.23795854, -1.20712451, -1.22122144, -1.22084766])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_20_11_21", "dataset_variant": "only_binary", "estimator": "Ridge(tol = 0.01, solver = 'sag')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5491649943389094, "r2": 0.37540689976214625, "neg_mean_absolute_error": -1.2413305648373947}, "mean_train_score": {"neg_root_mean_squared_error": -1.534079754418142, "r2": 0.39178552663780664, "neg_mean_absolute_error": -1.2230930083394005}, "best_params": "[{'feature_extraction__n_components': 3, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.125}, {'feature_extraction__n_components': 2, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 4.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.015625}, {'feature_extraction__n_components': 2, 'estimator__alpha': 1.0}, {'feature_extraction__n_components': 2, 'estimator__alpha': 0.5}, {'feature_extraction__n_components': 4, 'estimator__alpha': 1.0}]", "cv_results": "{'fit_time': array([46.18200779, 45.55000234, 45.42399931, 46.12400484, 45.32500458,\n       45.84700298, 45.59700274, 27.96399784, 27.58199644, 27.47899818]), 'score_time': array([0.00199676, 0.00299907, 0.00200033, 0.00199771, 0.00299954,\n       0.00300026, 0.00200033, 0.00199986, 0.00200152, 0.0009985 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator',\n                                              Ridge(solver='sag', tol=0.01))]),\n                   n_iter...\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5000e-01,\n       5.0000e-01, 1.0000e+00, 2.0000e+00, 4.0000e+00, 8.0000e+00,\n       1.6000e+01, 3.2000e+01]),\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.60028949, -1.57008735, -1.43522077, -1.49630687, -1.83247465,\n       -1.60001555, -1.39456026, -1.70119359, -1.3640669 , -1.49743451]), 'train_neg_root_mean_squared_error': array([-1.52764501, -1.53415964, -1.54860684, -1.53741153, -1.50083775,\n       -1.52902787, -1.55211773, -1.51808184, -1.55674391, -1.53616541]), 'test_r2': array([0.35938729, 0.36344732, 0.46810716, 0.41008644, 0.14551372,\n       0.32972024, 0.49080718, 0.2501222 , 0.51788087, 0.41899657]), 'train_r2': array([0.39463874, 0.39171897, 0.38020864, 0.39052015, 0.41684903,\n       0.39669589, 0.37833733, 0.40462246, 0.37391049, 0.39035357]), 'test_neg_mean_absolute_error': array([-1.24252022, -1.24616839, -1.15559651, -1.29239716, -1.45794362,\n       -1.27881182, -1.17942289, -1.25426188, -1.12804201, -1.17814115]), 'train_neg_mean_absolute_error': array([-1.22775111, -1.22341466, -1.24013926, -1.21573361, -1.19906609,\n       -1.21487309, -1.22622119, -1.21564589, -1.24164583, -1.22643935])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "Ridge(tol = 0.01, solver = 'sag')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 500, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]