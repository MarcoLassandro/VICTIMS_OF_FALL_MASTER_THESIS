[{"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "complete", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8195731707317073, "f1_micro": 0.8195731707317073, "f1_macro": 0.7438064827553275, "neg_root_mean_squared_error": -0.4178184956416482, "neg_mean_absolute_error": -0.18042682926829268}, "mean_train_score": {"accuracy": 0.9465301821466205, "f1_micro": 0.9465301821466205, "f1_macro": 0.9259494791075961, "neg_root_mean_squared_error": -0.20677090393771874, "neg_mean_absolute_error": -0.053469817853379495}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 0.125, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 2.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.015625, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([95.43899751, 91.56899929, 93.62299871, 97.18299866, 94.98499751,\n       90.43400073, 98.41199827, 46.49699998, 46.23899937, 47.33999968]), 'score_time': array([0.01200175, 0.01300097, 0.01199961, 0.01300097, 0.01200175,\n       0.01199746, 0.01300001, 0.01400018, 0.01300001, 0.01599741]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            b...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.73170732, 0.82926829, 0.85365854, 0.90243902, 0.85365854,\n       0.7       , 0.85      , 0.825     , 0.75      , 0.9       ]), 'train_accuracy': array([0.95054945, 0.90934066, 0.99450549, 0.98076923, 1.        ,\n       0.88493151, 0.89589041, 0.95342466, 0.9369863 , 0.95890411]), 'test_f1_micro': array([0.73170732, 0.82926829, 0.85365854, 0.90243902, 0.85365854,\n       0.7       , 0.85      , 0.825     , 0.75      , 0.9       ]), 'train_f1_micro': array([0.95054945, 0.90934066, 0.99450549, 0.98076923, 1.        ,\n       0.88493151, 0.89589041, 0.95342466, 0.9369863 , 0.95890411]), 'test_f1_macro': array([0.62322473, 0.77595628, 0.76704545, 0.84469697, 0.81363636,\n       0.53125   , 0.78494624, 0.7740113 , 0.66666667, 0.85663082]), 'train_f1_macro': array([0.93255929, 0.87284987, 0.99267399, 0.97426445, 1.        ,\n       0.84027257, 0.85663194, 0.93560673, 0.91145355, 0.94318241]), 'test_neg_root_mean_squared_error': array([-0.51796977, -0.41319694, -0.38254603, -0.31234752, -0.38254603,\n       -0.54772256, -0.38729833, -0.41833001, -0.5       , -0.31622777]), 'train_neg_root_mean_squared_error': array([-0.22237479, -0.3010969 , -0.07412493, -0.13867505, -0.        ,\n       -0.33921747, -0.32266018, -0.21581321, -0.25102529, -0.20272121]), 'test_neg_mean_absolute_error': array([-0.26829268, -0.17073171, -0.14634146, -0.09756098, -0.14634146,\n       -0.3       , -0.15      , -0.175     , -0.25      , -0.1       ]), 'train_neg_mean_absolute_error': array([-0.04945055, -0.09065934, -0.00549451, -0.01923077, -0.        ,\n       -0.11506849, -0.10410959, -0.04657534, -0.0630137 , -0.04109589])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "only_totals", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.826829268292683, "f1_micro": 0.826829268292683, "f1_macro": 0.7603556700484523, "neg_root_mean_squared_error": -0.4049500791137978, "neg_mean_absolute_error": -0.17317073170731706}, "mean_train_score": {"accuracy": 0.94903281649857, "f1_micro": 0.94903281649857, "f1_macro": 0.9305816823201303, "neg_root_mean_squared_error": -0.17312967775415944, "neg_mean_absolute_error": -0.05096718350143008}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.03125, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 0.25, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 0.125, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.125, 'estimator__gamma': 0, 'estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 8.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}]", "cv_results": "{'fit_time': array([83.62200212, 83.39799786, 89.20200062, 97.7590003 , 90.65799809,\n       85.55299878, 86.56499958, 51.40899968, 49.20199847, 43.56599736]), 'score_time': array([0.01200008, 0.01200247, 0.0130012 , 0.01199985, 0.01200271,\n       0.01099944, 0.01199889, 0.0120008 , 0.01100135, 0.01200414]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            booster=None,\n                                                            colsample_bylevel=None,\n                                                            colsample_bynode=None,\n                                                            colsample_bytree=None,\n                                                            enabl...\n                                        'estimator__max_depth': [3, 5, 8, 10],\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.70731707, 0.87804878, 0.92682927, 0.87804878, 0.87804878,\n       0.7       , 0.8       , 0.775     , 0.8       , 0.925     ]), 'train_accuracy': array([0.97252747, 1.        , 1.        , 1.        , 0.99725275,\n       0.96438356, 0.89589041, 0.84931507, 0.89315068, 0.91780822]), 'test_f1_micro': array([0.70731707, 0.87804878, 0.92682927, 0.87804878, 0.87804878,\n       0.7       , 0.8       , 0.775     , 0.8       , 0.925     ]), 'train_f1_micro': array([0.97252747, 1.        , 1.        , 1.        , 0.99725275,\n       0.96438356, 0.89589041, 0.84931507, 0.89315068, 0.91780822]), 'test_f1_macro': array([0.60322581, 0.84893147, 0.89724311, 0.81447964, 0.83996877,\n       0.53125   , 0.71326165, 0.72540046, 0.73333333, 0.89646247]), 'train_f1_macro': array([0.96336996, 1.        , 1.        , 1.        , 0.99640199,\n       0.95189042, 0.85663194, 0.79797522, 0.8545683 , 0.88497899]), 'test_neg_root_mean_squared_error': array([-0.54100178, -0.34921515, -0.27050089, -0.34921515, -0.34921515,\n       -0.54772256, -0.4472136 , -0.47434165, -0.4472136 , -0.27386128]), 'train_neg_root_mean_squared_error': array([-0.16574839, -0.        , -0.        , -0.        , -0.05241424,\n       -0.18872318, -0.32266018, -0.38818157, -0.32687813, -0.28669109]), 'test_neg_mean_absolute_error': array([-0.29268293, -0.12195122, -0.07317073, -0.12195122, -0.12195122,\n       -0.3       , -0.2       , -0.225     , -0.2       , -0.075     ]), 'train_neg_mean_absolute_error': array([-0.02747253, -0.        , -0.        , -0.        , -0.00274725,\n       -0.03561644, -0.10410959, -0.15068493, -0.10684932, -0.08219178])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_08_12_21", "dataset_variant": "only_binary", "estimator": "XGBClassifier(C = 2, kernel='rbf')", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.8146341463414635, "f1_micro": 0.8146341463414635, "f1_macro": 0.7272160490041051, "neg_root_mean_squared_error": -0.42403256072287265, "neg_mean_absolute_error": -0.18536585365853658}, "mean_train_score": {"accuracy": 0.9116107180490742, "f1_micro": 0.9116107180490742, "f1_macro": 0.8695771529680698, "neg_root_mean_squared_error": -0.25427639917275013, "neg_mean_absolute_error": -0.08838928195092578}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 0.0625, 'estimator__gamma': 10, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 3, 'estimator__lambda': 32.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 2.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 8.0, 'estimator__gamma': 10, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 16.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 16.0, 'estimator__gamma': 10, 'estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 8, 'estimator__lambda': 4.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 5, 'estimator__lambda': 2.0, 'estimator__gamma': 0, 'estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__max_depth': 10, 'estimator__lambda': 1.0, 'estimator__gamma': 0, 'estimator__eta': 0.01}]", "cv_results": "{'fit_time': array([95.94899964, 94.87499619, 85.0079987 , 86.88999724, 92.11199951,\n       94.24399877, 98.53099871, 47.81399775, 52.43400002, 46.22099853]), 'score_time': array([0.01100087, 0.01200318, 0.01300025, 0.01100135, 0.01299953,\n       0.01200461, 0.01300001, 0.01200008, 0.01400042, 0.01200008]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              XGBClassifier(C=2,\n                                                            base_score=None,\n                                                            boost...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.80487805, 0.80487805, 0.82926829, 0.82926829, 0.87804878,\n       0.725     , 0.9       , 0.75      , 0.725     , 0.9       ]), 'train_accuracy': array([0.82692308, 0.87362637, 0.99725275, 0.82417582, 0.85714286,\n       0.83561644, 0.97808219, 1.        , 0.98630137, 0.9369863 ]), 'test_f1_micro': array([0.80487805, 0.80487805, 0.82926829, 0.82926829, 0.87804878,\n       0.725     , 0.9       , 0.75      , 0.725     , 0.9       ]), 'train_f1_micro': array([0.82692308, 0.87362637, 0.99725275, 0.82417582, 0.85714286,\n       0.83561644, 0.97808219, 1.        , 0.98630137, 0.9369863 ]), 'test_f1_macro': array([0.68939394, 0.75151515, 0.76023392, 0.71442786, 0.82873851,\n       0.54871795, 0.85663082, 0.66666667, 0.589169  , 0.86666667]), 'train_f1_macro': array([0.73933504, 0.82052052, 0.99635033, 0.73645866, 0.78380848,\n       0.75311147, 0.97072271, 1.        , 0.98189933, 0.91356499]), 'test_neg_root_mean_squared_error': array([-0.4417261 , -0.4417261 , -0.41319694, -0.41319694, -0.34921515,\n       -0.52440442, -0.31622777, -0.5       , -0.52440442, -0.31622777]), 'train_neg_root_mean_squared_error': array([-0.41602515, -0.35549068, -0.05241424, -0.41931393, -0.37796447,\n       -0.40544243, -0.14804664, -0.        , -0.11704115, -0.25102529]), 'test_neg_mean_absolute_error': array([-0.19512195, -0.19512195, -0.17073171, -0.17073171, -0.12195122,\n       -0.275     , -0.1       , -0.25      , -0.275     , -0.1       ]), 'train_neg_mean_absolute_error': array([-0.17307692, -0.12637363, -0.00274725, -0.17582418, -0.14285714,\n       -0.16438356, -0.02191781, -0.        , -0.01369863, -0.0630137 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "binarize": 2}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "XGBClassifier(C = 2, kernel='rbf')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__gamma": "[0, 10, 20]", "estimator__max_depth": "[3, 5, 8, 10]", "estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]