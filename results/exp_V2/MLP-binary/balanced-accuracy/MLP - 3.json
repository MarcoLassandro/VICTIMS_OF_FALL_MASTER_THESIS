[{"experiment_name": "MLP - 3", "dataset_variant": "complete", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.7399909420289854, "f1_micro": 0.7507317073170732, "f1_macro": 0.7402443334272071, "neg_root_mean_squared_error": -0.49067928940086636, "neg_mean_absolute_error": -0.24926829268292688}, "mean_train_score": {"balanced_accuracy": 0.7638523557360839, "f1_micro": 0.7753070901701038, "f1_macro": 0.7659704255697164, "neg_root_mean_squared_error": -0.47373693366803493, "neg_mean_absolute_error": -0.22469290982989615}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}]", "cv_results": "{'fit_time': array([72.02157259, 71.89155102, 71.79515958, 71.77458477, 71.91405392,\n       71.93605757, 71.69851613, 71.95006084, 71.73552275, 71.97106385]), 'score_time': array([0.068012  , 0.06801081, 0.06751132, 0.07001209, 0.06851196,\n       0.06201124, 0.0645113 , 0.06301022, 0.06501126, 0.06401134]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.52696078, 0.84926471, 0.71078431, 0.78676471, 0.78186275,\n       0.86828645, 0.80306905, 0.75      , 0.67708333, 0.64583333]), 'train_balanced_accuracy': array([0.79523364, 0.75788162, 0.74520249, 0.76286604, 0.75722741,\n       0.75658915, 0.75294574, 0.75519898, 0.78888408, 0.7664944 ]), 'test_f1_micro': array([0.53658537, 0.85365854, 0.73170732, 0.7804878 , 0.80487805,\n       0.875     , 0.8       , 0.775     , 0.675     , 0.675     ]), 'train_f1_micro': array([0.80494505, 0.76923077, 0.75549451, 0.76923077, 0.77197802,\n       0.77260274, 0.76712329, 0.76438356, 0.80273973, 0.77534247]), 'test_f1_macro': array([0.52644377, 0.84926471, 0.71473751, 0.77837838, 0.78974359,\n       0.87105093, 0.7979798 , 0.75659229, 0.66984127, 0.64841109]), 'train_f1_macro': array([0.7972304 , 0.75983411, 0.74638118, 0.7623356 , 0.76070651,\n       0.76051573, 0.75597958, 0.75616766, 0.79304479, 0.7675087 ]), 'test_neg_root_mean_squared_error': array([-0.68074565, -0.38254603, -0.51796977, -0.46852129, -0.4417261 ,\n       -0.35355339, -0.4472136 , -0.47434165, -0.57008771, -0.57008771]), 'train_neg_root_mean_squared_error': array([-0.44165025, -0.48038446, -0.49447497, -0.48038446, -0.47751647,\n       -0.47686189, -0.48257301, -0.48540338, -0.44413993, -0.47398052]), 'test_neg_mean_absolute_error': array([-0.46341463, -0.14634146, -0.26829268, -0.2195122 , -0.19512195,\n       -0.125     , -0.2       , -0.225     , -0.325     , -0.325     ]), 'train_neg_mean_absolute_error': array([-0.19505495, -0.23076923, -0.24450549, -0.23076923, -0.22802198,\n       -0.22739726, -0.23287671, -0.23561644, -0.19726027, -0.22465753])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete"], "type_of_labels": "floors", "only_BMI": 1, "binarize": [3], "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"estimator__model__X_shape": "[5]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]