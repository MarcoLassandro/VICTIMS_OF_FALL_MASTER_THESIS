[{"experiment_name": "MLP - totals", "dataset_variant": "only_totals", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.3371428571428572, "f1_micro": 0.32853658536585373, "f1_macro": 0.312412888232216, "neg_root_mean_squared_error": -1.7973614372328086, "neg_mean_absolute_error": -1.2868292682926827}, "mean_train_score": {"balanced_accuracy": 0.38392596266554546, "f1_micro": 0.37805509558934214, "f1_macro": 0.3649629422783265, "neg_root_mean_squared_error": -1.7978585226873829, "neg_mean_absolute_error": -1.2233328315520098}, "best_params": "[{'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}]", "cv_results": "{'fit_time': array([68.25773287, 68.58149409, 68.59929371, 68.84243131, 68.31390095,\n       68.61358976, 68.15764356, 68.81500912, 68.15756845, 68.45026183]), 'score_time': array([0.06912398, 0.07012582, 0.06953502, 0.07062459, 0.0696404 ,\n       0.06364059, 0.06352377, 0.06311297, 0.06308484, 0.06386995]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.37142857, 0.27142857, 0.35714286, 0.28707483, 0.35102041,\n       0.38503401, 0.30068027, 0.33333333, 0.38571429, 0.32857143]), 'train_balanced_accuracy': array([0.35845604, 0.40350837, 0.38153395, 0.40548255, 0.38149128,\n       0.36579343, 0.38317705, 0.38080709, 0.38880405, 0.39020583]), 'test_f1_micro': array([0.36585366, 0.26829268, 0.34146341, 0.26829268, 0.34146341,\n       0.375     , 0.3       , 0.325     , 0.375     , 0.325     ]), 'train_f1_micro': array([0.35164835, 0.39285714, 0.37912088, 0.4010989 , 0.37637363,\n       0.35890411, 0.37808219, 0.37534247, 0.38356164, 0.38356164]), 'test_f1_macro': array([0.36444032, 0.27145236, 0.32599781, 0.26882268, 0.33817373,\n       0.34373959, 0.26697192, 0.29563492, 0.34322344, 0.30567211]), 'train_f1_macro': array([0.34065859, 0.37893594, 0.36178608, 0.39110516, 0.36752783,\n       0.34723209, 0.35766563, 0.35797716, 0.37603008, 0.37071087]), 'test_neg_root_mean_squared_error': array([-1.78749041, -1.86102516, -1.36149129, -1.59266612, -1.97545919,\n       -1.93649167, -1.50831031, -2.04939015, -1.86413519, -2.03715488]), 'train_neg_root_mean_squared_error': array([-1.82774707, -1.84047892, -1.84197099, -1.77745342, -1.78670302,\n       -1.77270013, -1.76495566, -1.75561721, -1.78271764, -1.82824116]), 'test_neg_mean_absolute_error': array([-1.19512195, -1.41463415, -0.97560976, -1.2195122 , -1.46341463,\n       -1.35      , -1.125     , -1.4       , -1.275     , -1.45      ]), 'train_neg_mean_absolute_error': array([-1.26923077, -1.24450549, -1.26098901, -1.18681319, -1.2032967 ,\n       -1.22465753, -1.19178082, -1.20273973, -1.2109589 , -1.23835616])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["only_totals"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"estimator__model__X_shape": "[5]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]