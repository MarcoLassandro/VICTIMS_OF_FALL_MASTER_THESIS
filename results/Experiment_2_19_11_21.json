[{"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "complete", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.773633498447559, "r2": 0.18359997085302826, "neg_mean_absolute_error": -1.4285820375464584}, "mean_train_score": {"neg_root_mean_squared_error": -1.444611461823692, "r2": 0.4648184359041544, "neg_mean_absolute_error": -1.08137651008296}, "best_params": "[{'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 20}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 8}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 4}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 10}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 10}, {'estimator__criterion': 'absolute_error', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'absolute_error', 'estimator__max_depth': 7, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}]", "cv_results": "{'fit_time': array([138.86100197, 141.14900041, 164.37900186, 146.24499583,\n       146.91400194, 138.69499826, 138.42700458, 137.8990016 ,\n       140.92899752, 141.39600062]), 'score_time': array([0.00200129, 0.00199938, 0.00100255, 0.00300145, 0.00099778,\n       0.00100017, 0.00199866, 0.0020175 , 0.0010047 , 0.00201631]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())...\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.42946652, -1.63509989, -1.75862716, -1.91670876, -1.70265995,\n       -1.69961474, -1.69580625, -2.05798302, -2.1642143 , -1.6761544 ]), 'train_neg_root_mean_squared_error': array([-1.50774768, -1.48237507, -1.38606144, -1.44903454, -1.62406732,\n       -1.47961733, -1.49584376, -1.3293235 , -1.27107639, -1.42096758]), 'test_r2': array([ 0.50295198,  0.32651434,  0.20337756,  0.08806506,  0.24605111,\n        0.24874557,  0.25210861, -0.09481216, -0.21075581,  0.27375345]), 'train_r2': array([0.41620109, 0.43788064, 0.50984011, 0.4621198 , 0.32784632,\n       0.44209617, 0.42979242, 0.54935277, 0.58797967, 0.48507535]), 'test_neg_mean_absolute_error': array([-1.20179741, -1.31790407, -1.42374174, -1.61130905, -1.40326183,\n       -1.38417813, -1.48083856, -1.52941176, -1.63235294, -1.30102489]), 'train_neg_mean_absolute_error': array([-1.18721938, -1.15951794, -1.07022491, -1.1004257 , -1.27690589,\n       -1.14340525, -1.17446632, -0.84364821, -0.752443  , -1.10550849])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "only_totals", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6735258364822982, "r2": 0.27393988454141843, "neg_mean_absolute_error": -1.3482654236959468}, "mean_train_score": {"neg_root_mean_squared_error": -1.3279516653337697, "r2": 0.5432751086699368, "neg_mean_absolute_error": -1.004184305632583}, "best_params": "[{'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'absolute_error', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'best', 'feature_extraction__n_components': 1}]", "cv_results": "{'fit_time': array([12.52500701, 12.45899987, 12.05499125, 12.19300342, 12.67600274,\n       12.39700603, 12.05899882, 12.4989984 , 12.30300379, 12.47999668]), 'score_time': array([0.00100017, 0.00099993, 0.00199938, 0.00199986, 0.00199986,\n       0.00099421, 0.00200009, 0.00099993, 0.00100064, 0.00100183]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__criterion': ['squared_error',\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.624289  , -1.40673459, -1.62029914, -2.05088969, -1.6165986 ,\n       -1.73803177, -1.34428595, -1.83376692, -1.90201132, -1.59835139]), 'train_neg_root_mean_squared_error': array([-1.41957291, -1.27191941, -1.16000881, -1.15143311, -1.13065925,\n       -1.4095266 , -1.46795818, -1.4600913 , -1.61376409, -1.194583  ]), 'test_r2': array([ 0.3582336 ,  0.50150121,  0.32376851, -0.04408582,  0.32034195,\n        0.21439997,  0.53003081,  0.13075079,  0.06484794,  0.33960989]), 'train_r2': array([0.4824869 , 0.5861609 , 0.65668294, 0.66037043, 0.67422032,\n       0.49370099, 0.45085392, 0.45633   , 0.33586643, 0.63607826]), 'test_neg_mean_absolute_error': array([-1.35563878, -1.13052626, -1.24092559, -1.64261516, -1.30974259,\n       -1.29622186, -1.16655328, -1.53970914, -1.5       , -1.30072158]), 'train_neg_mean_absolute_error': array([-1.09221085, -0.95142057, -0.85783391, -0.86515613, -0.850846  ,\n       -1.08015705, -1.16385618, -1.15644455, -1.12703583, -0.89688199])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_2_19_11_21", "dataset_variant": "only_binary", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6524279262873907, "r2": 0.2931674292844163, "neg_mean_absolute_error": -1.3491757262700135}, "mean_train_score": {"neg_root_mean_squared_error": -1.4461927771940455, "r2": 0.465043439927953, "neg_mean_absolute_error": -1.1289685095806061}, "best_params": "[{'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 7, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 2}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 9}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 5}, {'estimator__criterion': 'friedman_mse', 'estimator__max_depth': 6, 'estimator__splitter': 'random', 'feature_extraction__n_components': 1}, {'estimator__criterion': 'squared_error', 'estimator__max_depth': 5, 'estimator__splitter': 'random', 'feature_extraction__n_components': 3}]", "cv_results": "{'fit_time': array([108.60600543, 109.91799808, 109.56699896, 110.20200562,\n       111.43400311, 110.07399297, 109.77099991, 110.53400683,\n       110.32599664, 110.0009973 ]), 'score_time': array([0.00199699, 0.00200224, 0.00200105, 0.00199389, 0.00100398,\n       0.00099921, 0.00199866, 0.00100446, 0.00200391, 0.00199723]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'esti...\n                                                  'friedman_mse',\n                                                  'absolute_error', 'poisson'],\n                         'estimator__max_depth': [5, 6, 7, 8, 9, 10],\n                         'estimator__splitter': ['best', 'random'],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.55051216, -1.40120809, -1.58944547, -1.74607262, -1.33195999,\n       -1.82588357, -1.69197818, -1.91268442, -1.80650153, -1.66803325]), 'train_neg_root_mean_squared_error': array([-1.54175535, -1.41008326, -1.37080701, -1.43505123, -1.53683294,\n       -1.40123371, -1.49740933, -1.37568134, -1.45024161, -1.442832  ]), 'test_r2': array([0.41520895, 0.50541033, 0.34927686, 0.24320858, 0.53860974,\n       0.13297379, 0.25548134, 0.05432332, 0.1564075 , 0.28077389]), 'train_r2': array([0.38956859, 0.49137015, 0.52056974, 0.4724509 , 0.39811455,\n       0.49964105, 0.42859822, 0.51737365, 0.46364039, 0.46910716]), 'test_neg_mean_absolute_error': array([-1.2976204 , -1.14390657, -1.28383569, -1.46082347, -1.08697618,\n       -1.33305631, -1.37543289, -1.58674453, -1.50221529, -1.42114592]), 'train_neg_mean_absolute_error': array([-1.2321805 , -1.12125283, -1.00838382, -1.11506156, -1.22269518,\n       -1.08950176, -1.20328771, -1.07541825, -1.11530929, -1.10659419])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 6, 7, 8, 9, 10]", "estimator__criterion": "['squared_error', 'friedman_mse', 'absolute_error', 'poisson']", "estimator__splitter": "['best', 'random']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]