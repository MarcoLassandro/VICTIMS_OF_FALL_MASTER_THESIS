[{"experiment_name": "Experiment_29_11_21", "dataset_variant": "complete", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5222283309232985, "r2": 0.3991223458757713, "neg_mean_absolute_error": -1.2077582709267118}, "mean_train_score": {"neg_root_mean_squared_error": -0.6028939108417186, "r2": 0.9067724533596759, "neg_mean_absolute_error": -0.4737866403254071}, "best_params": "[{'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}]", "cv_results": "{'fit_time': array([160.29298091, 174.84799576, 164.06299424, 167.80399919,\n       164.38800144, 173.47699928, 147.06501222, 104.67499709,\n       104.35501671,  99.54200935]), 'score_time': array([0.07700086, 0.04399872, 0.11400151, 0.08799815, 0.04300261,\n       0.04799867, 0.2239995 , 0.01600385, 0.01300025, 0.01300001]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegress...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.52330869, -1.2685684 , -1.67287194, -1.79334509, -1.27614721,\n       -1.53791955, -1.36050718, -1.83411672, -1.52597848, -1.42952005]), 'train_neg_root_mean_squared_error': array([-0.6429996 , -0.58725704, -0.58659379, -0.56420073, -0.68107116,\n       -0.57274593, -0.59960479, -0.55620543, -0.65658753, -0.5816731 ]), 'test_r2': array([0.43554905, 0.59461511, 0.27917411, 0.20167573, 0.57646664,\n       0.38488927, 0.51862033, 0.13041913, 0.39806048, 0.47175361]), 'train_r2': array([0.89382376, 0.91177965, 0.91220946, 0.91845537, 0.88179237,\n       0.91640418, 0.90837991, 0.92110567, 0.89005877, 0.9137154 ]), 'test_neg_mean_absolute_error': array([-1.16826092, -1.03175341, -1.27615423, -1.42963798, -1.00919024,\n       -1.15876988, -1.13688693, -1.45697576, -1.23079164, -1.17916172]), 'train_neg_mean_absolute_error': array([-0.51291225, -0.454453  , -0.46769648, -0.44447472, -0.53246186,\n       -0.45039182, -0.46820364, -0.429255  , -0.5182678 , -0.45974983])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_29_11_21", "dataset_variant": "only_totals", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.4823357453984218, "r2": 0.42779874660505773, "neg_mean_absolute_error": -1.1642330814507271}, "mean_train_score": {"neg_root_mean_squared_error": -0.6073299885490075, "r2": 0.9053920872385073, "neg_mean_absolute_error": -0.473907210962186}, "best_params": "[{'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}]", "cv_results": "{'fit_time': array([179.51700282, 167.67399955, 166.74899983, 157.69900131,\n       175.05599999, 175.45200157, 173.19700027, 108.98399711,\n        98.19099903, 102.54599762]), 'score_time': array([0.05799246, 0.07400441, 0.03800058, 0.08599949, 0.06899762,\n       0.05899978, 0.07399726, 0.01500177, 0.01799846, 0.02499843]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_featu...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.3664267 , -1.34472273, -1.57352314, -1.79570899, -1.25148401,\n       -1.49501737, -1.20987779, -1.84750928, -1.57774035, -1.36134711]), 'train_neg_root_mean_squared_error': array([-0.65598771, -0.57324756, -0.56549846, -0.63667562, -0.58909458,\n       -0.56974599, -0.66443744, -0.54889268, -0.63972329, -0.62999657]), 'test_r2': array([0.54582519, 0.54448229, 0.36224885, 0.19956972, 0.59267911,\n       0.41872915, 0.6193121 , 0.11767356, 0.35653178, 0.52093573]), 'train_r2': array([0.88949108, 0.91593857, 0.91841024, 0.89616004, 0.9115637 ,\n       0.91727761, 0.88749581, 0.92316657, 0.89563385, 0.89878341]), 'test_neg_mean_absolute_error': array([-1.10705458, -1.05967034, -1.13106855, -1.43654745, -0.99743733,\n       -1.12841602, -1.00457547, -1.42661532, -1.26330393, -1.08764181]), 'train_neg_mean_absolute_error': array([-0.51879329, -0.45114947, -0.44047591, -0.49434533, -0.45718194,\n       -0.44171002, -0.52162679, -0.41684965, -0.50224721, -0.49469249])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_29_11_21", "dataset_variant": "only_binary", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5785568238310348, "r2": 0.35280425107895147, "neg_mean_absolute_error": -1.2510118329366064}, "mean_train_score": {"neg_root_mean_squared_error": -0.6420574743711234, "r2": 0.8941995069133067, "neg_mean_absolute_error": -0.5082389666042482}, "best_params": "[{'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5), 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}]", "cv_results": "{'fit_time': array([158.61100245, 184.58399677, 166.11500025, 174.77900076,\n       166.17399907, 156.48900008, 177.6679945 , 107.90035796,\n       119.7923739 , 120.16000295]), 'score_time': array([0.12499881, 0.03299999, 0.07400012, 0.06999803, 0.08900166,\n       0.151999  , 0.02900195, 0.01899886, 0.02999973, 0.03199959]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=20, n_...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.5506657 , -1.28159985, -1.70249456, -1.93496764, -1.23346016,\n       -1.54540412, -1.60139271, -1.83486641, -1.5860363 , -1.51468077]), 'train_neg_root_mean_squared_error': array([-0.65304683, -0.6537511 , -0.56564382, -0.63551491, -0.68387182,\n       -0.67094783, -0.6642901 , -0.54373919, -0.67395953, -0.67580962]), 'test_r2': array([0.41509312, 0.58624365, 0.25341983, 0.07060783, 0.60432708,\n       0.3788876 , 0.33306768, 0.1297081 , 0.34974712, 0.4069405 ]), 'train_r2': array([0.89047971, 0.89067054, 0.91836829, 0.89653831, 0.8808182 ,\n       0.88528029, 0.8875457 , 0.92460256, 0.88416415, 0.88352732]), 'test_neg_mean_absolute_error': array([-1.26767756, -0.99927096, -1.22912043, -1.55942691, -0.98868004,\n       -1.19038263, -1.28411242, -1.46597377, -1.2694889 , -1.25598472]), 'train_neg_mean_absolute_error': array([-0.52193392, -0.52488875, -0.44393274, -0.50355573, -0.53832038,\n       -0.53299353, -0.52083711, -0.42747754, -0.53052198, -0.537928  ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]