[{"experiment_name": "MLP - 3", "dataset_variant": "complete", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.770827067669173, "f1_micro": 0.7826050420168068, "f1_macro": 0.7711833619078154, "neg_root_mean_squared_error": -0.4573907857350375, "neg_mean_absolute_error": -0.21739495798319325}, "mean_train_score": {"balanced_accuracy": 0.7817675918730645, "f1_micro": 0.7908102871984842, "f1_macro": 0.7837901806907055, "neg_root_mean_squared_error": -0.45705805570024466, "neg_mean_absolute_error": -0.20918971280151583}, "best_params": "[{'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}]", "cv_results": "{'fit_time': array([64.44799685, 65.35423493, 65.13319874, 64.35669398, 64.66834188,\n       64.75852895, 64.80321288, 64.46691132, 65.0648253 , 65.00293255]), 'score_time': array([0.06914592, 0.0741663 , 0.06967497, 0.07068586, 0.06913972,\n       0.07015586, 0.07060146, 0.0691855 , 0.06915426, 0.07058525]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.91666667, 0.66842105, 0.78070175, 0.72105263, 0.84285714,\n       0.68928571, 0.84285714, 0.73571429, 0.85357143, 0.65714286]), 'train_balanced_accuracy': array([0.7774931 , 0.77619545, 0.79091543, 0.76844352, 0.78244242,\n       0.79115602, 0.76831812, 0.82168622, 0.76729683, 0.77372881]), 'test_f1_micro': array([0.91428571, 0.67647059, 0.79411765, 0.73529412, 0.85294118,\n       0.73529412, 0.85294118, 0.76470588, 0.85294118, 0.64705882]), 'train_f1_micro': array([0.7875817 , 0.78501629, 0.80456026, 0.77850163, 0.79153094,\n       0.7980456 , 0.7752443 , 0.82736156, 0.7752443 , 0.78501629]), 'test_f1_macro': array([0.91315136, 0.66931919, 0.78500452, 0.72357724, 0.8464318 ,\n       0.6899696 , 0.8464318 , 0.74242424, 0.84969054, 0.64583333]), 'train_f1_macro': array([0.77994623, 0.7778874 , 0.7953879 , 0.77059341, 0.78461808,\n       0.79231407, 0.7691201 , 0.82265747, 0.7686056 , 0.77677155]), 'test_neg_root_mean_squared_error': array([-0.29277002, -0.56879646, -0.45374261, -0.51449576, -0.38348249,\n       -0.51449576, -0.38348249, -0.48507125, -0.38348249, -0.59408853]), 'train_neg_root_mean_squared_error': array([-0.4608886 , -0.46366336, -0.44208567, -0.47063613, -0.45658412,\n       -0.44939337, -0.47408406, -0.41549782, -0.47408406, -0.46366336]), 'test_neg_mean_absolute_error': array([-0.08571429, -0.32352941, -0.20588235, -0.26470588, -0.14705882,\n       -0.26470588, -0.14705882, -0.23529412, -0.14705882, -0.35294118]), 'train_neg_mean_absolute_error': array([-0.2124183 , -0.21498371, -0.19543974, -0.22149837, -0.20846906,\n       -0.2019544 , -0.2247557 , -0.17263844, -0.2247557 , -0.21498371])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete"], "type_of_labels": "floors", "only_BMI": 1, "binarize": [3], "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"estimator__model__X_shape": "[5]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]