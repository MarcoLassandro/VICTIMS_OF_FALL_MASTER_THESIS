[{"experiment_name": "OneVsOne - RidgeClassifier", "dataset_variant": "complete", "estimator": "OneVsOneClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.31352941176470583, "f1_micro": 0.3135294117647059, "f1_macro": 0.2889547940388276, "neg_root_mean_squared_error": -1.8786168869424107, "neg_mean_absolute_error": -1.3561344537815125}, "mean_train_score": {"accuracy": 0.4525984117859956, "f1_micro": 0.4525984117859956, "f1_macro": 0.44330383384767813, "neg_root_mean_squared_error": -1.7540356581728234, "neg_mean_absolute_error": -1.1163228374954761}, "best_params": "[{'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=18)}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=13)}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=6)}, {'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=14)}, {'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=15)}, {'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=14)}, {'feature_extraction__n_components': 20, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=20)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1)}, {'feature_extraction__n_components': 20, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=20)}]", "cv_results": "{'fit_time': array([27.71238089, 28.14395738, 33.4223876 , 28.08744764, 33.7799499 ,\n       33.3918817 , 27.47684026, 27.66387296, 33.6364255 , 33.61092067]), 'score_time': array([0.00850177, 0.00900173, 0.00850129, 0.00900173, 0.00550199,\n       0.00900173, 0.00850153, 0.00950146, 0.00600076, 0.00850201]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=20)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=20)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.4       , 0.32352941, 0.20588235, 0.20588235, 0.41176471,\n       0.38235294, 0.38235294, 0.26470588, 0.26470588, 0.29411765]), 'train_accuracy': array([0.47712418, 0.45276873, 0.39087948, 0.50162866, 0.47882736,\n       0.48534202, 0.49185668, 0.36156352, 0.36156352, 0.52442997]), 'test_f1_micro': array([0.4       , 0.32352941, 0.20588235, 0.20588235, 0.41176471,\n       0.38235294, 0.38235294, 0.26470588, 0.26470588, 0.29411765]), 'train_f1_micro': array([0.47712418, 0.45276873, 0.39087948, 0.50162866, 0.47882736,\n       0.48534202, 0.49185668, 0.36156352, 0.36156352, 0.52442997]), 'test_f1_macro': array([0.34815441, 0.28982684, 0.16565657, 0.2       , 0.41564626,\n       0.37642754, 0.33958978, 0.23855906, 0.24516595, 0.27052154]), 'train_f1_macro': array([0.47023624, 0.44593777, 0.38020888, 0.49897979, 0.47420971,\n       0.47674984, 0.48545392, 0.34215648, 0.34480586, 0.51429985]), 'test_neg_root_mean_squared_error': array([-1.30930734, -1.72353945, -2.06511643, -2.07222529, -1.74052054,\n       -2.0219385 , -1.87082869, -2.11437656, -2.02919862, -1.83911744]), 'train_neg_root_mean_squared_error': array([-1.77859458, -1.74609849, -1.7793605 , -1.69786223, -1.79303757,\n       -1.70742773, -1.76465479, -1.72639973, -1.811113  , -1.73580797]), 'test_neg_mean_absolute_error': array([-0.91428571, -1.26470588, -1.61764706, -1.52941176, -1.14705882,\n       -1.32352941, -1.32352941, -1.58823529, -1.52941176, -1.32352941]), 'train_neg_mean_absolute_error': array([-1.11111111, -1.10749186, -1.21172638, -1.03908795, -1.11726384,\n       -1.04560261, -1.06840391, -1.18892508, -1.247557  , -1.02605863])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RidgeClassifier", "dataset_variant": "only_totals", "estimator": "OneVsOneClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.30168067226890755, "f1_micro": 0.30168067226890755, "f1_macro": 0.2750561458787907, "neg_root_mean_squared_error": -1.8595303028191477, "neg_mean_absolute_error": -1.3384033613445379}, "mean_train_score": {"accuracy": 0.354183432330587, "f1_micro": 0.3541834323305869, "f1_macro": 0.33714084686232443, "neg_root_mean_squared_error": -1.819910711604691, "neg_mean_absolute_error": -1.2561261203721446}, "best_params": "[{'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4)}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3)}]", "cv_results": "{'fit_time': array([4.58730817, 4.5868082 , 5.41745377, 4.46178603, 4.544801  ,\n       4.50379348, 5.38044739, 4.6333158 , 5.36094403, 5.29493237]), 'score_time': array([0.00900102, 0.00900102, 0.00650096, 0.00850177, 0.01200151,\n       0.0095017 , 0.00550103, 0.00950241, 0.00550127, 0.00550103]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD...([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD...([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.42857143, 0.29411765, 0.32352941, 0.23529412, 0.29411765,\n       0.29411765, 0.26470588, 0.26470588, 0.29411765, 0.32352941]), 'train_accuracy': array([0.34313725, 0.36482085, 0.35830619, 0.35830619, 0.3713355 ,\n       0.33876221, 0.3257329 , 0.37459283, 0.36807818, 0.33876221]), 'test_f1_micro': array([0.42857143, 0.29411765, 0.32352941, 0.23529412, 0.29411765,\n       0.29411765, 0.26470588, 0.26470588, 0.29411765, 0.32352941]), 'train_f1_micro': array([0.34313725, 0.36482085, 0.35830619, 0.35830619, 0.3713355 ,\n       0.33876221, 0.3257329 , 0.37459283, 0.36807818, 0.33876221]), 'test_f1_macro': array([0.37225097, 0.26314526, 0.2951715 , 0.22380952, 0.29227598,\n       0.27301587, 0.25793651, 0.22738792, 0.26773861, 0.27782931]), 'train_f1_macro': array([0.32569696, 0.34993678, 0.34306361, 0.33997184, 0.36123933,\n       0.30879151, 0.29777221, 0.36387527, 0.35529942, 0.32576153]), 'test_neg_root_mean_squared_error': array([-1.52127766, -1.74894926, -1.89426379, -2.35147013, -1.49509   ,\n       -1.72353945, -1.68906518, -2.20293921, -2.0436415 , -1.92506684]), 'train_neg_root_mean_squared_error': array([-1.86295148, -1.81470648, -1.80570937, -1.7948533 , -1.79847927,\n       -1.86603448, -1.90319464, -1.69786223, -1.8200834 , -1.83523246]), 'test_neg_mean_absolute_error': array([-0.94285714, -1.23529412, -1.35294118, -1.64705882, -1.11764706,\n       -1.20588235, -1.32352941, -1.67647059, -1.52941176, -1.35294118]), 'train_neg_mean_absolute_error': array([-1.30718954, -1.22801303, -1.24104235, -1.23452769, -1.22801303,\n       -1.30618893, -1.34201954, -1.14983713, -1.24104235, -1.28338762])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RidgeClassifier", "dataset_variant": "only_binary", "estimator": "OneVsOneClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3047058823529412, "f1_micro": 0.3047058823529412, "f1_macro": 0.2828931386074243, "neg_root_mean_squared_error": -1.9017954567981712, "neg_mean_absolute_error": -1.3795798319327732}, "mean_train_score": {"accuracy": 0.4447754997764578, "f1_micro": 0.4447754997764578, "f1_macro": 0.43362404532021337, "neg_root_mean_squared_error": -1.7465494407764162, "neg_mean_absolute_error": -1.1248089246556385}, "best_params": "[{'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=15)}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13)}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6)}, {'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12)}, {'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10)}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13)}, {'feature_extraction__n_components': 17, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=17)}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1)}, {'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12)}, {'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8)}]", "cv_results": "{'fit_time': array([21.87835455, 21.72982764, 21.90135789, 22.4969635 , 21.89335632,\n       22.58297825, 21.70782375, 21.7473309 , 21.73932981, 22.48096085]), 'score_time': array([0.006001  , 0.00850129, 0.00650096, 0.00550079, 0.00550079,\n       0.00550103, 0.00900173, 0.00850201, 0.00550103, 0.00550079]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RidgeClass...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.4       , 0.29411765, 0.20588235, 0.20588235, 0.35294118,\n       0.38235294, 0.35294118, 0.26470588, 0.23529412, 0.35294118]), 'train_accuracy': array([0.46078431, 0.46905537, 0.39739414, 0.46905537, 0.43648208,\n       0.47557003, 0.47557003, 0.35504886, 0.48534202, 0.42345277]), 'test_f1_micro': array([0.4       , 0.29411765, 0.20588235, 0.20588235, 0.35294118,\n       0.38235294, 0.35294118, 0.26470588, 0.23529412, 0.35294118]), 'train_f1_micro': array([0.46078431, 0.46905537, 0.39739414, 0.46905537, 0.43648208,\n       0.47557003, 0.47557003, 0.35504886, 0.48534202, 0.42345277]), 'test_f1_macro': array([0.33968254, 0.26125541, 0.16565657, 0.20238095, 0.36116265,\n       0.37188209, 0.32026307, 0.23855906, 0.22337662, 0.34471243]), 'train_f1_macro': array([0.45674465, 0.46304839, 0.38459355, 0.45797037, 0.42153956,\n       0.46717661, 0.46941555, 0.33554324, 0.47218511, 0.40802341]), 'test_neg_root_mean_squared_error': array([-1.34164079, -1.73205081, -2.06511643, -2.14887111, -1.51463449,\n       -2.0219385 , -2.0508248 , -2.11437656, -2.14201664, -1.88648444]), 'train_neg_root_mean_squared_error': array([-1.82574186, -1.74609849, -1.80480719, -1.70742773, -1.78119017,\n       -1.72073009, -1.72545608, -1.74703099, -1.65904882, -1.74796298]), 'test_neg_mean_absolute_error': array([-0.94285714, -1.29411765, -1.61764706, -1.55882353, -1.05882353,\n       -1.32352941, -1.5       , -1.58823529, -1.58823529, -1.32352941]), 'train_neg_mean_absolute_error': array([-1.16339869, -1.09446254, -1.2247557 , -1.0781759 , -1.17263844,\n       -1.06514658, -1.06188925, -1.20846906, -1.02605863, -1.15309446])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]