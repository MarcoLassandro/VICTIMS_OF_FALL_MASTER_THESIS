[{"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "complete", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.35193277310924376, "f1_micro": 0.35193277310924376, "f1_macro": 0.3397709829852687, "neg_root_mean_squared_error": -1.965980193957158, "neg_mean_absolute_error": -1.3641176470588234}, "mean_train_score": {"accuracy": 1.0, "f1_micro": 1.0, "f1_macro": 1.0, "neg_root_mean_squared_error": 0.0, "neg_mean_absolute_error": 0.0}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([20.1000402 , 31.08497548, 31.81160331, 31.06447124, 20.02652788,\n       19.94901395, 19.95251465, 31.8036015 , 31.23900223, 31.34902143]), 'score_time': array([0.22053933, 0.21553779, 0.21603775, 0.21503806, 0.21303725,\n       0.21153712, 0.21303749, 0.21353769, 0.21653843, 0.21503758]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.34285714, 0.44117647, 0.44117647, 0.14705882, 0.41176471,\n       0.41176471, 0.41176471, 0.35294118, 0.20588235, 0.35294118]), 'train_accuracy': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'test_f1_micro': array([0.34285714, 0.44117647, 0.44117647, 0.14705882, 0.41176471,\n       0.41176471, 0.41176471, 0.35294118, 0.20588235, 0.35294118]), 'train_f1_micro': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'test_f1_macro': array([0.30641026, 0.4319934 , 0.411812  , 0.13391053, 0.40714286,\n       0.39822955, 0.40537241, 0.34450549, 0.21349206, 0.34484127]), 'train_f1_macro': array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]), 'test_neg_root_mean_squared_error': array([-1.70712791, -1.2833779 , -2.33263295, -2.46146776, -1.78226558,\n       -2.13514017, -1.91741247, -2.29449469, -1.95538472, -1.79049779]), 'train_neg_root_mean_squared_error': array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.]), 'test_neg_mean_absolute_error': array([-1.2       , -0.88235294, -1.44117647, -1.94117647, -1.17647059,\n       -1.38235294, -1.26470588, -1.61764706, -1.52941176, -1.20588235]), 'train_neg_mean_absolute_error': array([-0., -0., -0., -0., -0., -0., -0., -0., -0., -0.])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "only_totals", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.32571428571428573, "f1_micro": 0.32571428571428573, "f1_macro": 0.3178326108998378, "neg_root_mean_squared_error": -1.935537062513151, "neg_mean_absolute_error": -1.3603361344537817}, "mean_train_score": {"accuracy": 0.9967405420365758, "f1_micro": 0.9967405420365758, "f1_macro": 0.9969274124211805, "neg_root_mean_squared_error": -0.06588537789438517, "neg_mean_absolute_error": -0.004239850120286986}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([30.15981221, 30.30433774, 29.61071539, 28.04393935, 20.05553246,\n       20.06803465, 32.36320019, 29.69222975, 31.99863625, 20.01052427]), 'score_time': array([0.16252875, 0.19303441, 0.2080369 , 0.21303725, 0.21203732,\n       0.2140379 , 0.22103906, 0.21103716, 0.25154424, 0.21303797]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estimator=RandomForestClassifier(n_estimators=50)))]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.38235294, 0.38235294, 0.17647059, 0.32352941,\n       0.41176471, 0.41176471, 0.32352941, 0.32352941, 0.26470588]), 'train_accuracy': array([0.99346405, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99348534, 0.99674267, 0.99674267, 1.        , 1.        ]), 'test_f1_micro': array([0.25714286, 0.38235294, 0.38235294, 0.17647059, 0.32352941,\n       0.41176471, 0.41176471, 0.32352941, 0.32352941, 0.26470588]), 'train_f1_micro': array([0.99346405, 0.99674267, 0.99674267, 0.99674267, 0.99674267,\n       0.99348534, 0.99674267, 0.99674267, 1.        , 1.        ]), 'test_f1_macro': array([0.23129252, 0.38225108, 0.35929038, 0.15844156, 0.32744795,\n       0.4020091 , 0.40841064, 0.3029304 , 0.32828283, 0.27796965]), 'train_f1_macro': array([0.99364841, 0.99699248, 0.99699248, 0.99702349, 0.99702349,\n       0.99357915, 0.99702349, 0.99699115, 1.        , 1.        ]), 'test_neg_root_mean_squared_error': array([-2.04240754, -1.59963231, -2.05798302, -2.30089497, -1.79869234,\n       -1.94784949, -1.68906518, -2.14887111, -2.07222529, -1.69774938]), 'train_neg_root_mean_squared_error': array([-0.23570226, -0.05707301, -0.05707301, -0.05707301, -0.05707301,\n       -0.08071343, -0.05707301, -0.05707301, -0.        , -0.        ]), 'test_neg_mean_absolute_error': array([-1.48571429, -1.02941176, -1.35294118, -1.82352941, -1.23529412,\n       -1.26470588, -1.14705882, -1.55882353, -1.41176471, -1.29411765]), 'train_neg_mean_absolute_error': array([-0.01633987, -0.00325733, -0.00325733, -0.00325733, -0.00325733,\n       -0.00651466, -0.00325733, -0.00325733, -0.        , -0.        ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "OneVsOne - RandomForestClassifier", "dataset_variant": "only_binary", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3723529411764706, "f1_micro": 0.3723529411764706, "f1_macro": 0.3617107495678924, "neg_root_mean_squared_error": -1.9517012951713681, "neg_mean_absolute_error": -1.3317647058823527}, "mean_train_score": {"accuracy": 0.9996732026143791, "f1_micro": 0.9996732026143791, "f1_macro": 0.9996511009467077, "neg_root_mean_squared_error": -0.0057166195047502946, "neg_mean_absolute_error": -0.00032679738562091506}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5)}]", "cv_results": "{'fit_time': array([31.23650241, 19.97851872, 20.08953786, 20.09403944, 19.98051929,\n       30.80092525, 31.23350143, 31.06897235, 31.38502789, 30.94595075]), 'score_time': array([0.22103882, 0.21403766, 0.21503782, 0.2160387 , 0.21003723,\n       0.2140379 , 0.21353745, 0.21253753, 0.22854018, 0.21253753]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsOneClassifier(estim...\n                   param_distributions={'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=5)]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.4       , 0.41176471, 0.5       , 0.17647059, 0.41176471,\n       0.44117647, 0.44117647, 0.41176471, 0.23529412, 0.29411765]), 'train_accuracy': array([0.99673203, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ]), 'test_f1_micro': array([0.4       , 0.41176471, 0.5       , 0.17647059, 0.41176471,\n       0.44117647, 0.44117647, 0.41176471, 0.23529412, 0.29411765]), 'train_f1_micro': array([0.99673203, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ]), 'test_f1_macro': array([0.37687075, 0.4049062 , 0.49775304, 0.16825397, 0.40516309,\n       0.43385107, 0.42625232, 0.37777778, 0.23262848, 0.29365079]), 'train_f1_macro': array([0.99651101, 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ]), 'test_neg_root_mean_squared_error': array([-1.8516402 , -1.29478592, -1.9326909 , -2.32631999, -1.75733756,\n       -1.99263349, -1.75733756, -2.3136424 , -2.12132034, -2.16930458]), 'train_neg_root_mean_squared_error': array([-0.0571662, -0.       , -0.       , -0.       , -0.       ,\n       -0.       , -0.       , -0.       , -0.       , -0.       ]), 'test_neg_mean_absolute_error': array([-1.2       , -0.91176471, -1.14705882, -1.76470588, -1.14705882,\n       -1.26470588, -1.14705882, -1.52941176, -1.61764706, -1.58823529]), 'train_neg_mean_absolute_error': array([-0.00326797, -0.        , -0.        , -0.        , -0.        ,\n       -0.        , -0.        , -0.        , -0.        , -0.        ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedPCA(mask=mask, n_components =5)", "scaler": "MinMaxScaler()", "estimator": "OneVsOneClassifier(RandomForestClassifier(n_estimators=50))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components =5)]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]