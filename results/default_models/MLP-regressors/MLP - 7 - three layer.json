[{"experiment_name": "MLP - 7 - three layer", "dataset_variant": "complete", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.582184822031328, "r2": 0.3361697323079917, "neg_mean_absolute_error": -1.2544853902664506}, "mean_train_score": {"neg_root_mean_squared_error": -1.4449674182055399, "r2": 0.4545896107711352, "neg_mean_absolute_error": -1.1451108372011467}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}]", "cv_results": "{'fit_time': array([1778.00015545, 1787.65376329, 1808.97889137, 1801.24296021,\n       1820.74333954, 1785.43208647, 1813.59564972, 1788.83094096,\n       1783.6289432 , 1795.52843356]), 'score_time': array([0.07470894, 0.08519769, 0.07496357, 0.07512784, 0.07682467,\n       0.07565784, 0.07366347, 0.07514572, 0.0733161 , 0.07488179]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.25051964, -1.27903462, -1.51157401, -1.96987731, -1.27176262,\n       -2.07257616, -1.33408547, -1.891278  , -1.76671112, -1.47442927]), 'train_neg_root_mean_squared_error': array([-1.3924722 , -1.3878959 , -1.38612727, -1.31541558, -1.50129932,\n       -2.08423917, -1.30775206, -1.38651131, -1.29554306, -1.39241831]), 'test_r2': array([ 0.61960798,  0.58789833,  0.41147649,  0.03677011,  0.579372  ,\n       -0.11713862,  0.53713603,  0.07537255,  0.19316055,  0.43804191]), 'train_r2': array([ 0.50205771,  0.50725058,  0.50979355,  0.5567446 ,  0.42562557,\n       -0.10702042,  0.56417579,  0.50974484,  0.57196523,  0.50555864]), 'test_neg_mean_absolute_error': array([-0.99167282, -0.96833455, -1.13860475, -1.49572999, -1.00482898,\n       -1.77933446, -1.04877681, -1.58084997, -1.38002793, -1.15669364]), 'train_neg_mean_absolute_error': array([-1.0941161 , -1.08489828, -1.08641911, -1.0291648 , -1.18164247,\n       -1.80259309, -1.01594902, -1.07424075, -0.99080757, -1.0912772 ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"scaler": "[StandardScaler(), MinMaxScaler(), RobustScaler()]", "feature_extraction__n_components": "[4]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "estimator__model__dim": "[7]", "estimator__model__optimizer": "[\"adam\", \"sgd\"]", "estimator__model__hidden_layer_sizes": "[(8,4,2), (16,8,4), (32,16,8), (64,32,16), (128,64,32)]", "estimator__model__num_layers": "[3]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "MLP - 7 - three layer", "dataset_variant": "only_totals", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.533157705318409, "r2": 0.3823044560476698, "neg_mean_absolute_error": -1.2030883893445763}, "mean_train_score": {"neg_root_mean_squared_error": -1.3791302695217207, "r2": 0.512809454679301, "neg_mean_absolute_error": -1.0779271547884846}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (64, 32, 16), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}]", "cv_results": "{'fit_time': array([1803.91205072, 1803.60621047, 1782.00368309, 1798.94950271,\n       1808.43484569, 1802.27024961, 1803.29206491, 1815.25121522,\n       1800.23041296, 1801.76781487]), 'score_time': array([0.07329249, 0.07521653, 0.07538152, 0.07583761, 0.07447529,\n       0.07598448, 0.07453203, 0.07795   , 0.07478023, 0.07384372]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_size=10, epochs=150, model=<function create_regression_model at 0x000001DE974A8558>...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.2647782 , -1.36321799, -1.45563088, -1.94498694, -1.12075511,\n       -1.55130538, -1.52817838, -1.90607578, -1.76939957, -1.42724883]), 'train_neg_root_mean_squared_error': array([-1.34870053, -1.4788415 , -1.34565585, -1.24700235, -1.33102414,\n       -1.3415183 , -1.50858239, -1.31488035, -1.43724322, -1.43785407]), 'test_r2': array([0.61088398, 0.53186577, 0.4542327 , 0.06095809, 0.6733313 ,\n       0.374135  , 0.3926568 , 0.06084697, 0.19070311, 0.47343083]), 'train_r2': array([0.53287082, 0.44055732, 0.53800123, 0.60165202, 0.54852637,\n       0.54137923, 0.42003927, 0.55909217, 0.47321199, 0.47276411]), 'test_neg_mean_absolute_error': array([-0.97573903, -1.04874474, -1.05534362, -1.51116266, -0.9366544 ,\n       -1.18209278, -1.23082229, -1.5365962 , -1.45253091, -1.10119727]), 'train_neg_mean_absolute_error': array([-1.05513615, -1.16023789, -1.04198272, -0.97546459, -1.04851466,\n       -1.05070691, -1.1848606 , -1.01376126, -1.1232789 , -1.12532788])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"scaler": "[StandardScaler(), MinMaxScaler(), RobustScaler()]", "feature_extraction__n_components": "[4]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "estimator__model__dim": "[7]", "estimator__model__optimizer": "[\"adam\", \"sgd\"]", "estimator__model__hidden_layer_sizes": "[(8,4,2), (16,8,4), (32,16,8), (64,32,16), (128,64,32)]", "estimator__model__num_layers": "[3]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "MLP - 7 - three layer", "dataset_variant": "only_binary", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5590260010112313, "r2": 0.36452585357052736, "neg_mean_absolute_error": -1.2708699606246305}, "mean_train_score": {"neg_root_mean_squared_error": -1.5167210974377128, "r2": 0.4029974043655469, "neg_mean_absolute_error": -1.2169483997799677}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (16, 8, 4), 'estimator__model__dim': 7}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__model__optimizer': 'adam', 'estimator__model__num_layers': 3, 'estimator__model__hidden_layer_sizes': (32, 16, 8), 'estimator__model__dim': 7}]", "cv_results": "{'fit_time': array([1774.05644011, 1795.26653147, 1807.7533989 , 1789.58311987,\n       1777.36235094, 1770.00306392, 1771.93060946, 1810.67658997,\n       1747.67150092, 1790.20049   ]), 'score_time': array([0.07380152, 0.07628512, 0.07425737, 0.0748086 , 0.07354641,\n       0.07428598, 0.0743897 , 0.07732224, 0.0773356 , 0.07442021]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasRegressor(batch_siz...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': [4],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.38231994, -1.2775395 , -1.71140406, -2.10107033, -1.29956733,\n       -1.52381288, -1.4035238 , -1.77638343, -1.64129167, -1.47334706]), 'train_neg_root_mean_squared_error': array([-1.51083925, -1.50162631, -1.4279802 , -2.08337119, -1.46131268,\n       -1.43063932, -1.44159246, -1.41873941, -1.47357919, -1.41753095]), 'test_r2': array([ 0.53519851,  0.58886121,  0.24558537, -0.09580373,  0.56077845,\n        0.3961218 ,  0.48769849,  0.18430187,  0.30365002,  0.43886655]), 'train_r2': array([ 0.41380453,  0.42318562,  0.4797439 , -0.11188887,  0.45581467,\n        0.47842011,  0.47040299,  0.48668896,  0.44623908,  0.48756305]), 'test_neg_mean_absolute_error': array([-1.05428727, -1.01296695, -1.36111214, -1.80725645, -1.05011284,\n       -1.2173849 , -1.13337864, -1.48783299, -1.36641275, -1.21795468]), 'train_neg_mean_absolute_error': array([-1.2023346 , -1.19141735, -1.12573599, -1.80088673, -1.1520974 ,\n       -1.12910606, -1.14139965, -1.12295875, -1.17194601, -1.13160144])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasRegressor(model=create_regression_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"scaler": "[StandardScaler(), MinMaxScaler(), RobustScaler()]", "feature_extraction__n_components": "[4]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "estimator__model__dim": "[7]", "estimator__model__optimizer": "[\"adam\", \"sgd\"]", "estimator__model__hidden_layer_sizes": "[(8,4,2), (16,8,4), (32,16,8), (64,32,16), (128,64,32)]", "estimator__model__num_layers": "[3]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]