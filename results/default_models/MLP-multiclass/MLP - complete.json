[{"experiment_name": "MLP - complete", "dataset_variant": "complete", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=1)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.32357142857142857, "f1_micro": 0.31899159663865545, "f1_macro": 0.2973619137263543, "neg_root_mean_squared_error": -1.8752167478091768, "neg_mean_absolute_error": -1.3474789915966388}, "mean_train_score": {"balanced_accuracy": 0.38501221972811467, "f1_micro": 0.38415937493346963, "f1_macro": 0.3623563727391511, "neg_root_mean_squared_error": -1.7089975965553097, "neg_mean_absolute_error": -1.158355155308595}, "best_params": "[{'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__model__X_shape': 5}]", "cv_results": "{'fit_time': array([74.77159429, 74.92800236, 75.66076446, 75.50658751, 75.74005818,\n       75.65969324, 75.57979679, 75.0569315 , 75.77520871, 75.49763656]), 'score_time': array([0.07019353, 0.07660007, 0.07004142, 0.0696516 , 0.07316804,\n       0.07215476, 0.07368159, 0.07561731, 0.07415056, 0.07555795]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator'...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.51904762, 0.31904762, 0.35      , 0.18571429, 0.24285714,\n       0.36428571, 0.27857143, 0.28809524, 0.28095238, 0.40714286]), 'train_balanced_accuracy': array([0.36831799, 0.44578856, 0.37627274, 0.42211721, 0.38171299,\n       0.36608423, 0.35971826, 0.40055595, 0.36344113, 0.36611314]), 'test_f1_micro': array([0.54285714, 0.32352941, 0.35294118, 0.17647059, 0.23529412,\n       0.35294118, 0.26470588, 0.26470588, 0.26470588, 0.41176471]), 'train_f1_micro': array([0.36928105, 0.43973941, 0.3713355 , 0.42019544, 0.38436482,\n       0.36482085, 0.36482085, 0.40065147, 0.36156352, 0.36482085]), 'test_f1_macro': array([0.49115646, 0.27745554, 0.33422292, 0.17698413, 0.24261294,\n       0.33621934, 0.24053985, 0.25170068, 0.25986395, 0.36286333]), 'train_f1_macro': array([0.33590223, 0.42805798, 0.36071065, 0.40021314, 0.3645963 ,\n       0.34467033, 0.32674803, 0.38104539, 0.33872939, 0.34289029]), 'test_neg_root_mean_squared_error': array([-1.51185789, -1.74052054, -1.72353945, -2.06511643, -1.68906518,\n       -1.97036873, -1.75733756, -2.23606798, -2.0436415 , -2.01465221]), 'train_neg_root_mean_squared_error': array([-1.6803361 , -1.66590645, -1.69113419, -1.62231989, -1.65019   ,\n       -1.77386014, -1.79121999, -1.69594266, -1.77110356, -1.74796298]), 'test_neg_mean_absolute_error': array([-0.85714286, -1.20588235, -1.20588235, -1.67647059, -1.32352941,\n       -1.29411765, -1.38235294, -1.70588235, -1.52941176, -1.29411765]), 'train_neg_mean_absolute_error': array([-1.1503268 , -1.07491857, -1.15960912, -1.07491857, -1.12052117,\n       -1.21172638, -1.22149837, -1.14983713, -1.22149837, -1.19869707])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=1)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"estimator__model__X_shape": "[5]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]