[{"experiment_name": "MLP - totals", "dataset_variant": "only_totals", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"balanced_accuracy": 0.33166666666666667, "f1_micro": 0.3310924369747899, "f1_macro": 0.3064065298552251, "neg_root_mean_squared_error": -1.815795135829288, "neg_mean_absolute_error": -1.273781512605042}, "mean_train_score": {"balanced_accuracy": 0.3697594560631174, "f1_micro": 0.3691735326052245, "f1_macro": 0.3463596357387352, "neg_root_mean_squared_error": -1.7597065127643028, "neg_mean_absolute_error": -1.2078942326116116}, "best_params": "[{'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}, {'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__model__X_shape': 5}]", "cv_results": "{'fit_time': array([60.95919299, 61.01494145, 61.11384177, 61.07611012, 61.24221778,\n       60.79227376, 61.06500816, 61.06116271, 60.92167926, 60.80161643]), 'score_time': array([0.07006383, 0.06863809, 0.07114577, 0.06862354, 0.0687058 ,\n       0.07368469, 0.06811571, 0.06964445, 0.06814694, 0.06866574]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                        n_components=5)),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              KerasClassifier(batch_size=10, epochs=150, model=<function create_model at 0x000001C8D7046798>, verbose=0...\n                   param_distributions={'estimator__model__X_shape': [5],\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))]},\n                   refit='balanced_accuracy', return_train_score=True,\n                   scoring=['balanced_accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_balanced_accuracy': array([0.40952381, 0.33571429, 0.37380952, 0.24285714, 0.30714286,\n       0.42142857, 0.32857143, 0.20952381, 0.3047619 , 0.38333333]), 'train_balanced_accuracy': array([0.36746227, 0.37919714, 0.3658773 , 0.38242904, 0.39953893,\n       0.35599293, 0.35135372, 0.37848529, 0.37589407, 0.34136387]), 'test_f1_micro': array([0.42857143, 0.35294118, 0.38235294, 0.23529412, 0.29411765,\n       0.41176471, 0.32352941, 0.20588235, 0.29411765, 0.38235294]), 'train_f1_micro': array([0.3627451 , 0.37459283, 0.36482085, 0.38436482, 0.39739414,\n       0.35504886, 0.35179153, 0.38110749, 0.37459283, 0.34527687]), 'test_f1_macro': array([0.38581519, 0.28749682, 0.34514533, 0.22133581, 0.30262119,\n       0.4049062 , 0.31653902, 0.19514652, 0.28799534, 0.31706389]), 'train_f1_macro': array([0.34876276, 0.35517305, 0.33833553, 0.34717593, 0.38404806,\n       0.33550143, 0.33313676, 0.36170239, 0.35619365, 0.3035668 ]), 'test_neg_root_mean_squared_error': array([-1.49284005, -1.78226558, -1.88648444, -2.12132034, -1.56242647,\n       -1.765686  , -1.49509   , -2.19625349, -1.99263349, -1.86295148]), 'train_neg_root_mean_squared_error': array([-1.78409824, -1.71788826, -1.7875793 , -1.74236352, -1.65413311,\n       -1.81560374, -1.79757346, -1.74236352, -1.72734286, -1.82811913]), 'test_neg_mean_absolute_error': array([-0.91428571, -1.23529412, -1.26470588, -1.55882353, -1.20588235,\n       -1.11764706, -1.11764706, -1.70588235, -1.38235294, -1.23529412]), 'train_neg_mean_absolute_error': array([-1.23529412, -1.15960912, -1.24104235, -1.17915309, -1.11400651,\n       -1.26384365, -1.24429967, -1.18566775, -1.18566775, -1.27035831])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["only_totals"], "type_of_labels": "floors", "only_BMI": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask, n_components = 5)", "scaler": "MinMaxScaler()", "estimator": "KerasClassifier(model=create_model, epochs=150, batch_size=10, verbose=0)"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"estimator__model__X_shape": "[5]", "feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]"}], "metrics": ["balanced_accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]