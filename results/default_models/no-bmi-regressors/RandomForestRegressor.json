[{"experiment_name": "RandomForestRegressor", "dataset_variant": "complete", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5422753926456076, "r2": 0.3804523048601781, "neg_mean_absolute_error": -1.2010411764705882}, "mean_train_score": {"neg_root_mean_squared_error": -0.5749839479279938, "r2": 0.9155114543803334, "neg_mean_absolute_error": -0.44119726001149645}, "best_params": "[{'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 5, 'feature_extraction': MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))}]", "cv_results": "{'fit_time': array([194.66530895, 198.64975429, 199.50420356, 197.17872381,\n       198.71497416, 197.33697796, 196.03477716, 196.36809826,\n       197.13097477, 197.21178222]), 'score_time': array([0.00400066, 0.00351572, 0.0035007 , 0.00401187, 0.00400805,\n       0.00351143, 0.00552607, 0.00451112, 0.00400138, 0.00331521]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.38442871, -1.29315619, -1.42803238, -1.96018607, -1.43124175,\n       -1.63960451, -1.40691569, -1.90334458, -1.5372837 , -1.43856035]), 'train_neg_root_mean_squared_error': array([-0.58209308, -0.58057368, -0.57388612, -0.54848652, -0.59910955,\n       -0.58436719, -0.58642599, -0.54062788, -0.57889933, -0.57537015]), 'test_r2': array([0.53377929, 0.57874822, 0.47473182, 0.04622444, 0.46726398,\n       0.3008598 , 0.48521935, 0.06353645, 0.3891085 , 0.46505121]), 'train_r2': array([0.91298566, 0.91377623, 0.91597196, 0.9229345 , 0.9085312 ,\n       0.91297738, 0.91236311, 0.92546295, 0.91453635, 0.91557521]), 'test_neg_mean_absolute_error': array([-1.106     , -1.00529412, -1.06411765, -1.50882353, -1.14176471,\n       -1.23970588, -1.13941176, -1.51323529, -1.16294118, -1.12911765]), 'train_neg_mean_absolute_error': array([-0.44558824, -0.44579805, -0.44123779, -0.41592834, -0.46416938,\n       -0.45345277, -0.45442997, -0.41462541, -0.43680782, -0.43993485])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 0, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "RandomForestRegressor", "dataset_variant": "only_totals", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5092183297279291, "r2": 0.40631241740058427, "neg_mean_absolute_error": -1.1854178571428573}, "mean_train_score": {"neg_root_mean_squared_error": -0.5782988282733452, "r2": 0.9145803182421816, "neg_mean_absolute_error": -0.4437135213115286}, "best_params": "[{'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))}]", "cv_results": "{'fit_time': array([17.96354413, 18.14120436, 18.00824499, 17.79464841, 18.07723236,\n       18.26206398, 18.22653079, 18.23153043, 18.23253441, 18.0193553 ]), 'score_time': array([0.00300026, 0.00400925, 0.00552511, 0.00601959, 0.00350046,\n       0.00350332, 0.0035007 , 0.00350332, 0.00405192, 0.00552607]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100,\n                   param_distributions={'feature_extraction': [MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True])),\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.424554  , -1.35967863, -1.47193125, -1.89372121, -1.18298023,\n       -1.55218563, -1.37269253, -1.87905831, -1.59490365, -1.36047786]), 'train_neg_root_mean_squared_error': array([-0.58237945, -0.57798454, -0.57897373, -0.56266083, -0.59125701,\n       -0.57087565, -0.59127814, -0.56186322, -0.5798093 , -0.58590641]), 'test_r2': array([0.50636243, 0.53429348, 0.4419411 , 0.10980801, 0.63605057,\n       0.37342453, 0.50995878, 0.08728213, 0.34245581, 0.52154732]), 'train_r2': array([0.91290003, 0.91454356, 0.9144755 , 0.91889989, 0.91091325,\n       0.91694925, 0.91090688, 0.91949246, 0.91426746, 0.9124549 ]), 'test_neg_mean_absolute_error': array([-1.1617619 , -1.08264706, -1.06972549, -1.53428922, -0.95083333,\n       -1.15401961, -1.13717647, -1.46372549, -1.20058824, -1.09941176]), 'train_neg_mean_absolute_error': array([-0.449439  , -0.44905483, -0.44195548, -0.42448426, -0.45291826,\n       -0.44217155, -0.45750814, -0.43237242, -0.44583062, -0.44140065])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 0, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "RandomForestRegressor", "dataset_variant": "only_binary", "estimator": "RandomForestRegressor()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.575380280565026, "r2": 0.35886555538486065, "neg_mean_absolute_error": -1.243226050420168}, "mean_train_score": {"neg_root_mean_squared_error": -0.575382680018303, "r2": 0.9154072968100635, "neg_mean_absolute_error": -0.44607409891209465}, "best_params": "[{'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 19, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))}]", "cv_results": "{'fit_time': array([138.03719187, 139.96095443, 140.68812466, 139.86559415,\n       140.75623107, 140.37317848, 140.73259902, 140.774261  ,\n       140.52004409, 140.04276466]), 'score_time': array([0.00500584, 0.00395823, 0.00350046, 0.0035007 , 0.00400043,\n       0.00350475, 0.00350595, 0.00351   , 0.0035274 , 0.00400019]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),...\n                                                               MaskedPCA(mask=array([False, False, False, False, False,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.55882557, -1.38489435, -1.57974309, -1.99541828, -1.46120518,\n       -1.51176757, -1.41210939, -1.78445658, -1.54634769, -1.5190351 ]), 'train_neg_root_mean_squared_error': array([-0.553398  , -0.57333188, -0.5738356 , -0.56002298, -0.59457345,\n       -0.59191183, -0.59517851, -0.54965254, -0.57992025, -0.58200177]), 'test_r2': array([0.40892117, 0.51685993, 0.35719697, 0.01163015, 0.44472454,\n       0.40563105, 0.48141165, 0.1768708 , 0.3818835 , 0.40352581]), 'train_r2': array([0.92135319, 0.91591384, 0.91598675, 0.91965853, 0.90991104,\n       0.91071581, 0.9097276 , 0.92295369, 0.91423465, 0.91361786]), 'test_neg_mean_absolute_error': array([-1.27314286, -1.17676471, -1.14882353, -1.58941176, -1.16558824,\n       -1.10882353, -1.13352941, -1.45794118, -1.21970588, -1.15852941]), 'train_neg_mean_absolute_error': array([-0.43748366, -0.43758958, -0.45400651, -0.43462541, -0.45918567,\n       -0.46214984, -0.46348534, -0.42508143, -0.44312704, -0.44400651])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 0, "total_dmg": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]