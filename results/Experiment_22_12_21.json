[{"experiment_name": "Experiment_22_12_21", "dataset_variant": "complete", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.15831932773109242, "f1_micro": 0.15831932773109242, "f1_macro": 0.07116291619065845, "neg_root_mean_squared_error": -3.450728425701474, "neg_mean_absolute_error": -2.84327731092437}, "mean_train_score": {"accuracy": 0.16097911477294505, "f1_micro": 0.16097911477294505, "f1_macro": 0.07151725818405194, "neg_root_mean_squared_error": -3.3609185824668772, "neg_mean_absolute_error": -2.7331768538034105}, "best_params": "[{'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 3}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 22, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=22), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=17), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 20, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=20), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([44.95866704, 46.38466907, 45.69867086, 45.13066554, 45.96566463,\n       42.95366645, 44.42966247, 26.31999969, 24.9640038 , 25.24900007]), 'score_time': array([0.02999902, 0.01799726, 0.02099442, 0.0320003 , 0.01600695,\n       0.02599978, 0.02599978, 0.01300025, 0.01499629, 0.01299787]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=22)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=20)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClass...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.17142857, 0.23529412, 0.08823529, 0.20588235, 0.14705882,\n       0.14705882, 0.17647059, 0.14705882, 0.11764706, 0.14705882]), 'train_accuracy': array([0.20588235, 0.16938111, 0.11074919, 0.14983713, 0.14332248,\n       0.18566775, 0.1465798 , 0.18566775, 0.15635179, 0.15635179]), 'test_f1_micro': array([0.17142857, 0.23529412, 0.08823529, 0.20588235, 0.14705882,\n       0.14705882, 0.17647059, 0.14705882, 0.11764706, 0.14705882]), 'train_f1_micro': array([0.20588235, 0.16938111, 0.11074919, 0.14983713, 0.14332248,\n       0.18566775, 0.1465798 , 0.18566775, 0.15635179, 0.15635179]), 'test_f1_macro': array([0.07403123, 0.10463659, 0.0401979 , 0.10430839, 0.06603175,\n       0.06067588, 0.07756949, 0.07047619, 0.05388471, 0.05981703]), 'train_f1_macro': array([0.09149102, 0.07552785, 0.04863049, 0.05961477, 0.06439394,\n       0.08215041, 0.06605288, 0.08656832, 0.07030123, 0.07044168]), 'test_neg_root_mean_squared_error': array([-3.85078842, -2.92554671, -3.63803438, -3.22216588, -3.35629347,\n       -3.1389395 , -3.56040315, -3.68622236, -3.58919948, -3.53969091]), 'train_neg_root_mean_squared_error': array([-3.46645927, -3.31072682, -3.63031033, -3.33327904, -3.41151528,\n       -2.9967409 , -3.40578163, -3.3210414 , -3.27958844, -3.45374272]), 'test_neg_mean_absolute_error': array([-3.28571429, -2.26470588, -3.05882353, -2.55882353, -2.73529412,\n       -2.5       , -2.97058824, -3.11764706, -3.        , -2.94117647]), 'train_neg_mean_absolute_error': array([-2.85294118, -2.6742671 , -3.04234528, -2.70032573, -2.78501629,\n       -2.34201954, -2.77850163, -2.68403909, -2.63843648, -2.83387622])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_22_12_21", "dataset_variant": "only_totals", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.16411764705882353, "f1_micro": 0.16411764705882353, "f1_macro": 0.07409335553056898, "neg_root_mean_squared_error": -3.268872667766933, "neg_mean_absolute_error": -2.6402521008403363}, "mean_train_score": {"accuracy": 0.18311192012092567, "f1_micro": 0.1831119201209257, "f1_macro": 0.0818848392775344, "neg_root_mean_squared_error": -3.147142816895307, "neg_mean_absolute_error": -2.504454876413106}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 2}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 2, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([40.22405052, 41.21704578, 42.03204155, 41.38304257, 40.72804594,\n       41.20204425, 40.47504449, 23.90095401, 24.30395222, 23.40595531]), 'score_time': array([0.02800035, 0.02799988, 0.01599884, 0.02400064, 0.02599931,\n       0.02399993, 0.02399993, 0.01199937, 0.01200008, 0.01299739]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=DecisionTreeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__binary_thres...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.2       , 0.17647059, 0.20588235, 0.20588235, 0.14705882,\n       0.05882353, 0.20588235, 0.14705882, 0.20588235, 0.08823529]), 'train_accuracy': array([0.15359477, 0.18566775, 0.17589577, 0.21172638, 0.2247557 ,\n       0.16938111, 0.17263844, 0.19543974, 0.19869707, 0.14332248]), 'test_f1_micro': array([0.2       , 0.17647059, 0.20588235, 0.20588235, 0.14705882,\n       0.05882353, 0.20588235, 0.14705882, 0.20588235, 0.08823529]), 'train_f1_micro': array([0.15359477, 0.18566775, 0.17589577, 0.21172638, 0.2247557 ,\n       0.16938111, 0.17263844, 0.19543974, 0.19869707, 0.14332248]), 'test_f1_macro': array([0.0952381 , 0.06989247, 0.09659091, 0.09438776, 0.06583851,\n       0.02730159, 0.09795918, 0.06076277, 0.09276438, 0.0401979 ]), 'train_f1_macro': array([0.06234997, 0.08180708, 0.07733408, 0.09582521, 0.09994456,\n       0.07768801, 0.08493613, 0.08723639, 0.08846577, 0.06326118]), 'test_neg_root_mean_squared_error': array([-3.        , -3.10123315, -3.        , -3.22216588, -3.65818984,\n       -3.70611577, -3.082207  , -3.43853594, -2.94058818, -3.53969091]), 'train_neg_root_mean_squared_error': array([-3.31021394, -3.0270227 , -3.08933228, -2.86674747, -3.43435413,\n       -3.18639208, -3.42865868, -2.96010388, -2.85935233, -3.30925068]), 'test_neg_mean_absolute_error': array([-2.31428571, -2.44117647, -2.35294118, -2.55882353, -3.08823529,\n       -3.14705882, -2.44117647, -2.82352941, -2.29411765, -2.94117647]), 'train_neg_mean_absolute_error': array([-2.67647059, -2.37459283, -2.43648208, -2.21824104, -2.81107492,\n       -2.53745928, -2.80456026, -2.30618893, -2.20846906, -2.67100977])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_22_12_21", "dataset_variant": "only_binary", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.18159663865546216, "f1_micro": 0.18159663865546216, "f1_macro": 0.07816591829650675, "neg_root_mean_squared_error": -3.1233870807937345, "neg_mean_absolute_error": -2.5007563025210087}, "mean_train_score": {"accuracy": 0.17724979242511338, "f1_micro": 0.17724979242511338, "f1_macro": 0.0779474219097748, "neg_root_mean_squared_error": -3.116132742615577, "neg_mean_absolute_error": -2.4718432649932938}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__min_samples_split': 4, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 8, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 1, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 8, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 4, 'estimator__estimator__max_depth': 2, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 2, 'estimator__estimator__max_depth': 5, 'estimator__binary_threshold': 4}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__min_samples_split': 16, 'estimator__estimator__min_samples_leaf': 16, 'estimator__estimator__max_depth': 10, 'estimator__binary_threshold': 4}]", "cv_results": "{'fit_time': array([46.2776792 , 45.22468185, 45.52168322, 45.51668692, 44.95767879,\n       45.81367922, 46.36867762, 27.64109087, 28.82608557, 29.13010287]), 'score_time': array([0.02299547, 0.02599835, 0.03099918, 0.02699113, 0.02399969,\n       0.0279994 , 0.02000189, 0.01299953, 0.01299834, 0.01099992]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Deci...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.20588235, 0.20588235, 0.17647059, 0.23529412,\n       0.11764706, 0.14705882, 0.14705882, 0.20588235, 0.11764706]), 'train_accuracy': array([0.15686275, 0.18241042, 0.18241042, 0.16612378, 0.21824104,\n       0.18566775, 0.16286645, 0.21498371, 0.15309446, 0.14983713]), 'test_f1_micro': array([0.25714286, 0.20588235, 0.20588235, 0.17647059, 0.23529412,\n       0.11764706, 0.14705882, 0.14705882, 0.20588235, 0.11764706]), 'train_f1_micro': array([0.15686275, 0.18241042, 0.18241042, 0.16612378, 0.21824104,\n       0.18566775, 0.16286645, 0.21498371, 0.15309446, 0.14983713]), 'test_f1_macro': array([0.11405985, 0.09007741, 0.09157509, 0.06845238, 0.1068323 ,\n       0.05075188, 0.06168831, 0.06397516, 0.10063336, 0.03361345]), 'train_f1_macro': array([0.06964651, 0.08176223, 0.08207165, 0.07110842, 0.09752747,\n       0.08254457, 0.0695368 , 0.09674353, 0.06628571, 0.06224732]), 'test_neg_root_mean_squared_error': array([-2.36038738, -2.73861279, -3.22672662, -3.11070259, -2.51466288,\n       -3.35629347, -3.51048849, -3.53969091, -3.38682569, -3.48947999]), 'train_neg_root_mean_squared_error': array([-3.20181729, -3.13486229, -3.15196025, -3.24413778, -2.7519611 ,\n       -2.96395281, -3.22298342, -2.78315079, -3.35616502, -3.35033665]), 'test_neg_mean_absolute_error': array([-1.74285714, -2.08823529, -2.58823529, -2.44117647, -1.91176471,\n       -2.73529412, -2.91176471, -2.94117647, -2.76470588, -2.88235294]), 'train_neg_mean_absolute_error': array([-2.55882353, -2.48534202, -2.50162866, -2.60260586, -2.10749186,\n       -2.30944625, -2.57654723, -2.13680782, -2.72312704, -2.71661238])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(estimator = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__estimator__max_depth": "[2, 5, 10]", "estimator__estimator__min_samples_split": "[2, 4, 8, 16]", "estimator__estimator__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__binary_threshold": "[2, 3, 4]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]