[{"experiment_name": "Experiment_6_24_11_21", "dataset_variant": "complete", "estimator": "GradientBoostingRegressor(criterion = 'mse')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_outer_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5406636187216678, "r2": 0.38328254108420723, "neg_mean_absolute_error": -1.2013389292727843}, "mean_train_score": {"neg_root_mean_squared_error": -0.4715652342344354, "r2": 0.9430330100352361, "neg_mean_absolute_error": -0.35138581024141463}, "best_params": "[{'feature_extraction__n_components': 14, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.0001, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}]", "cv_results": "{'mean_fit_time': array([0.90979872, 0.59839599, 0.23789904, 0.34130065, 0.05849953,\n       0.72239857, 0.13359976, 0.47339985, 0.28990037, 0.29129968,\n       0.50159948, 0.54229763, 0.44090264, 0.31829848, 0.52390146,\n       0.2066011 , 0.29139709, 0.22899728, 0.25980175, 0.11590099]), 'std_fit_time': array([0.03578129, 0.02520089, 0.00789161, 0.01467592, 0.01083719,\n       0.02512578, 0.00652997, 0.01502106, 0.03365756, 0.04374043,\n       0.06260234, 0.05346715, 0.05288587, 0.01961136, 0.03198056,\n       0.01537004, 0.02757422, 0.02696895, 0.01227946, 0.01075699]), 'mean_score_time': array([0.00360093, 0.00329998, 0.00260155, 0.00270004, 0.00320098,\n       0.00320058, 0.00319986, 0.00320044, 0.00339947, 0.00320034,\n       0.00390067, 0.00370128, 0.00299845, 0.00270133, 0.00290027,\n       0.00330026, 0.00290043, 0.00280168, 0.00289922, 0.00220051]), 'std_score_time': array([0.00066231, 0.00090088, 0.00048881, 0.00064071, 0.00263802,\n       0.00039892, 0.00087164, 0.00060013, 0.00101999, 0.00039802,\n       0.00181377, 0.00148741, 0.00077529, 0.00045798, 0.0003015 ,\n       0.00045915, 0.00029901, 0.00040158, 0.0005405 , 0.00059962]), 'param_feature_extraction__n_components': masked_array(data=[17, 15, 23, 16, 1, 21, 1, 11, 4, 6, 7, 21, 12, 13, 18,\n                   12, 11, 14, 6, 5],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_feature_extraction': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]))             ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                             n_components=14)                                                          ],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__tol': masked_array(data=[0.01, 0.1, 0.001, 0.01, 0.1, 0.01, 0.01, 0.0001, 0.001,\n                   0.1, 0.1, 0.0001, 0.001, 0.01, 0.001, 0.0001, 0.001,\n                   0.0001, 0.01, 0.1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__n_estimators': masked_array(data=[200, 150, 50, 100, 50, 150, 100, 150, 150, 100, 150,\n                   100, 100, 100, 100, 50, 100, 50, 100, 50],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__max_depth': masked_array(data=[5, 5, 5, 4, 3, 5, 4, 5, 4, 6, 6, 5, 6, 4, 6, 6, 4, 5,\n                   6, 6],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__learning_rate': masked_array(data=[0.1, 0.1, 0.0001, 0.01, 0.001, 0.001, 0.0001, 0.001,\n                   0.1, 0.001, 0.1, 0.1, 0.001, 0.01, 0.0001, 0.1, 0.001,\n                   0.1, 0.001, 0.1],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'feature_extraction__n_components': 17, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.1, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 23, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.001, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 16, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 21, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.01, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.0001, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__n_estimators': 150, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 100, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 150, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 21, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 100, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.001, 'estimator__n_estimators': 100, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 18, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__n_estimators': 100, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.0001, 'estimator__n_estimators': 50, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.001, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 14, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.0001, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.1}], 'split0_test_neg_root_mean_squared_error': array([-1.62740922, -1.45438627, -2.02096391, -1.5416327 , -1.99593111,\n       -1.87199365, -2.01664873, -1.87758811, -1.55785841, -1.96044812,\n       -1.60638715, -1.62154195, -1.93414244, -1.5049332 , -2.0147193 ,\n       -1.55523439, -1.93455712, -1.40683982, -1.96057946, -1.6761654 ]), 'split1_test_neg_root_mean_squared_error': array([-1.37329981, -1.35977796, -1.98972522, -1.43057002, -1.97608787,\n       -1.84142244, -1.98414044, -1.8460965 , -1.39632344, -1.8902331 ,\n       -1.44308844, -1.44031915, -1.88941701, -1.42117888, -1.98523115,\n       -1.47208434, -1.8874663 , -1.27532191, -1.89154525, -1.50649336]), 'split2_test_neg_root_mean_squared_error': array([-1.312295  , -1.42598881, -1.96731875, -1.58094102, -1.94740843,\n       -1.85096031, -1.96119473, -1.83755211, -1.64734111, -1.8889902 ,\n       -1.59733662, -1.31386293, -1.86367018, -1.55436324, -1.9591825 ,\n       -1.48725167, -1.88487405, -1.48919605, -1.88924206, -1.61109616]), 'split3_test_neg_root_mean_squared_error': array([-2.05441388, -2.00477278, -2.00352598, -1.79553445, -1.99023455,\n       -1.90305705, -2.00085337, -1.9433637 , -1.98362871, -1.96944368,\n       -2.23345394, -2.08898264, -1.98067503, -1.81453678, -2.00407111,\n       -2.01676389, -1.94676869, -1.94868792, -1.96948607, -1.98226029]), 'split4_test_neg_root_mean_squared_error': array([-1.59928917, -1.38632941, -1.95713307, -1.5236218 , -1.9260108 ,\n       -1.84933372, -1.9524882 , -1.84944162, -1.52748789, -1.9100981 ,\n       -1.61383978, -1.69473026, -1.88605766, -1.52416782, -1.95575055,\n       -1.52977193, -1.88180524, -1.40595901, -1.91012796, -1.48114335]), 'split5_test_neg_root_mean_squared_error': array([-1.77240787, -1.54714614, -1.95562504, -1.52489352, -1.93389096,\n       -1.82476342, -1.95248637, -1.82482756, -1.58869407, -1.86357892,\n       -1.68117228, -1.72601768, -1.87170361, -1.5235721 , -1.95670446,\n       -1.64905799, -1.87679184, -1.57434526, -1.86326321, -1.71337254]), 'split6_test_neg_root_mean_squared_error': array([-1.37252491, -1.40872607, -1.95701282, -1.55260483, -1.92427433,\n       -1.84561046, -1.95110185, -1.81064217, -1.22003367, -1.87563604,\n       -1.36871952, -1.53548494, -1.84581434, -1.51304129, -1.95335556,\n       -1.31107892, -1.88084361, -1.40057065, -1.87500972, -1.44066053]), 'split7_test_neg_root_mean_squared_error': array([-1.67479602, -1.84934807, -1.96463917, -1.76140278, -1.96498551,\n       -1.88508458, -1.96405632, -1.90377484, -1.83637966, -1.91383373,\n       -1.93603347, -1.66578739, -1.93763932, -1.77563875, -1.9630052 ,\n       -1.93343533, -1.92052743, -1.84274324, -1.91347618, -2.05411295]), 'split8_test_neg_root_mean_squared_error': array([-1.76934182, -1.62193731, -1.96358952, -1.66430886, -1.95243479,\n       -1.85275143, -1.96180768, -1.8670934 , -1.74815101, -1.89070244,\n       -1.66956516, -1.86748715, -1.89790324, -1.61115298, -1.96564933,\n       -1.58524069, -1.89641979, -1.60755124, -1.89061708, -1.67572239]), 'split9_test_neg_root_mean_squared_error': array([-1.60862392, -1.41705731, -1.96404914, -1.60610878, -1.94996694,\n       -1.86624303, -1.96092655, -1.86927902, -1.26571854, -1.92090527,\n       -1.66472416, -1.5382261 , -1.88449639, -1.60525683, -1.96083612,\n       -1.57876555, -1.89534688, -1.4554211 , -1.91934049, -1.50380573]), 'mean_test_neg_root_mean_squared_error': array([-1.61644016, -1.54754701, -1.97435826, -1.59816188, -1.95612253,\n       -1.85912201, -1.97057042, -1.8629659 , -1.57716165, -1.90838696,\n       -1.68143205, -1.64924402, -1.89915192, -1.58478419, -1.97185053,\n       -1.61186847, -1.90054009, -1.54066362, -1.90826875, -1.66448327]), 'std_test_neg_root_mean_squared_error': array([0.21319544, 0.20656133, 0.02138633, 0.10706127, 0.02401711,\n       0.02167969, 0.02134845, 0.03702098, 0.22951791, 0.03275136,\n       0.23277444, 0.20770185, 0.03832945, 0.1170311 , 0.02069808,\n       0.20150038, 0.02336013, 0.19983642, 0.03274456, 0.19818801]), 'rank_test_neg_root_mean_squared_error': array([ 7,  2, 20,  5, 17, 11, 18, 12,  3, 16, 10,  8, 13,  4, 19,  6, 14,\n        1, 15,  9]), 'split0_train_neg_root_mean_squared_error': array([-0.07898773, -0.14964894, -1.9670351 , -1.32696395, -1.94535294,\n       -1.80116   , -1.96308143, -1.80439383, -0.33777874, -1.83764985,\n       -0.04428462, -0.29110924, -1.84013487, -1.33857752, -1.95829143,\n       -0.30285269, -1.87299204, -0.50466579, -1.83764911, -0.29116174]), 'split1_train_neg_root_mean_squared_error': array([-0.06011109, -0.13836322, -1.97089812, -1.31758332, -1.94885468,\n       -1.80397686, -1.96687331, -1.80756404, -0.35755017, -1.83903413,\n       -0.0468818 , -0.22106029, -1.84411113, -1.32259478, -1.96277673,\n       -0.25250771, -1.87693988, -0.4551628 , -1.83903413, -0.27092083]), 'split2_train_neg_root_mean_squared_error': array([-0.05849178, -0.130819  , -1.97322839, -1.29226002, -1.9477434 ,\n       -1.79937633, -1.96898581, -1.80405407, -0.3736716 , -1.83557073,\n       -0.05383867, -0.25863992, -1.83968665, -1.30192446, -1.96470381,\n       -0.25691817, -1.87623416, -0.47864985, -1.83557073, -0.2516133 ]), 'split3_train_neg_root_mean_squared_error': array([-0.08264501, -0.11451117, -1.96872   , -1.25743407, -1.9398071 ,\n       -1.78153745, -1.96459409, -1.7850686 , -0.33868679, -1.82660827,\n       -0.03526687, -0.22718144, -1.82526342, -1.26023874, -1.96002523,\n       -0.22609435, -1.86331413, -0.4210327 , -1.82660827, -0.21769132]), 'split4_train_neg_root_mean_squared_error': array([-0.06122835, -0.18554007, -1.97410439, -1.31908391, -1.94897501,\n       -1.79736824, -1.97034143, -1.80284531, -0.39289248, -1.8400829 ,\n       -0.05349861, -0.24432746, -1.84050897, -1.33093698, -1.96542363,\n       -0.26816597, -1.8768639 , -0.47701514, -1.8400821 , -0.29515101]), 'split5_train_neg_root_mean_squared_error': array([-0.0636286 , -0.16860476, -1.97421391, -1.28985127, -1.94828471,\n       -1.79386788, -1.97043813, -1.79749808, -0.36986828, -1.83969686,\n       -0.0585769 , -0.23361181, -1.84051725, -1.28966421, -1.96506076,\n       -0.26985595, -1.87228649, -0.48152802, -1.83969686, -0.28699946]), 'split6_train_neg_root_mean_squared_error': array([-0.0650999 , -0.16221702, -1.97395286, -1.29152394, -1.95011864,\n       -1.78961301, -1.9704833 , -1.79981522, -0.37570947, -1.84271875,\n       -0.05467777, -0.26599618, -1.83559713, -1.30157481, -1.96543983,\n       -0.26921774, -1.87689856, -0.51804424, -1.84271828, -0.29761162]), 'split7_train_neg_root_mean_squared_error': array([-0.08111977, -0.15345575, -1.97354145, -1.27333971, -1.94619573,\n       -1.79866231, -1.96902336, -1.80002938, -0.34784993, -1.83925916,\n       -0.04592945, -0.25111899, -1.83436102, -1.27446792, -1.9653046 ,\n       -0.25491092, -1.87227717, -0.44136434, -1.83925916, -0.26897508]), 'split8_train_neg_root_mean_squared_error': array([-0.07176129, -0.13850825, -1.97324566, -1.28585749, -1.94758582,\n       -1.78352698, -1.96932137, -1.79115825, -0.40283231, -1.84013023,\n       -0.05623333, -0.26328718, -1.83001289, -1.29000306, -1.96558289,\n       -0.22931094, -1.86909356, -0.47620638, -1.84013023, -0.25247616]), 'split9_train_neg_root_mean_squared_error': array([-0.0651063 , -0.14752975, -1.9731954 , -1.29098496, -1.95006295,\n       -1.78884051, -1.96956008, -1.79200123, -0.38865588, -1.8414165 ,\n       -0.063659  , -0.27061171, -1.83533952, -1.29445515, -1.96531913,\n       -0.26027406, -1.86906933, -0.46198307, -1.8414165 , -0.26634231]), 'mean_train_neg_root_mean_squared_error': array([-0.06881798, -0.14891979, -1.97221353, -1.29448827, -1.9472981 ,\n       -1.79379296, -1.96827023, -1.7984428 , -0.36854956, -1.83821674,\n       -0.0512847 , -0.25269442, -1.83655328, -1.30044376, -1.9637928 ,\n       -0.25901085, -1.87259692, -0.47156523, -1.83821654, -0.26989428]), 'std_train_neg_root_mean_squared_error': array([0.00865552, 0.01913069, 0.00237015, 0.02033541, 0.0028845 ,\n       0.00723357, 0.00245202, 0.00669478, 0.02153945, 0.00428574,\n       0.00779334, 0.02051703, 0.00537176, 0.02330326, 0.00247228,\n       0.02063583, 0.00424317, 0.02698726, 0.00428566, 0.02351233]), 'split0_test_r2': array([0.3557656 , 0.48547095, 0.00650089, 0.42188772, 0.03096054,\n       0.14756925, 0.01073901, 0.14246665, 0.40965439, 0.06510879,\n       0.3723019 , 0.36040252, 0.09002958, 0.44908473, 0.01263106,\n       0.41164145, 0.08963934, 0.51856277, 0.06498352, 0.31658563]), 'split1_test_r2': array([0.5249159 , 0.53422543, 0.00269961, 0.48446517, 0.01632353,\n       0.14582543, 0.00829023, 0.14148364, 0.50885261, 0.09994199,\n       0.47540316, 0.47741463, 0.100719  , 0.49121152, 0.00719961,\n       0.45410997, 0.10257495, 0.59028731, 0.09869195, 0.42829207]), 'split2_test_r2': array([0.55642411, 0.4762341 , 0.00309346, 0.35622171, 0.0231698 ,\n       0.11753152, 0.00929028, 0.13027028, 0.30100824, 0.08089655,\n       0.34279951, 0.55536351, 0.10537074, 0.37768536, 0.01132223,\n       0.43026367, 0.08489768, 0.42877299, 0.08065145, 0.33142842]), 'split3_test_r2': array([-0.04767716,  0.00234149,  0.00358203,  0.19972531,  0.01675868,\n        0.10100928,  0.00623861,  0.06252484,  0.02327486,  0.03719413,\n       -0.23824219, -0.08323144,  0.02618144,  0.1826969 ,  0.00303973,\n       -0.00962875,  0.05923685,  0.05738101,  0.03715269,  0.02462199]), 'split4_test_r2': array([0.33481865, 0.50017389, 0.00384532, 0.39627324, 0.03527507,\n       0.11056002, 0.00856806, 0.11045623, 0.39320552, 0.05115032,\n       0.32265972, 0.25305738, 0.07488441, 0.39584045, 0.00525219,\n       0.39138949, 0.07905135, 0.48591919, 0.05112065, 0.42946768]), 'split5_test_r2': array([0.18301627, 0.37748654, 0.00537987, 0.39526499, 0.02736468,\n       0.13403727, 0.00856992, 0.13397639, 0.34360296, 0.09680475,\n       0.26496078, 0.2252233 , 0.08891221, 0.39631263, 0.00428158,\n       0.29277447, 0.08395189, 0.35540634, 0.09711074, 0.23653405]), 'split6_test_r2': array([0.51007846, 0.48389369, 0.00396773, 0.37308605, 0.03701385,\n       0.11413783, 0.00997548, 0.14738822, 0.61289418, 0.08507982,\n       0.51279135, 0.38683523, 0.1139421 , 0.40462906, 0.00768701,\n       0.55296272, 0.07999235, 0.48985209, 0.08569074, 0.46022921]), 'split7_test_r2': array([ 0.2749301 ,  0.11591636,  0.00225023,  0.1980018 ,  0.00189841,\n        0.08141844,  0.00284215,  0.06311302,  0.12827202,  0.05318649,\n        0.03109374,  0.28270933,  0.02948575,  0.18498563,  0.00390918,\n        0.03369253,  0.04655188,  0.12221998,  0.05354023, -0.09069841]), 'split8_test_r2': array([0.19075593, 0.31997611, 0.00331608, 0.28398208, 0.01460781,\n       0.11265939, 0.00512412, 0.09886859, 0.21002394, 0.07593524,\n       0.27945222, 0.09848847, 0.06888318, 0.32898906, 0.00122394,\n       0.35039934, 0.07033817, 0.33198581, 0.07601868, 0.27412777]), 'split9_test_r2': array([0.33109401, 0.4809241 , 0.00284944, 0.33318409, 0.01709728,\n       0.09968925, 0.0060176 , 0.09675762, 0.58587608, 0.04617668,\n       0.2836247 , 0.38835928, 0.08199159, 0.33389132, 0.00610928,\n       0.35569527, 0.0713898 , 0.45243791, 0.04773003, 0.41542598]), 'mean_test_r2': array([0.32141219, 0.37766426, 0.00374846, 0.34420922, 0.02204697,\n       0.11644377, 0.00756555, 0.11273055, 0.35166648, 0.06914748,\n       0.26468449, 0.29446222, 0.07804   , 0.35453267, 0.00626558,\n       0.32633002, 0.07676243, 0.38328254, 0.06926907, 0.28260144]), 'std_test_r2': array([0.17558615, 0.17190483, 0.00122848, 0.0883189 , 0.01026893,\n       0.01985638, 0.00231992, 0.03017637, 0.18257318, 0.02072394,\n       0.20858589, 0.17633586, 0.02822848, 0.09668044, 0.00339627,\n       0.17060941, 0.01501866, 0.16360587, 0.02043568, 0.17424942]), 'rank_test_r2': array([ 7,  2, 20,  5, 17, 11, 18, 12,  4, 16, 10,  8, 13,  3, 19,  6, 14,\n        1, 15,  9]), 'split0_train_r2': array([0.99839777, 0.99424887, 0.0063575 , 0.54780663, 0.02814214,\n       0.16687431, 0.01034785, 0.16388001, 0.9706998 , 0.13277564,\n       0.99949637, 0.97823704, 0.1304286 , 0.53985681, 0.01517155,\n       0.97644577, 0.09909748, 0.93459459, 0.13277634, 0.97822919]), 'split1_train_r2': array([0.99907568, 0.99510273, 0.00633342, 0.55591254, 0.02843637,\n       0.16751913, 0.01038764, 0.16420509, 0.9672971 , 0.134849  ,\n       0.99943776, 0.98749931, 0.13006558, 0.55252792, 0.01450566,\n       0.98368971, 0.09881686, 0.94700366, 0.134849  , 0.98122426]), 'split2_train_r2': array([0.9991271 , 0.99563369, 0.00659231, 0.57393817, 0.03208707,\n       0.17393007, 0.01085952, 0.16962951, 0.96437515, 0.14036309,\n       0.99926046, 0.98293274, 0.13650363, 0.56754156, 0.01515705,\n       0.98315921, 0.10185412, 0.94154675, 0.14036309, 0.98384749]), 'split3_train_r2': array([0.99825031, 0.99664089, 0.00712178, 0.59495944, 0.03607074,\n       0.18694863, 0.01127903, 0.18372237, 0.97061508, 0.14528975,\n       0.99968139, 0.98677871, 0.14654785, 0.59315056, 0.01587242,\n       0.98690494, 0.11059364, 0.95458914, 0.14528975, 0.98786023]), 'split4_train_r2': array([0.99904464, 0.99122725, 0.00688223, 0.55659012, 0.03200511,\n       0.17674448, 0.01066471, 0.17171947, 0.96066239, 0.13715001,\n       0.99927063, 0.98478734, 0.13675037, 0.5485855 , 0.01559714,\n       0.98167399, 0.10231062, 0.94201377, 0.13715075, 0.9778002 ]), 'split5_train_r2': array([0.99896827, 0.99275564, 0.00677204, 0.57602545, 0.03269069,\n       0.17994793, 0.0105676 , 0.17662554, 0.96513781, 0.13751201,\n       0.99912559, 0.98609247, 0.13674261, 0.57614841, 0.0159606 ,\n       0.98144228, 0.10668397, 0.94091141, 0.13751201, 0.9790095 ]), 'split6_train_r2': array([0.99892001, 0.99329416, 0.0070347 , 0.57492512, 0.03086877,\n       0.18383348, 0.01052224, 0.17450136, 0.96402798, 0.13467624,\n       0.99923813, 0.98196935, 0.1413518 , 0.56828336, 0.01558091,\n       0.98152996, 0.10227747, 0.93160974, 0.13467667, 0.97742851]), 'split7_train_r2': array([0.99832186, 0.9939946 , 0.00672879, 0.58651105, 0.03406396,\n       0.17496075, 0.01127144, 0.17370614, 0.96914261, 0.13729723,\n       0.99946203, 0.98391821, 0.14188604, 0.585778  , 0.01500261,\n       0.98342887, 0.10604507, 0.95032134, 0.13729723, 0.98154987]), 'split8_train_r2': array([0.99868672, 0.99510755, 0.00702651, 0.57834134, 0.03268361,\n       0.18878736, 0.01097213, 0.18183056, 0.95861681, 0.13647988,\n       0.99919358, 0.98232193, 0.14594933, 0.57561813, 0.01472363,\n       0.98659012, 0.10908264, 0.94216833, 0.13647988, 0.98374391]), 'split9_train_r2': array([0.99891901, 0.99444947, 0.00707709, 0.57497184, 0.03022139,\n       0.18394659, 0.01073235, 0.18106026, 0.96147827, 0.13527224,\n       0.99896654, 0.98132466, 0.14097032, 0.5726838 , 0.01498804,\n       0.98272424, 0.10910574, 0.94557136, 0.13527224, 0.98190929]), 'mean_train_r2': array([0.99877114, 0.99424548, 0.00679264, 0.57199817, 0.03172698,\n       0.17834927, 0.01076045, 0.17408803, 0.9652053 , 0.13716651,\n       0.99931325, 0.98358618, 0.13871961, 0.5680174 , 0.01525596,\n       0.98275891, 0.10458676, 0.94303301, 0.1371667 , 0.98126025]), 'std_train_r2': array([0.00031572, 0.00146568, 0.00027485, 0.01377265, 0.00230354,\n       0.00727611, 0.00031588, 0.00659924, 0.00399187, 0.00333547,\n       0.00019664, 0.00267781, 0.00540278, 0.01582281, 0.00045801,\n       0.00278605, 0.00405767, 0.00647355, 0.00333534, 0.00312787]), 'split0_test_neg_mean_absolute_error': array([-1.23930317, -1.19861236, -1.77297586, -1.37806656, -1.74975616,\n       -1.67231833, -1.76899419, -1.68015233, -1.24729688, -1.71760055,\n       -1.23711998, -1.29365085, -1.71665473, -1.35163575, -1.76592461,\n       -1.24742066, -1.71669768, -1.19544189, -1.71822286, -1.30164733]), 'split1_test_neg_mean_absolute_error': array([-0.97072793, -1.04067351, -1.73943409, -1.20777272, -1.72808846,\n       -1.60994828, -1.73378266, -1.6135676 , -1.07907734, -1.6463731 ,\n       -1.07517626, -1.10632196, -1.64970534, -1.19638939, -1.73556326,\n       -1.09090229, -1.65101881, -0.99688719, -1.64742889, -1.15569571]), 'split2_test_neg_mean_absolute_error': array([-0.93855194, -1.03261569, -1.71112973, -1.26292131, -1.69695195,\n       -1.60831306, -1.70511404, -1.59432599, -1.17942301, -1.62639844,\n       -1.13486781, -0.97092751, -1.61781062, -1.24189961, -1.70229289,\n       -0.99556154, -1.63577709, -1.06525963, -1.62745409, -1.10586844]), 'split3_test_neg_mean_absolute_error': array([-1.60681906, -1.50147872, -1.7391499 , -1.39782529, -1.72570035,\n       -1.62381382, -1.7369913 , -1.66690472, -1.55917123, -1.69434298,\n       -1.6961209 , -1.63334033, -1.70163544, -1.42303616, -1.73842622,\n       -1.47702956, -1.6764972 , -1.45040901, -1.69442319, -1.44919578]), 'split4_test_neg_mean_absolute_error': array([-1.26590481, -1.04166878, -1.68019594, -1.2718991 , -1.6488332 ,\n       -1.57347536, -1.67641914, -1.57917803, -1.19242847, -1.63707159,\n       -1.26995485, -1.32160115, -1.61123075, -1.28866694, -1.67702574,\n       -1.20316441, -1.61102626, -1.11910597, -1.63741355, -1.09386711]), 'split5_test_neg_mean_absolute_error': array([-1.32160279, -1.1186399 , -1.67960912, -1.29464025, -1.66485297,\n       -1.57356736, -1.6777402 , -1.58158585, -1.16398373, -1.61338601,\n       -1.26913617, -1.34091125, -1.62012258, -1.2833507 , -1.68214558,\n       -1.21295253, -1.61934023, -1.15011328, -1.6128348 , -1.26249192]), 'split6_test_neg_mean_absolute_error': array([-1.06616826, -1.07608998, -1.68117108, -1.3718704 , -1.65894939,\n       -1.61321777, -1.67695663, -1.57914574, -0.95295   , -1.61917754,\n       -0.98968088, -1.2385135 , -1.60244822, -1.3389172 , -1.67830233,\n       -0.98775744, -1.63238233, -1.16558085, -1.61778212, -1.17708898]), 'split7_test_neg_mean_absolute_error': array([-1.35692104, -1.44506661, -1.70681546, -1.50104868, -1.70785215,\n       -1.6418188 , -1.70683536, -1.65208186, -1.4198067 , -1.67880898,\n       -1.55904347, -1.35813652, -1.68760768, -1.5089073 , -1.70579755,\n       -1.48650825, -1.67145176, -1.45777266, -1.67891987, -1.59403259]), 'split8_test_neg_mean_absolute_error': array([-1.30392854, -1.23097329, -1.70646686, -1.43749773, -1.70163903,\n       -1.61710721, -1.70561642, -1.63495938, -1.35266772, -1.65007135,\n       -1.27415086, -1.40126012, -1.64716431, -1.41153369, -1.70901053,\n       -1.22298478, -1.66384168, -1.28418441, -1.65018605, -1.29502947]), 'split9_test_neg_mean_absolute_error': array([-1.1908069 , -1.10337775, -1.70697156, -1.34627616, -1.69263909,\n       -1.62743982, -1.70377535, -1.62451929, -1.03098143, -1.66133526,\n       -1.24688431, -1.12521011, -1.64632826, -1.34532111, -1.70214604,\n       -1.21845502, -1.64564468, -1.12863439, -1.660299  , -1.14546677]), 'mean_test_neg_mean_absolute_error': array([-1.22607344, -1.17891966, -1.71239196, -1.34698182, -1.69752628,\n       -1.61610198, -1.70922253, -1.62064208, -1.21777865, -1.65445658,\n       -1.27521355, -1.27898733, -1.65007079, -1.33896579, -1.70966348,\n       -1.21427365, -1.65236777, -1.20133893, -1.65449644, -1.25803841]), 'std_test_neg_mean_absolute_error': array([0.18807459, 0.16038851, 0.02881127, 0.08421602, 0.03087114,\n       0.02782757, 0.02849649, 0.03549559, 0.17484386, 0.03213085,\n       0.20032038, 0.1739674 , 0.03773329, 0.08762868, 0.02756011,\n       0.16088339, 0.02956018, 0.14524507, 0.03234293, 0.15248943]), 'rank_test_neg_mean_absolute_error': array([ 5,  1, 20, 10, 17, 11, 18, 12,  4, 15,  7,  8, 13,  9, 19,  3, 14,\n        2, 16,  6]), 'split0_train_neg_mean_absolute_error': array([-0.05305656, -0.09919448, -1.70378932, -1.11611844, -1.68599955,\n       -1.5609489 , -1.70055033, -1.56526641, -0.24576242, -1.58945424,\n       -0.03094273, -0.19250742, -1.59634909, -1.12458035, -1.69565035,\n       -0.21885705, -1.62398951, -0.37660131, -1.58945126, -0.22630791]), 'split1_train_neg_mean_absolute_error': array([-0.03887389, -0.09595973, -1.70895545, -1.11460039, -1.69000439,\n       -1.56683774, -1.70555529, -1.57006658, -0.26771163, -1.59390926,\n       -0.0337158 , -0.14874313, -1.60246385, -1.11634583, -1.70141378,\n       -0.19110034, -1.62978643, -0.34228919, -1.59390926, -0.20897414]), 'split2_train_neg_mean_absolute_error': array([-0.03889272, -0.0871812 , -1.71161407, -1.09865902, -1.69007342,\n       -1.56537263, -1.70785739, -1.57032318, -0.27787282, -1.59231907,\n       -0.03830983, -0.17590876, -1.59826507, -1.10670229, -1.7042373 ,\n       -0.18863678, -1.62898015, -0.36967488, -1.59231907, -0.19226792]), 'split3_train_neg_mean_absolute_error': array([-0.05064181, -0.07478047, -1.70769723, -1.06777588, -1.68220688,\n       -1.55013864, -1.70404204, -1.54858545, -0.25223889, -1.5813721 ,\n       -0.02465171, -0.15427923, -1.58423898, -1.07080932, -1.6995906 ,\n       -0.16692882, -1.61850744, -0.31563119, -1.5813721 , -0.1641154 ]), 'split4_train_neg_mean_absolute_error': array([-0.04012879, -0.12259262, -1.71358326, -1.11592274, -1.69163525,\n       -1.56254348, -1.71038452, -1.56833902, -0.29339044, -1.59615624,\n       -0.03827297, -0.16709301, -1.60007934, -1.12245783, -1.70583833,\n       -0.204252  , -1.6324769 , -0.35421364, -1.59615624, -0.22692881]), 'split5_train_neg_mean_absolute_error': array([-0.04250099, -0.10980741, -1.71370973, -1.08645119, -1.69068875,\n       -1.55899788, -1.71058249, -1.56223719, -0.27569504, -1.60032699,\n       -0.04276237, -0.16296831, -1.59938212, -1.08553585, -1.70581827,\n       -0.19592312, -1.62639775, -0.36196243, -1.60032699, -0.22038768]), 'split6_train_neg_mean_absolute_error': array([-0.04341807, -0.10809808, -1.71330971, -1.08526978, -1.69327104,\n       -1.55409452, -1.71055729, -1.56342804, -0.2814768 , -1.60098236,\n       -0.03872959, -0.17867896, -1.59041232, -1.09265339, -1.70602015,\n       -0.19619489, -1.63127163, -0.37606839, -1.60099049, -0.21903704]), 'split7_train_neg_mean_absolute_error': array([-0.05298347, -0.10116596, -1.71058857, -1.07552903, -1.68740335,\n       -1.5617576 , -1.70645031, -1.56397117, -0.26028757, -1.59567944,\n       -0.03306233, -0.16810253, -1.59150661, -1.07345748, -1.70334797,\n       -0.19261744, -1.62527086, -0.33122018, -1.59567945, -0.20668566]), 'split8_train_neg_mean_absolute_error': array([-0.047596  , -0.0928953 , -1.71025882, -1.07102228, -1.68837648,\n       -1.54438126, -1.70702774, -1.55377326, -0.29624153, -1.59550429,\n       -0.03921186, -0.1743241 , -1.58884172, -1.07910672, -1.70353625,\n       -0.17376537, -1.62168909, -0.34320152, -1.59550429, -0.18720981]), 'split9_train_neg_mean_absolute_error': array([-0.044031  , -0.10311771, -1.71023691, -1.08366968, -1.69126839,\n       -1.55210734, -1.70725087, -1.55494759, -0.29198935, -1.59154732,\n       -0.04634698, -0.1899883 , -1.59186198, -1.08374194, -1.70280243,\n       -0.19536257, -1.62165541, -0.34299538, -1.59154732, -0.203059  ]), 'mean_train_neg_mean_absolute_error': array([-0.04521233, -0.0994793 , -1.71037431, -1.09150184, -1.68909275,\n       -1.557718  , -1.70702583, -1.56209379, -0.27426665, -1.59372513,\n       -0.03660062, -0.17125938, -1.59434011, -1.0955391 , -1.70282554,\n       -0.19236384, -1.62600252, -0.35138581, -1.59372565, -0.20549734]), 'std_train_neg_mean_absolute_error': array([0.0052441 , 0.01244329, 0.00290166, 0.01774903, 0.00305526,\n       0.00688017, 0.00300787, 0.00698897, 0.0166308 , 0.0053548 ,\n       0.00587927, 0.01334048, 0.00552865, 0.01934502, 0.00308142,\n       0.01374028, 0.00437365, 0.01898573, 0.00535614, 0.01881169])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor(criterion = 'mse')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[3, 4, 5, 6]", "estimator__n_estimators": "[50, 100, 150, 200]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-3, 1e-4]", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10}}}, {"experiment_name": "Experiment_6_24_11_21", "dataset_variant": "only_totals", "estimator": "GradientBoostingRegressor(criterion = 'mse')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_outer_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.4682623558041594, "r2": 0.43635678535392824, "neg_mean_absolute_error": -1.154894207896858}, "mean_train_score": {"neg_root_mean_squared_error": -0.8427818722942328, "r2": 0.8184571869606115, "neg_mean_absolute_error": -0.6620392357771964}, "best_params": "[{'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.1}]", "cv_results": "{'mean_fit_time': array([0.05660002, 0.23350098, 0.23539982, 0.0714004 , 0.15939906,\n       0.25190074, 0.06279919, 0.15020018, 0.11650002, 0.15320435,\n       0.12370238, 0.25920701, 0.53266652, 0.2739074 , 0.29130814,\n       0.08510408, 0.20479767, 0.15539684, 0.23640292, 0.42860541]), 'std_fit_time': array([0.00387905, 0.02171287, 0.00710373, 0.00287078, 0.00778766,\n       0.02453753, 0.00594409, 0.04559188, 0.02494403, 0.01535112,\n       0.02026683, 0.03172851, 0.04685036, 0.05955123, 0.07158067,\n       0.01189165, 0.03966285, 0.00895067, 0.02521987, 0.02897897]), 'mean_score_time': array([0.00260012, 0.00279958, 0.00290031, 0.00300007, 0.00300086,\n       0.0032017 , 0.00370066, 0.00359979, 0.00329373, 0.00439684,\n       0.00459416, 0.0036978 , 0.00559702, 0.00430293, 0.00320442,\n       0.00339572, 0.00470552, 0.00420761, 0.00409818, 0.0055058 ]), 'std_score_time': array([0.00048958, 0.00059969, 0.00053893, 0.00109545, 0.00044708,\n       0.00098408, 0.00300009, 0.00111443, 0.00125464, 0.00144737,\n       0.00149766, 0.0014868 , 0.00211027, 0.0017966 , 0.0008767 ,\n       0.00162395, 0.00180037, 0.00194982, 0.00176314, 0.00220246]), 'param_feature_extraction__n_components': masked_array(data=[1, 2, 3, 2, 2, 1, 1, 2, 2, 2, 2, 1, 3, 2, 3, 1, 2, 1,\n                   2, 2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_feature_extraction': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__tol': masked_array(data=[0.1, 0.0001, 0.001, 0.01, 0.0001, 0.01, 0.01, 0.01,\n                   0.1, 0.0001, 0.0001, 0.001, 0.1, 0.1, 0.1, 0.1, 0.1,\n                   0.1, 0.01, 0.0001],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__n_estimators': masked_array(data=[50, 150, 200, 50, 100, 200, 50, 100, 50, 100, 50, 150,\n                   200, 150, 150, 50, 100, 100, 100, 200],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__max_depth': masked_array(data=[4, 5, 3, 4, 6, 4, 4, 3, 5, 3, 6, 5, 6, 4, 3, 4, 3, 4,\n                   5, 6],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__learning_rate': masked_array(data=[0.0001, 0.0001, 0.01, 0.1, 0.001, 0.0001, 0.01, 0.001,\n                   0.01, 0.001, 0.0001, 0.1, 0.01, 0.01, 0.1, 0.001,\n                   0.001, 0.001, 0.1, 0.001],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__n_estimators': 200, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 100, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 200, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 100, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 50, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 200, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 150, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 150, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 100, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 100, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 200, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}], 'split0_test_neg_root_mean_squared_error': array([-2.02423829, -2.0117306 , -1.38592291, -1.41455003, -1.94915535,\n       -2.006772  , -1.77676217, -1.96275554, -1.72965926, -1.96275554,\n       -2.02301291, -1.91900135, -1.48919253, -1.45522882, -1.54564684,\n       -1.97718278, -1.93834198, -1.95860155, -1.61739094, -1.82343093]), 'split1_test_neg_root_mean_squared_error': array([-1.99269076, -1.97707369, -1.40731215, -1.44053353, -1.90583879,\n       -1.97462737, -1.79253829, -1.91799915, -1.66772315, -1.91799915,\n       -1.9903702 , -1.61962701, -1.34814685, -1.41664367, -1.39490232,\n       -1.94497697, -1.90814091, -1.94764406, -1.49334144, -1.80120984]), 'split2_test_neg_root_mean_squared_error': array([-1.96903985, -1.95631292, -1.51717836, -1.51637884, -1.87349905,\n       -1.95220895, -1.77408538, -1.90771178, -1.61542554, -1.90771178,\n       -1.96648034, -1.63254586, -1.54981132, -1.52069492, -1.60806192,\n       -1.92598102, -1.89558139, -1.91902015, -1.49178643, -1.78759395]), 'split3_test_neg_root_mean_squared_error': array([-2.00624699, -1.99795701, -1.81701491, -1.74440164, -1.95910616,\n       -1.99510952, -1.92114312, -1.97988411, -1.86400368, -1.97988411,\n       -2.004586  , -1.95589841, -1.9501822 , -1.75423959, -2.00096724,\n       -1.97726843, -1.93981125, -1.98010951, -1.93251216, -1.87724863]), 'split4_test_neg_root_mean_squared_error': array([-1.95679844, -1.94467783, -1.34731669, -1.08594701, -1.87411745,\n       -1.94381047, -1.69111542, -1.89029838, -1.63816478, -1.89029838,\n       -1.95570438, -1.39440836, -1.46095191, -1.2639327 , -1.36864562,\n       -1.91846947, -1.87858136, -1.88754391, -1.40098672, -1.78061193]), 'split5_test_neg_root_mean_squared_error': array([-1.9583173 , -1.94849932, -1.45742416, -1.49344212, -1.88120681,\n       -1.94185124, -1.75819392, -1.89420953, -1.69334532, -1.89420953,\n       -1.95676863, -1.69708448, -1.64339888, -1.475759  , -1.66207934,\n       -1.91438385, -1.87511819, -1.90990947, -1.64181097, -1.80789425]), 'split6_test_neg_root_mean_squared_error': array([-1.95814845, -1.94524185, -1.44311162, -1.23860671, -1.88141866,\n       -1.94124169, -1.72151891, -1.9022988 , -1.70046563, -1.9022988 ,\n       -1.95604731, -1.22299605, -1.45630158, -1.38064147, -1.36315786,\n       -1.91278738, -1.87792583, -1.90341201, -1.26015768, -1.78149515]), 'split7_test_neg_root_mean_squared_error': array([-1.96697849, -1.96194315, -1.88446307, -1.92413449, -1.93897136,\n       -1.95702087, -1.88963529, -1.93012831, -1.85854892, -1.93012831,\n       -1.96645152, -2.12892858, -1.86250362, -1.82927688, -1.89710533,\n       -1.9411254 , -1.91005994, -1.94794072, -2.06027712, -1.93308429]), 'split8_test_neg_root_mean_squared_error': array([-1.96527575, -1.95188688, -1.58089105, -1.51432403, -1.88233169,\n       -1.95097914, -1.82527645, -1.91630563, -1.73356015, -1.91630563,\n       -1.96295194, -1.82619709, -1.76288688, -1.50165701, -1.72471771,\n       -1.92502675, -1.89170143, -1.92548108, -1.70868729, -1.78918127]), 'split9_test_neg_root_mean_squared_error': array([-1.96540886, -1.95406626, -1.45086976, -1.31030516, -1.88453661,\n       -1.95328067, -1.81436977, -1.91577322, -1.65650176, -1.91577322,\n       -1.9630088 , -1.59354097, -1.49065392, -1.45393378, -1.29532216,\n       -1.93275906, -1.9040004 , -1.93030439, -1.44748321, -1.80062929]), 'mean_test_neg_root_mean_squared_error': array([-1.97631432, -1.96493895, -1.52915047, -1.46826236, -1.90301819,\n       -1.96169019, -1.79646387, -1.92173644, -1.71573982, -1.92173644,\n       -1.9745382 , -1.69902282, -1.60140297, -1.50520078, -1.58606063,\n       -1.93699611, -1.90192627, -1.93099669, -1.60544339, -1.81823795]), 'std_test_neg_root_mean_squared_error': array([0.02208274, 0.02206266, 0.17292509, 0.22730031, 0.03161249,\n       0.02178335, 0.06667879, 0.02744769, 0.08094339, 0.02744769,\n       0.02216573, 0.25624449, 0.18710933, 0.15964281, 0.22672529,\n       0.02245159, 0.02203393, 0.02646961, 0.23182607, 0.04685618]), 'rank_test_neg_root_mean_squared_error': array([20, 18,  3,  1, 12, 17,  9, 13,  8, 13, 19,  7,  5,  2,  4, 16, 11,\n       15,  6, 10]), 'split0_train_neg_root_mean_squared_error': array([-1.96947236, -1.95485191, -1.30247629, -0.82517552, -1.8367221 ,\n       -1.95363906, -1.68393943, -1.90614596, -1.51939703, -1.90614596,\n       -1.96592232, -0.26752574, -0.74040152, -1.22210745, -0.73720082,\n       -1.92302617, -1.89080537, -1.90227567, -0.33764797, -1.71422856]), 'split1_train_neg_root_mean_squared_error': array([-1.97347479, -1.95878287, -1.30549351, -0.84856585, -1.84885713,\n       -1.95707272, -1.69003155, -1.90612795, -1.55070077, -1.90612795,\n       -1.9703524 , -0.27424931, -0.80302328, -1.23319013, -0.73876948,\n       -1.92747059, -1.89709119, -1.90839318, -0.34583753, -1.71593315]), 'split2_train_neg_root_mean_squared_error': array([-1.97566551, -1.96045612, -1.29951399, -0.85835499, -1.84486873,\n       -1.95833445, -1.67609551, -1.90542923, -1.52653594, -1.90542923,\n       -1.97261167, -0.27730961, -0.75077172, -1.21438494, -0.72445797,\n       -1.92730762, -1.89394454, -1.90284035, -0.32476081, -1.71307519]), 'split3_train_neg_root_mean_squared_error': array([-1.97136458, -1.95639168, -1.24225153, -0.82364603, -1.84179689,\n       -1.95371081, -1.65217431, -1.89853401, -1.50730917, -1.89853401,\n       -1.9687288 , -0.26119407, -0.71938069, -1.17518608, -0.71003791,\n       -1.92169623, -1.88423809, -1.89384376, -0.33297541, -1.70866689]), 'split4_train_neg_root_mean_squared_error': array([-1.97678703, -1.96145489, -1.31533203, -0.84959493, -1.85144911,\n       -1.95987587, -1.67725085, -1.90846019, -1.52645351, -1.90846019,\n       -1.97395133, -0.2642337 , -0.73797243, -1.23437362, -0.75104902,\n       -1.92944332, -1.89630596, -1.90345038, -0.35738993, -1.722347  ]), 'split5_train_neg_root_mean_squared_error': array([-1.97697711, -1.96111825, -1.29868415, -0.84495067, -1.84447821,\n       -1.95943761, -1.68118142, -1.9101748 , -1.5133143 , -1.9101748 ,\n       -1.97374763, -0.26975355, -0.69318451, -1.21067191, -0.70976319,\n       -1.92832693, -1.89510801, -1.9070633 , -0.32682629, -1.71184212]), 'split6_train_neg_root_mean_squared_error': array([-1.97706403, -1.9613858 , -1.32632506, -0.87479535, -1.8547399 ,\n       -1.95999785, -1.68182531, -1.90371615, -1.53155285, -1.90371615,\n       -1.97416955, -0.26982829, -0.73963297, -1.24181038, -0.78432272,\n       -1.92970576, -1.89672672, -1.90918224, -0.33355451, -1.716709  ]), 'split7_train_neg_root_mean_squared_error': array([-1.97595696, -1.96025265, -1.2448602 , -0.77775146, -1.84619542,\n       -1.95801556, -1.65716945, -1.90101869, -1.50970189, -1.90101869,\n       -1.97320041, -0.22323733, -0.68653047, -1.16675659, -0.66925289,\n       -1.92585655, -1.88970702, -1.89867548, -0.3019657 , -1.70296661]), 'split8_train_neg_root_mean_squared_error': array([-1.97593702, -1.96105566, -1.30928482, -0.8548397 , -1.84854678,\n       -1.95905047, -1.67299346, -1.90320486, -1.51557768, -1.90320486,\n       -1.97326269, -0.29195411, -0.72074576, -1.23716039, -0.70731635,\n       -1.92865567, -1.89575999, -1.90107107, -0.34764983, -1.7184336 ]), 'split9_train_neg_root_mean_squared_error': array([-1.97611974, -1.96037037, -1.30665264, -0.87014421, -1.85168514,\n       -1.95867153, -1.67733294, -1.90538078, -1.54488244, -1.90538078,\n       -1.97340786, -0.30015148, -0.77617131, -1.23037972, -0.74668012,\n       -1.9274797 , -1.8935771 , -1.90520623, -0.33504345, -1.70662878]), 'mean_train_neg_root_mean_squared_error': array([-1.97488191, -1.95961202, -1.29508742, -0.84278187, -1.84693394,\n       -1.95778059, -1.67499942, -1.90481926, -1.52454256, -1.90481926,\n       -1.97193547, -0.26994372, -0.73678147, -1.21660212, -0.72788505,\n       -1.92689685, -1.8933264 , -1.90320017, -0.33436514, -1.71308309]), 'std_train_neg_root_mean_squared_error': array([0.00246599, 0.00215198, 0.0268901 , 0.02674167, 0.00501703,\n       0.00221443, 0.01115945, 0.00322289, 0.01380176, 0.00322289,\n       0.00259369, 0.01940697, 0.03338219, 0.02471673, 0.02966439,\n       0.00251916, 0.00382371, 0.00441923, 0.01432085, 0.00549613]), 'split0_test_r2': array([0.00327894, 0.01555827, 0.53277237, 0.51327126, 0.07584828,\n       0.02040529, 0.2320924 , 0.06290679, 0.27226799, 0.06290679,\n       0.0044853 , 0.10422089, 0.46054892, 0.48487462, 0.41887319,\n       0.04907995, 0.08607371, 0.06686913, 0.36367296, 0.19122261]), 'split1_test_r2': array([-2.75407294e-04,  1.53418263e-02,  5.01091792e-01,  4.77259051e-01,\n        8.50189490e-02,  1.77770437e-02,  1.90574917e-01,  7.33054721e-02,\n        2.99371672e-01,  7.33054721e-02,  2.05295005e-03,  3.39200361e-01,\n        5.42159529e-01,  4.94453593e-01,  5.09851850e-01,  4.70530928e-02,\n        8.28071483e-02,  4.44378047e-02,  4.38230691e-01,  1.82724653e-01]), 'split2_test_r2': array([0.00134841, 0.0142163 , 0.40710435, 0.40772907, 0.09590943,\n       0.01834793, 0.18931148, 0.062588  , 0.32783039, 0.062588  ,\n       0.00394298, 0.31350755, 0.38132489, 0.4043527 , 0.33394434,\n       0.04454774, 0.07447137, 0.05144164, 0.42678402, 0.17691869]), 'split3_test_r2': array([0.00087369, 0.00911358, 0.18046297, 0.24465638, 0.04727506,\n       0.011936  , 0.08384061, 0.02695901, 0.13752776, 0.02695901,\n       0.00252738, 0.05039239, 0.05593484, 0.23611248, 0.00612548,\n       0.02952833, 0.0659491 , 0.02673745, 0.07296514, 0.12522737]), 'split4_test_r2': array([0.00418593, 0.01648407, 0.5279093 , 0.69330737, 0.08656073,\n       0.01736121, 0.25624043, 0.07071957, 0.30208708, 0.07071957,\n       0.00529916, 0.49433136, 0.44491702, 0.58453545, 0.51284396,\n       0.04281507, 0.08220416, 0.07342582, 0.48954895, 0.17543552]), 'split5_test_r2': array([0.00263944, 0.01261486, 0.44759449, 0.41995343, 0.07963699,\n       0.01934108, 0.19606744, 0.06687011, 0.25427769, 0.06687011,\n       0.00421628, 0.25098072, 0.29762016, 0.43360821, 0.28156154,\n       0.04688762, 0.08558496, 0.05133772, 0.29897682, 0.14997419]), 'split6_test_r2': array([0.00281142, 0.01591349, 0.45839094, 0.60101835, 0.07942969,\n       0.01995664, 0.22925686, 0.05888318, 0.24799317, 0.05888318,\n       0.00495029, 0.61101203, 0.44844515, 0.50426692, 0.51674275,\n       0.04847662, 0.08284457, 0.05778139, 0.58701351, 0.17461731]), 'split7_test_r2': array([-1.27247810e-04,  4.98671682e-03,  8.20240561e-02,  4.29670515e-02,\n        2.81509193e-02,  9.97319516e-03,  7.69780643e-02,  3.69953116e-02,\n        1.07097517e-01,  3.69953116e-02,  4.08565082e-04, -1.71596927e-01,\n        1.03293557e-01,  1.35002346e-01,  6.96659270e-02,  2.59904315e-02,\n        5.69167534e-02,  1.91388958e-02, -9.72543671e-02,  3.40433845e-02]), 'split8_test_r2': array([0.00160355, 0.01516079, 0.35395924, 0.40721983, 0.08409939,\n       0.01607659, 0.13878152, 0.05073911, 0.2231559 , 0.05073911,\n       0.00396323, 0.13791253, 0.19664975, 0.41709533, 0.23106066,\n       0.04207926, 0.07495848, 0.04162704, 0.24528807, 0.17250624]), 'split9_test_r2': array([0.0014683 , 0.01296032, 0.45585719, 0.55618606, 0.0819524 ,\n       0.0137538 , 0.14904294, 0.0512665 , 0.29068386, 0.0512665 ,\n       0.00390552, 0.34357894, 0.42560627, 0.45355647, 0.56627783,\n       0.03436838, 0.062891  , 0.0368196 , 0.45839445, 0.16188298]), 'mean_test_r2': array([0.0017807 , 0.01323502, 0.39471667, 0.43635679, 0.07438818,\n       0.01649288, 0.17421867, 0.0561233 , 0.2462293 , 0.0561233 ,\n       0.00357516, 0.24735398, 0.33565001, 0.41478581, 0.34469475,\n       0.04108265, 0.07547013, 0.04696165, 0.32836202, 0.15445529]), 'std_test_r2': array([0.00137244, 0.00343102, 0.14289853, 0.17564937, 0.01950379,\n       0.00334975, 0.05795892, 0.01410039, 0.06857923, 0.01410039,\n       0.00141209, 0.2149669 , 0.15687055, 0.12659217, 0.18628932,\n       0.00781237, 0.00981162, 0.01604294, 0.19670709, 0.04388241]), 'rank_test_r2': array([20, 18,  3,  1, 12, 17,  9, 13,  8, 14, 19,  7,  5,  2,  4, 16, 11,\n       15,  6, 10]), 'split0_train_r2': array([0.00389362, 0.01862799, 0.5643421 , 0.82513672, 0.13365108,\n       0.01984536, 0.27178626, 0.06692137, 0.407145  , 0.06692137,\n       0.00748142, 0.98162036, 0.85922014, 0.61644758, 0.86043467,\n       0.0503221 , 0.08187969, 0.07070661, 0.97072248, 0.24535379]), 'split1_train_r2': array([0.00373356, 0.01851214, 0.56402481, 0.81580262, 0.1255821 ,\n       0.0202252 , 0.26936249, 0.07057054, 0.38486797, 0.07057054,\n       0.00688361, 0.98076007, 0.83504381, 0.61097957, 0.8603856 ,\n       0.04964064, 0.07936231, 0.06836017, 0.96940457, 0.24679522]), 'split2_train_r2': array([0.0041369 , 0.01941091, 0.56914144, 0.81202215, 0.13163213,\n       0.02153221, 0.28324566, 0.07368552, 0.40545207, 0.07368552,\n       0.00721318, 0.98037984, 0.85619016, 0.62374217, 0.86609426,\n       0.05229126, 0.08481831, 0.07620095, 0.97309085, 0.25126927]), 'split3_train_r2': array([0.00445253, 0.01951786, 0.60468148, 0.8262162 , 0.13101647,\n       0.02220315, 0.3007382 , 0.07665322, 0.4179869 , 0.07665322,\n       0.00711291, 0.98252349, 0.86742989, 0.64621342, 0.87085097,\n       0.05398603, 0.09050643, 0.08120977, 0.97159777, 0.25210112]), 'split4_train_r2': array([0.00418127, 0.01956869, 0.55910892, 0.81605654, 0.12645742,\n       0.0211466 , 0.28310333, 0.0718317 , 0.4062171 , 0.0718317 ,\n       0.00703623, 0.9822075 , 0.86121556, 0.61171216, 0.85625356,\n       0.05130946, 0.08361633, 0.07669828, 0.96745044, 0.24403476]), 'split5_train_r2': array([0.00398976, 0.0199052 , 0.57019882, 0.81806208, 0.13302299,\n       0.02158433, 0.27973935, 0.07016317, 0.41639528, 0.07016317,\n       0.00724115, 0.98145636, 0.87755016, 0.62648035, 0.87162293,\n       0.05240697, 0.08477377, 0.07318994, 0.9727796 , 0.25322815]), 'split6_train_r2': array([0.00390217, 0.01963776, 0.55170853, 0.80498256, 0.12334937,\n       0.02102475, 0.27918753, 0.07644044, 0.40224324, 0.07644044,\n       0.00681667, 0.98144609, 0.86059028, 0.60701942, 0.84323464,\n       0.05105136, 0.08320962, 0.07112923, 0.97164732, 0.24897587]), 'split7_train_r2': array([0.00429589, 0.02006011, 0.60480039, 0.84573869, 0.13077807,\n       0.02229549, 0.29965961, 0.07838802, 0.418757  , 0.07838802,\n       0.00707206, 0.98729107, 0.87980263, 0.65283506, 0.8857764 ,\n       0.05414795, 0.08932316, 0.08065859, 0.97674638, 0.26041583]), 'split8_train_r2': array([0.00431599, 0.01925709, 0.56283679, 0.81364343, 0.12856253,\n       0.02126168, 0.2862209 , 0.07626709, 0.41422378, 0.07626709,\n       0.00700937, 0.97826275, 0.86752329, 0.60967412, 0.87241408,\n       0.05139647, 0.08347978, 0.07833722, 0.9691781 , 0.24692046]), 'split9_train_r2': array([0.00413183, 0.0199424 , 0.56459276, 0.80691088, 0.12560106,\n       0.02164029, 0.28251324, 0.07415369, 0.39135198, 0.07415369,\n       0.00686326, 0.97702496, 0.84636488, 0.61394101, 0.85781803,\n       0.05255291, 0.08558925, 0.07432331, 0.97137288, 0.25723151]), 'mean_train_r2': array([0.00410335, 0.01944402, 0.57154361, 0.81845719, 0.12896532,\n       0.02127591, 0.28355566, 0.07350748, 0.40646403, 0.07350748,\n       0.00707299, 0.98129725, 0.86109308, 0.62190449, 0.86448851,\n       0.05191051, 0.08465587, 0.07508141, 0.97139904, 0.2506326 ]), 'std_train_r2': array([0.00021126, 0.00049694, 0.01729821, 0.0111424 , 0.00337315,\n       0.00073644, 0.00967821, 0.00341141, 0.01075576, 0.00341141,\n       0.00019165, 0.00258845, 0.01275023, 0.0150317 , 0.0109875 ,\n       0.00138409, 0.00311783, 0.0040892 , 0.0024171 , 0.00501202]), 'split0_test_neg_mean_absolute_error': array([-1.77433092, -1.76511359, -1.1349374 , -1.1430099 , -1.72877597,\n       -1.76203917, -1.54981501, -1.71921967, -1.52774029, -1.71921967,\n       -1.77403527, -1.47576133, -1.23485419, -1.20877709, -1.25059413,\n       -1.73783739, -1.70654655, -1.713239  , -1.26146537, -1.60531874]), 'split1_test_neg_mean_absolute_error': array([-1.74224753, -1.72787367, -1.1231418 , -1.13660357, -1.65716717,\n       -1.72398371, -1.54077522, -1.67468632, -1.42058633, -1.67468632,\n       -1.73975919, -1.25590016, -1.02365514, -1.14410735, -1.07895041,\n       -1.69505668, -1.66269837, -1.70423152, -1.16391297, -1.56314364]), 'split2_test_neg_mean_absolute_error': array([-1.71252604, -1.70226296, -1.23001038, -1.16790016, -1.63017933,\n       -1.69716889, -1.53065718, -1.6537233 , -1.360056  , -1.6537233 ,\n       -1.71026543, -1.19143599, -1.19371244, -1.22965606, -1.22321009,\n       -1.67389781, -1.64724513, -1.67556533, -1.09545681, -1.5616628 ]), 'split3_test_neg_mean_absolute_error': array([-1.74217794, -1.73393249, -1.47023512, -1.38920437, -1.68570515,\n       -1.72970973, -1.59308042, -1.71026211, -1.51527503, -1.71026211,\n       -1.740419  , -1.55969263, -1.54306293, -1.4002753 , -1.54991417,\n       -1.71010205, -1.67684268, -1.70888573, -1.48930813, -1.59594639]), 'split4_test_neg_mean_absolute_error': array([-1.6796914 , -1.66923578, -1.09814303, -0.89662503, -1.61121736,\n       -1.66654683, -1.43924939, -1.62373223, -1.41187191, -1.62373223,\n       -1.6791035 , -1.0829498 , -1.17407867, -1.04965529, -1.09479294,\n       -1.6416781 , -1.60289473, -1.61823018, -1.13785503, -1.50795172]), 'split5_test_neg_mean_absolute_error': array([-1.68228154, -1.67602597, -1.14744567, -1.04031363, -1.63284982,\n       -1.66928407, -1.54010658, -1.6385275 , -1.45642029, -1.6385275 ,\n       -1.68154525, -1.27479537, -1.25869821, -1.1386689 , -1.22364976,\n       -1.64976935, -1.62457549, -1.65062609, -1.10842698, -1.5687909 ]), 'split6_test_neg_mean_absolute_error': array([-1.68273748, -1.67365872, -1.23225742, -1.01616638, -1.62694821,\n       -1.66916329, -1.52055992, -1.64412777, -1.48718428, -1.64412777,\n       -1.68023894, -0.94558909, -1.17887142, -1.20668034, -1.07105353,\n       -1.64996544, -1.62762643, -1.65353839, -0.9921628 , -1.55873063]), 'split7_test_neg_mean_absolute_error': array([-1.70879885, -1.70369374, -1.53206117, -1.52491536, -1.69887235,\n       -1.69958679, -1.6573734 , -1.68489613, -1.62792885, -1.68489613,\n       -1.70924369, -1.70613892, -1.51334191, -1.47829321, -1.48311176,\n       -1.6856918 , -1.66844266, -1.69704592, -1.66789622, -1.67964587]), 'split8_test_neg_mean_absolute_error': array([-1.70820026, -1.69666239, -1.31035998, -1.19488305, -1.64611647,\n       -1.69670952, -1.59986193, -1.67450354, -1.49253894, -1.67450354,\n       -1.70614495, -1.47743073, -1.34015363, -1.27780519, -1.37141874,\n       -1.67540697, -1.65489919, -1.68379216, -1.32994632, -1.55696011]), 'split9_test_neg_mean_absolute_error': array([-1.70760751, -1.69791639, -1.22402047, -1.03932064, -1.63422313,\n       -1.69798081, -1.57346165, -1.66548326, -1.4444479 , -1.66548326,\n       -1.70539169, -1.20800379, -1.17982602, -1.23096473, -1.02455223,\n       -1.68118834, -1.66069639, -1.67920169, -1.1203609 , -1.56896256]), 'mean_test_neg_mean_absolute_error': array([-1.71405995, -1.70463757, -1.25026124, -1.15489421, -1.6552055 ,\n       -1.70121728, -1.55449407, -1.66891618, -1.47440498, -1.66891618,\n       -1.71261469, -1.31776978, -1.26402546, -1.23648835, -1.23712478,\n       -1.68005939, -1.65324676, -1.6784356 , -1.23667915, -1.57671134]), 'std_test_neg_mean_absolute_error': array([0.02914775, 0.02863977, 0.14000154, 0.17507007, 0.03554697,\n       0.02885914, 0.05468933, 0.02895157, 0.07048414, 0.02895157,\n       0.02920582, 0.22071532, 0.1522657 , 0.11905711, 0.17175055,\n       0.02802613, 0.02797481, 0.02864561, 0.19592201, 0.04214085]), 'rank_test_neg_mean_absolute_error': array([20, 18,  5,  1, 12, 17,  9, 13,  8, 13, 19,  7,  6,  2,  4, 16, 11,\n       15,  3, 10]), 'split0_train_neg_mean_absolute_error': array([-1.70614059, -1.69329838, -1.06801983, -0.65314982, -1.5941874 ,\n       -1.69283737, -1.46096633, -1.65398968, -1.3163802 , -1.65398968,\n       -1.70292706, -0.21164702, -0.60083137, -1.00628351, -0.56615468,\n       -1.66628114, -1.64113252, -1.65135554, -0.26140349, -1.48571462]), 'split1_train_neg_mean_absolute_error': array([-1.71123522, -1.6985192 , -1.06609694, -0.67529585, -1.60298599,\n       -1.69707051, -1.45946448, -1.65204404, -1.34264668, -1.65204404,\n       -1.70834174, -0.21449315, -0.63793469, -1.01944358, -0.55315264,\n       -1.67162808, -1.64745906, -1.65784254, -0.26681471, -1.48861827]), 'split2_train_neg_mean_absolute_error': array([-1.71364311, -1.70001334, -1.06053856, -0.67941819, -1.60059769,\n       -1.69818908, -1.45360963, -1.65484013, -1.32640628, -1.65484013,\n       -1.71091521, -0.21949497, -0.59043846, -1.00587406, -0.54397358,\n       -1.67075479, -1.64616507, -1.65310855, -0.24629387, -1.48556729]), 'split3_train_neg_mean_absolute_error': array([-1.70977627, -1.69732845, -1.00590208, -0.63782301, -1.59829999,\n       -1.6942794 , -1.42629576, -1.65134434, -1.30456119, -1.65134434,\n       -1.70760921, -0.20314684, -0.57946248, -0.97299031, -0.54208434,\n       -1.66627351, -1.63725118, -1.64332437, -0.25431862, -1.48834097]), 'split4_train_neg_mean_absolute_error': array([-1.71591429, -1.70251511, -1.07854986, -0.66556027, -1.60830795,\n       -1.70110877, -1.44804939, -1.65673604, -1.31885944, -1.65673604,\n       -1.71355125, -0.20305416, -0.60701769, -1.02269212, -0.56824911,\n       -1.67498559, -1.65037621, -1.65271844, -0.27479712, -1.49891029]), 'split5_train_neg_mean_absolute_error': array([-1.71613676, -1.70243559, -1.06359097, -0.66222708, -1.60201756,\n       -1.70067424, -1.45954379, -1.6593547 , -1.31087028, -1.6593547 ,\n       -1.7132728 , -0.21162966, -0.57454939, -0.99570915, -0.53111563,\n       -1.67425769, -1.64773607, -1.65672214, -0.255296  , -1.49188141]), 'split6_train_neg_mean_absolute_error': array([-1.71625509, -1.70268238, -1.07111997, -0.68764399, -1.61119221,\n       -1.7017097 , -1.46042474, -1.65439484, -1.3270314 , -1.65439484,\n       -1.71370006, -0.20675504, -0.59888452, -1.02251078, -0.59667126,\n       -1.67584312, -1.6471482 , -1.65929017, -0.25687487, -1.49162925]), 'split7_train_neg_mean_absolute_error': array([-1.71278572, -1.69908078, -1.02535807, -0.60961676, -1.60104498,\n       -1.69653798, -1.44017625, -1.64665249, -1.29915076, -1.64665249,\n       -1.71022767, -0.17649475, -0.55982351, -0.96590055, -0.50626824,\n       -1.66865025, -1.64042127, -1.65005335, -0.23148869, -1.48269144]), 'split8_train_neg_mean_absolute_error': array([-1.71272345, -1.70014611, -1.04954641, -0.66919776, -1.60703353,\n       -1.69787113, -1.44776058, -1.65161562, -1.32009438, -1.65161562,\n       -1.71055739, -0.22868326, -0.57494014, -1.012448  , -0.53672281,\n       -1.67177612, -1.64471426, -1.64977249, -0.25836766, -1.49543703]), 'split9_train_neg_mean_absolute_error': array([-1.71292631, -1.69899873, -1.06591244, -0.68045963, -1.60612821,\n       -1.69753233, -1.45459267, -1.6531633 , -1.32435339, -1.6531633 ,\n       -1.71042443, -0.23631113, -0.61864271, -1.01297388, -0.57378019,\n       -1.67105771, -1.64356955, -1.65414236, -0.25658188, -1.48450627]), 'mean_train_neg_mean_absolute_error': array([-1.71275368, -1.69950181, -1.05546351, -0.66203924, -1.60317955,\n       -1.69778105, -1.45108836, -1.65341352, -1.3190354 , -1.65341352,\n       -1.71015268, -0.211171  , -0.5942525 , -1.00368259, -0.55181725,\n       -1.6711508 , -1.64459734, -1.652833  , -0.25622369, -1.48932968]), 'std_train_neg_mean_absolute_error': array([0.00299033, 0.00270336, 0.02155809, 0.02224842, 0.00480968,\n       0.00271784, 0.01048375, 0.00323775, 0.01176356, 0.00323775,\n       0.0031089 , 0.01540026, 0.02215972, 0.01889993, 0.02420531,\n       0.00317671, 0.00380633, 0.00439784, 0.01097284, 0.00486751])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor(criterion = 'mse')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[3, 4, 5, 6]", "estimator__n_estimators": "[50, 100, 150, 200]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-3, 1e-4]", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10}}}, {"experiment_name": "Experiment_6_24_11_21", "dataset_variant": "only_binary", "estimator": "GradientBoostingRegressor(criterion = 'mse')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_outer_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5800292023166513, "r2": 0.3568859111556296, "neg_mean_absolute_error": -1.2859418180399405}, "mean_train_score": {"neg_root_mean_squared_error": -1.0611091353074502, "r2": 0.712288307697525, "neg_mean_absolute_error": -0.8739804979151267}, "best_params": "[{'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.1, 'estimator__n_estimators': 200, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}]", "cv_results": "{'mean_fit_time': array([0.46302605, 0.13944092, 0.41986382, 1.09544601, 0.34926934,\n       0.87229252, 0.10519967, 0.98080304, 0.26340342, 0.88449979,\n       0.13409879, 0.70199504, 0.28149772, 0.42110801, 0.20100574,\n       0.07900021, 0.66300981, 0.65016706, 0.11550097, 0.19618976]), 'std_fit_time': array([0.0791232 , 0.02861347, 0.0454153 , 0.1430244 , 0.02790397,\n       0.05173625, 0.00472841, 0.10319427, 0.02153385, 0.05791764,\n       0.0094923 , 0.04577915, 0.02338922, 0.0273062 , 0.02164296,\n       0.00648216, 0.05864613, 0.0516624 , 0.01451168, 0.05198434]), 'mean_score_time': array([0.01550241, 0.00385158, 0.00379713, 0.00439892, 0.00389214,\n       0.00340195, 0.00230036, 0.0043973 , 0.00399971, 0.00350373,\n       0.0057025 , 0.00310054, 0.00290055, 0.0029928 , 0.00319574,\n       0.00330331, 0.00369134, 0.0049957 , 0.00330245, 0.00311182]), 'std_score_time': array([0.01584596, 0.00159486, 0.00125822, 0.00149509, 0.00157911,\n       0.00120229, 0.00046008, 0.00168687, 0.00128122, 0.00081242,\n       0.00319606, 0.00029981, 0.00083101, 0.00076881, 0.00086527,\n       0.0016859 , 0.00090219, 0.00228069, 0.00142212, 0.00151445]), 'param_feature_extraction__n_components': masked_array(data=[11, 5, 7, 19, 12, 17, 7, 17, 4, 11, 3, 18, 7, 11, 3, 2,\n                   11, 6, 2, 8],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_feature_extraction': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ,\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]),\n                             n_components=11)                                                          ,\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True,  True,  True,  True,  True,\n                           True,  True,  True,  True,  True]))                                         ],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__tol': masked_array(data=[0.01, 0.01, 0.0001, 0.1, 0.001, 0.01, 0.0001, 0.1,\n                   0.001, 0.0001, 0.01, 0.0001, 0.01, 0.1, 0.001, 0.1,\n                   0.1, 0.0001, 0.01, 0.01],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__n_estimators': masked_array(data=[150, 50, 150, 200, 100, 200, 50, 200, 150, 200, 50,\n                   150, 150, 150, 100, 50, 200, 200, 50, 50],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__max_depth': masked_array(data=[3, 4, 4, 5, 4, 5, 4, 5, 3, 6, 6, 5, 3, 4, 4, 3, 4, 6,\n                   5, 5],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_estimator__learning_rate': masked_array(data=[0.01, 0.01, 0.001, 0.01, 0.0001, 0.0001, 0.001, 0.0001,\n                   0.0001, 0.001, 0.0001, 0.01, 0.01, 0.1, 0.01, 0.001,\n                   0.01, 0.01, 0.0001, 0.001],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 150, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.0001, 'estimator__n_estimators': 150, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 19, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.001, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 50, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.1, 'estimator__n_estimators': 200, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.001, 'estimator__n_estimators': 150, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.0001, 'estimator__n_estimators': 200, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.0001, 'estimator__n_estimators': 150, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__n_estimators': 150, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 150, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.1}, {'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.001, 'estimator__n_estimators': 100, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__n_estimators': 50, 'estimator__max_depth': 3, 'estimator__learning_rate': 0.001}, {'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.1, 'estimator__n_estimators': 200, 'estimator__max_depth': 4, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__n_estimators': 200, 'estimator__max_depth': 6, 'estimator__learning_rate': 0.01}, {'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.0001}, {'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__n_estimators': 50, 'estimator__max_depth': 5, 'estimator__learning_rate': 0.001}], 'split0_test_neg_root_mean_squared_error': array([-1.51116108, -1.76481707, -1.92307429, -1.53531036, -2.01926955,\n       -2.0097273 , -1.98662349, -2.00968047, -2.01502456, -1.9131083 ,\n       -2.02464006, -1.63206105, -1.53922059, -1.57056422, -1.67557509,\n       -1.99051149, -1.54677918, -1.72471338, -2.02364429, -1.98873855]), 'split1_test_neg_root_mean_squared_error': array([-1.34957886, -1.59690768, -1.85808028, -1.19210898, -1.98528719,\n       -1.97447962, -1.93723996, -1.97449581, -1.98104784, -1.83207073,\n       -1.98960927, -1.37395353, -1.34089638, -1.39589186, -1.38921156,\n       -1.9425037 , -1.33305643, -1.27467777, -1.98971126, -1.93692925]), 'split2_test_neg_root_mean_squared_error': array([-1.75775204, -1.82858857, -1.92457781, -1.63315785, -1.96719539,\n       -1.95957818, -1.94697468, -1.9595759 , -1.96405567, -1.89734898,\n       -1.97011558, -1.66500959, -1.72849905, -1.7012169 , -1.76210447,\n       -1.95077084, -1.65963979, -1.77810646, -1.97033563, -1.94189139]), 'split3_test_neg_root_mean_squared_error': array([-1.86154245, -1.81073954, -1.91578464, -1.92428812, -2.00203341,\n       -1.9963604 , -1.98664501, -1.9963604 , -1.99847332, -1.91410449,\n       -2.00310533, -1.8032948 , -1.77307039, -2.05072373, -1.75327732,\n       -1.98685617, -1.85562246, -2.07798711, -2.00421046, -1.97921858]), 'split4_test_neg_root_mean_squared_error': array([-1.45057227, -1.74909307, -1.88705268, -1.43519536, -1.95467953,\n       -1.94795082, -1.90735635, -1.94808391, -1.94893877, -1.84141641,\n       -1.95528827, -1.6348549 , -1.51379399, -1.40826978, -1.5192922 ,\n       -1.92072963, -1.51555322, -1.23576538, -1.95586589, -1.90191647]), 'split5_test_neg_root_mean_squared_error': array([-1.48980159, -1.62591123, -1.82974362, -1.64190622, -1.95228804,\n       -1.94686133, -1.91547445, -1.94690444, -1.94721499, -1.79539305,\n       -1.95628171, -1.59914584, -1.45355742, -1.61408632, -1.50001426,\n       -1.92097019, -1.47776225, -1.62577837, -1.95637962, -1.91098089]), 'split6_test_neg_root_mean_squared_error': array([-1.58485537, -1.66326873, -1.84363791, -1.59245558, -1.95519598,\n       -1.94485567, -1.92839967, -1.94490872, -1.94809375, -1.7881934 ,\n       -1.95559987, -1.58431956, -1.55435578, -1.37134556, -1.5394159 ,\n       -1.93221098, -1.54211714, -1.67131125, -1.95644549, -1.93034575]), 'split7_test_neg_root_mean_squared_error': array([-1.79735454, -1.86180999, -1.93229355, -1.77461683, -1.96247163,\n       -1.95556874, -1.95156881, -1.9555592 , -1.96003792, -1.93348506,\n       -1.96664297, -1.77679481, -1.75760027, -1.82101288, -1.79612893,\n       -1.94838531, -1.78524304, -1.87988573, -1.9655462 , -1.95051039]), 'split8_test_neg_root_mean_squared_error': array([-1.57028894, -1.72626332, -1.8700211 , -1.56687074, -1.95932648,\n       -1.94837373, -1.93460011, -1.94827608, -1.95795002, -1.8107052 ,\n       -1.96378501, -1.53265344, -1.63650262, -1.51081087, -1.66443285,\n       -1.93316962, -1.54188601, -1.58821237, -1.96418061, -1.92715594]), 'split9_test_neg_root_mean_squared_error': array([-1.58788031, -1.726208  , -1.87936005, -1.59612486, -1.96071974,\n       -1.95573573, -1.93975151, -1.95573546, -1.95767934, -1.83058723,\n       -1.96377276, -1.57644834, -1.55828083, -1.55119804, -1.61137973,\n       -1.94226037, -1.54263249, -1.67137336, -1.9637752 , -1.93065115]), 'mean_test_neg_root_mean_squared_error': array([-1.59607875, -1.73536072, -1.88636259, -1.58920349, -1.97184669,\n       -1.96394915, -1.9434634 , -1.96395804, -1.96785162, -1.85564128,\n       -1.97488408, -1.61785359, -1.58557773, -1.59951201, -1.62108323,\n       -1.94683683, -1.5800292 , -1.65278112, -1.97500946, -1.93983384]), 'std_test_neg_root_mean_squared_error': array([0.15440843, 0.08242044, 0.0345413 , 0.18336675, 0.02164579,\n       0.02137501, 0.02500111, 0.02135525, 0.02188158, 0.05109161,\n       0.02219945, 0.11502197, 0.13194137, 0.2010835 , 0.12585671,\n       0.02306078, 0.14332123, 0.23993935, 0.02201642, 0.0258356 ]), 'rank_test_neg_root_mean_squared_error': array([ 4,  9, 11,  3, 18, 15, 13, 16, 17, 10, 19,  6,  2,  5,  7, 14,  1,\n        8, 20, 12]), 'split0_train_neg_root_mean_squared_error': array([-1.36248257, -1.58022221, -1.82367159, -0.83068605, -1.96215046,\n       -1.94742614, -1.92526253, -1.94742614, -1.96003025, -1.71138297,\n       -1.96648823, -0.98956713, -1.37316779, -0.33324494, -1.36506756,\n       -1.93666449, -1.07095835, -0.67107061, -1.96730687, -1.91285701]), 'split1_train_neg_root_mean_squared_error': array([-1.35548205, -1.594103  , -1.83292648, -0.82435419, -1.96589817,\n       -1.95051841, -1.92859233, -1.95051841, -1.96392717, -1.7105305 ,\n       -1.9705469 , -0.97956934, -1.38606651, -0.32099991, -1.38820567,\n       -1.93836396, -1.07923978, -0.70945858, -1.97135522, -1.91857803]), 'split2_train_neg_root_mean_squared_error': array([-1.34165939, -1.57614789, -1.83271586, -0.80203678, -1.96863985,\n       -1.95446115, -1.92777985, -1.95446115, -1.96555502, -1.72178245,\n       -1.97235897, -0.93258393, -1.33784336, -0.37934839, -1.34417245,\n       -1.93996667, -1.03972372, -0.68230606, -1.97357809, -1.91955682]), 'split3_train_neg_root_mean_squared_error': array([-1.31357015, -1.55122624, -1.81955334, -0.78617485, -1.96433641,\n       -1.94868707, -1.92169368, -1.94868707, -1.96185611, -1.690572  ,\n       -1.96878648, -0.89352276, -1.31836514, -0.33324167, -1.32621218,\n       -1.93373328, -1.00133144, -0.63150592, -1.96965124, -1.91053884]), 'split4_train_neg_root_mean_squared_error': array([-1.36104029, -1.58647537, -1.83243787, -0.83083987, -1.96968874,\n       -1.95529554, -1.92814655, -1.95529554, -1.96734566, -1.70611404,\n       -1.97368969, -0.99533483, -1.3760665 , -0.33328817, -1.38790325,\n       -1.93977569, -1.08291948, -0.66170211, -1.97468469, -1.91601526]), 'split5_train_neg_root_mean_squared_error': array([-1.35936837, -1.58140365, -1.8316227 , -0.7989274 , -1.96972442,\n       -1.95546091, -1.93190638, -1.95546091, -1.96737458, -1.72577818,\n       -1.97372469, -0.96541709, -1.35480555, -0.3884714 , -1.36493361,\n       -1.94100548, -1.0737012 , -0.68516451, -1.97461163, -1.91887222]), 'split6_train_neg_root_mean_squared_error': array([-1.3591586 , -1.58065855, -1.83377578, -0.8097089 , -1.96990353,\n       -1.95573578, -1.92885287, -1.95573578, -1.96731575, -1.72319342,\n       -1.9736818 , -1.00078755, -1.36146335, -0.36438663, -1.37677943,\n       -1.93977423, -1.10786727, -0.66116639, -1.97473528, -1.91911258]), 'split7_train_neg_root_mean_squared_error': array([-1.32459264, -1.54429202, -1.8179279 , -0.79166716, -1.96844061,\n       -1.95307889, -1.92756532, -1.95307889, -1.96593842, -1.70113858,\n       -1.97266701, -0.92972477, -1.31386732, -0.36540342, -1.33182245,\n       -1.93854346, -1.03162723, -0.67079081, -1.97359936, -1.9173231 ]), 'split8_train_neg_root_mean_squared_error': array([-1.34626318, -1.58158568, -1.8278033 , -0.8333083 , -1.96881447,\n       -1.95346298, -1.93047536, -1.95346298, -1.9663436 , -1.70780448,\n       -1.97326032, -0.9772482 , -1.3550442 , -0.3504259 , -1.36350294,\n       -1.93926779, -1.07097932, -0.69467567, -1.97420948, -1.91817074]), 'split9_train_neg_root_mean_squared_error': array([-1.33967128, -1.579472  , -1.83137796, -0.80979999, -1.96903457,\n       -1.9544472 , -1.92836229, -1.95444718, -1.96630175, -1.70988429,\n       -1.97305333, -0.9609328 , -1.35331589, -0.36052217, -1.35494022,\n       -1.94109598, -1.05274358, -0.65330683, -1.97404427, -1.91467771]), 'mean_train_neg_root_mean_squared_error': array([-1.34632885, -1.57555866, -1.82838128, -0.81175035, -1.96766312,\n       -1.95285741, -1.92786372, -1.95285741, -1.96519883, -1.71081809,\n       -1.97182574, -0.96246884, -1.35300056, -0.35293326, -1.36035398,\n       -1.9388191 , -1.06110914, -0.67211475, -1.97277761, -1.91657023]), 'std_train_neg_root_mean_squared_error': array([0.01583511, 0.01471953, 0.00560546, 0.01634248, 0.00250416,\n       0.00280863, 0.00264449, 0.00280863, 0.00237761, 0.0101649 ,\n       0.00233332, 0.03244005, 0.02252116, 0.02119514, 0.02031857,\n       0.00210002, 0.02883331, 0.02100396, 0.00239854, 0.00286177]), 'split0_test_r2': array([0.44451557, 0.24238292, 0.10041441, 0.42661975, 0.00816607,\n       0.01751794, 0.03997731, 0.01756372, 0.01233183, 0.10971413,\n       0.00288323, 0.35207734, 0.42369539, 0.39998547, 0.31706691,\n       0.03621593, 0.41802142, 0.27642387, 0.00386381, 0.03793204]), 'split1_test_r2': array([0.54118637, 0.35760908, 0.13030149, 0.64200934, 0.00714356,\n       0.01792403, 0.05461956, 0.01790792, 0.01137929, 0.15447929,\n       0.00281585, 0.52446349, 0.54707091, 0.50915618, 0.51384299,\n       0.04947513, 0.5523518 , 0.59070108, 0.00271361, 0.05492279]), 'split2_test_r2': array([2.04170184e-01, 1.38734627e-01, 4.59394627e-02, 3.12992766e-01,\n       3.21847338e-03, 1.09228336e-02, 2.36048950e-02, 1.09251378e-02,\n       6.39773697e-03, 7.27444929e-02, 2.56946652e-04, 2.85933819e-01,\n       2.30438602e-01, 2.54539967e-01, 2.00224143e-01, 1.97936830e-02,\n       2.90532243e-01, 1.85632362e-01, 3.35972709e-05, 2.86967168e-02]), 'split3_test_r2': array([ 0.13980387,  0.18611402,  0.08894421,  0.08083857,  0.00506608,\n        0.01069663,  0.02030219,  0.01069663,  0.00860139,  0.09054152,\n        0.00400039,  0.19279275,  0.21962464, -0.04391685,  0.2369503 ,\n        0.02009392,  0.14526628, -0.0718581 ,  0.00290108,  0.02761306]), 'split4_test_r2': array([0.45277641, 0.20436861, 0.07390803, 0.4643167 , 0.0063414 ,\n       0.01317068, 0.05387232, 0.01303582, 0.01216944, 0.1181594 ,\n       0.00572239, 0.30490447, 0.40403656, 0.48422797, 0.39969953,\n       0.04055841, 0.40265057, 0.60284675, 0.00513486, 0.05926144]), 'split5_test_r2': array([0.42277792, 0.31248887, 0.12930399, 0.29889548, 0.00877133,\n       0.01427424, 0.04580135, 0.01423058, 0.01391608, 0.16168903,\n       0.00471179, 0.33493788, 0.45052182, 0.32245276, 0.41483702,\n       0.04031806, 0.43206949, 0.31260123, 0.00461216, 0.05027306]), 'split6_test_r2': array([0.34677118, 0.28053294, 0.1160304 , 0.34049101, 0.00581625,\n       0.01630418, 0.03288044, 0.01625052, 0.01302586, 0.16839892,\n       0.00540546, 0.34721279, 0.37167125, 0.51092003, 0.38369172,\n       0.02905382, 0.38152692, 0.27355834, 0.00454514, 0.03092749]), 'split7_test_r2': array([0.16492872, 0.10396134, 0.03483348, 0.18592347, 0.0044506 ,\n       0.01144187, 0.01548174, 0.01145151, 0.00691828, 0.03364282,\n       0.00021391, 0.18392402, 0.20146076, 0.14280017, 0.1660672 ,\n       0.01869112, 0.17614508, 0.08647814, 0.00132874, 0.01654934]), 'split8_test_r2': array([0.36259541, 0.22968186, 0.09604033, 0.36536739, 0.00763908,\n       0.01870278, 0.03252789, 0.01880114, 0.00903289, 0.15247692,\n       0.00311761, 0.39278293, 0.30770778, 0.40996708, 0.28387539,\n       0.0339581 , 0.38544525, 0.34796158, 0.00271594, 0.03995905]), 'split9_test_r2': array([0.3482342 , 0.22973123, 0.08698897, 0.34144847, 0.00622726,\n       0.01127303, 0.02736871, 0.01127331, 0.00930686, 0.13376267,\n       0.00313006, 0.35758522, 0.37230669, 0.37799979, 0.32880018,\n       0.02485109, 0.38485006, 0.27789061, 0.00312758, 0.03647352]), 'mean_test_r2': array([0.34277598, 0.22856055, 0.09027048, 0.34589029, 0.00628401,\n       0.01422282, 0.03464364, 0.01421363, 0.01030797, 0.11956092,\n       0.00322576, 0.32766147, 0.35285344, 0.33681326, 0.32450554,\n       0.03130093, 0.35688591, 0.28822359, 0.00309765, 0.03826085]), 'std_test_r2': array([0.12676572, 0.07250719, 0.03040496, 0.144149  , 0.0016362 ,\n       0.00299712, 0.01294968, 0.00301514, 0.0024786 , 0.0414477 ,\n       0.0017884 , 0.09274034, 0.10645353, 0.16803467, 0.10154047,\n       0.00996092, 0.11564997, 0.19390445, 0.00148244, 0.01264571]), 'rank_test_r2': array([ 4,  9, 11,  3, 18, 15, 13, 16, 17, 10, 19,  6,  2,  5,  7, 14,  1,\n        8, 20, 12]), 'split0_train_r2': array([0.52327508, 0.35872802, 0.14591872, 0.82279345, 0.0112863 ,\n       0.02606958, 0.04811199, 0.02606958, 0.01342186, 0.24785712,\n       0.00690993, 0.74852405, 0.51576837, 0.97148108, 0.52146442,\n       0.03680389, 0.70545537, 0.88435087, 0.00608291, 0.06033954]), 'split1_train_r2': array([0.52999782, 0.3499525 , 0.140586  , 0.82616387, 0.01136866,\n       0.02677683, 0.04853415, 0.02677683, 0.01335007, 0.25153072,\n       0.00668753, 0.75453889, 0.50854872, 0.97364141, 0.5070306 ,\n       0.03886811, 0.70204668, 0.87124431, 0.00587245, 0.05838955]), 'split2_train_r2': array([0.54074134, 0.36617884, 0.143035  , 0.83588005, 0.01120707,\n       0.02539892, 0.05182679, 0.02539892, 0.0143035 , 0.2436386 ,\n       0.00746753, 0.77810441, 0.54335013, 0.96328451, 0.53901925,\n       0.03980079, 0.72419083, 0.8812233 , 0.00624017, 0.05989849]), 'split3_train_r2': array([0.55798743, 0.38357767, 0.1518793 , 0.84166885, 0.01153839,\n       0.02722526, 0.05398853, 0.02722526, 0.014033  , 0.26785783,\n       0.00705473, 0.79547834, 0.55475454, 0.97155233, 0.54943848,\n       0.04209769, 0.74314751, 0.89783952, 0.00618226, 0.06493927]), 'split4_train_r2': array([0.52793426, 0.3586026 , 0.14430491, 0.82408812, 0.01132005,\n       0.02571652, 0.05258425, 0.02571652, 0.01367086, 0.25821741,\n       0.00729944, 0.74753631, 0.51745328, 0.97169258, 0.50911597,\n       0.04112158, 0.70115028, 0.88842021, 0.00629829, 0.06446843]), 'split5_train_r2': array([0.52909333, 0.36269695, 0.14506607, 0.8373421 , 0.01128423,\n       0.0255517 , 0.04888578, 0.0255517 , 0.01364186, 0.24101976,\n       0.00726424, 0.7624853 , 0.53224929, 0.96154271, 0.52522966,\n       0.03990536, 0.7062165 , 0.88036721, 0.00637181, 0.06167641]), 'split6_train_r2': array([0.52923866, 0.36329735, 0.14305492, 0.83292235, 0.01110441,\n       0.02527774, 0.05189   , 0.02527774, 0.01370085, 0.24329156,\n       0.00730737, 0.7447626 , 0.52764074, 0.9661635 , 0.51695315,\n       0.04112302, 0.68722215, 0.8886008 , 0.00624737, 0.06144132]), 'split7_train_r2': array([0.55255463, 0.39181711, 0.157192  , 0.84016915, 0.0118566 ,\n       0.02721937, 0.05246874, 0.02721937, 0.01436717, 0.26200278,\n       0.0076088 , 0.77956317, 0.55977129, 0.96594973, 0.54765686,\n       0.04164497, 0.72859307, 0.88525083, 0.0066705 , 0.0625115 ]), 'split8_train_r2': array([0.53779432, 0.36208798, 0.14801047, 0.82291297, 0.01148122,\n       0.02683672, 0.0496056 , 0.02683672, 0.01396085, 0.25620777,\n       0.00701175, 0.7564517 , 0.53174517, 0.9686839 , 0.52588085,\n       0.04092867, 0.70749216, 0.8769336 , 0.00605625, 0.0616824 ]), 'split9_train_r2': array([0.54230957, 0.36379188, 0.14467473, 0.83276358, 0.01126018,\n       0.02585585, 0.05168504, 0.02585587, 0.01400282, 0.25439505,\n       0.00722008, 0.76451601, 0.53293889, 0.96685338, 0.53181703,\n       0.03911955, 0.71736851, 0.89115469, 0.0062226 , 0.06509668]), 'mean_train_r2': array([0.53709264, 0.36607309, 0.14637221, 0.83167045, 0.01137071,\n       0.02619285, 0.05095809, 0.02619285, 0.01384528, 0.25260186,\n       0.00718314, 0.76319608, 0.53242204, 0.96808451, 0.52736063,\n       0.04014136, 0.71228831, 0.88453853, 0.00622446, 0.06204436]), 'std_train_r2': array([0.01080509, 0.01174307, 0.00463431, 0.00684219, 0.00020087,\n       0.00071482, 0.00190686, 0.00071482, 0.00032756, 0.00832887,\n       0.0002579 , 0.01566925, 0.01568791, 0.00378705, 0.01396832,\n       0.0015036 , 0.01532785, 0.00718167, 0.00020023, 0.00212815]), 'split0_test_neg_mean_absolute_error': array([-1.27158551, -1.55896829, -1.68900951, -1.25243153, -1.77067795,\n       -1.76261799, -1.74492515, -1.76262   , -1.76769932, -1.6790693 ,\n       -1.77569444, -1.3724158 , -1.31900244, -1.20868962, -1.44711869,\n       -1.74689906, -1.29966849, -1.3460503 , -1.77442692, -1.74671861]), 'split1_test_neg_mean_absolute_error': array([-1.11934977, -1.37919797, -1.62070306, -0.94432712, -1.73535744,\n       -1.72247493, -1.68758109, -1.72248592, -1.73173147, -1.57813141,\n       -1.73931009, -1.1370529 , -1.14541744, -0.99881908, -1.17715309,\n       -1.69333477, -1.0908643 , -0.97809386, -1.73917292, -1.68725639]), 'split2_test_neg_mean_absolute_error': array([-1.41358983, -1.54409548, -1.67159805, -1.26539726, -1.70959883,\n       -1.69991196, -1.68878835, -1.70001604, -1.70803431, -1.63206602,\n       -1.71325247, -1.26382049, -1.37050679, -1.29776618, -1.41515605,\n       -1.69367697, -1.28519229, -1.33544901, -1.71366547, -1.68452624]), 'split3_test_neg_mean_absolute_error': array([-1.50918589, -1.52043678, -1.65587172, -1.50114515, -1.73637402,\n       -1.72855703, -1.72360199, -1.72855703, -1.73403733, -1.63420714,\n       -1.73917832, -1.42856779, -1.39013793, -1.60923423, -1.40648254,\n       -1.72233829, -1.50362689, -1.59993357, -1.7402452 , -1.71603025]), 'split4_test_neg_mean_absolute_error': array([-1.24156511, -1.46415602, -1.61777783, -1.20383154, -1.67873   ,\n       -1.67421508, -1.63779156, -1.67441742, -1.67234118, -1.58867843,\n       -1.67857595, -1.33729422, -1.24578204, -1.1095326 , -1.28397956,\n       -1.64578293, -1.22735395, -1.05127848, -1.67990242, -1.63426354]), 'split5_test_neg_mean_absolute_error': array([-1.24129198, -1.39123153, -1.58089113, -1.2384377 , -1.67656781,\n       -1.67468396, -1.64966173, -1.67474245, -1.67125425, -1.53657622,\n       -1.68003763, -1.24131644, -1.19218842, -1.13593288, -1.23679367,\n       -1.65712976, -1.11324225, -1.23000758, -1.68029593, -1.64265661]), 'split6_test_neg_mean_absolute_error': array([-1.37082137, -1.44838567, -1.60719975, -1.33387015, -1.68016355,\n       -1.67431814, -1.65556312, -1.67451178, -1.67490672, -1.55517406,\n       -1.67943934, -1.34252025, -1.36564644, -0.99372094, -1.34865449,\n       -1.66135981, -1.29152123, -1.35182427, -1.68052942, -1.65753823]), 'split7_test_neg_mean_absolute_error': array([-1.55411172, -1.63271333, -1.69801678, -1.47634328, -1.70623358,\n       -1.70308466, -1.69994336, -1.70306258, -1.70390752, -1.70176901,\n       -1.70945129, -1.48552254, -1.48671213, -1.46960658, -1.55689047,\n       -1.69583948, -1.4514544 , -1.49801855, -1.70820828, -1.69650693]), 'split8_test_neg_mean_absolute_error': array([-1.3652168 , -1.50609818, -1.6314707 , -1.24264344, -1.70275152,\n       -1.69383014, -1.68880669, -1.69378836, -1.70298526, -1.58502497,\n       -1.70650479, -1.30608095, -1.3960458 , -1.20108001, -1.42170838,\n       -1.68583015, -1.2951421 , -1.22334933, -1.70694002, -1.67951387]), 'split9_test_neg_mean_absolute_error': array([-1.33197991, -1.4999712 , -1.63819346, -1.26996415, -1.70409373,\n       -1.70090605, -1.68636792, -1.70090581, -1.70149873, -1.58488736,\n       -1.70644572, -1.31233411, -1.37554234, -1.06379818, -1.41371282,\n       -1.68669779, -1.3013523 , -1.37461459, -1.70637824, -1.68045173]), 'mean_test_neg_mean_absolute_error': array([-1.34186979, -1.49452544, -1.6410732 , -1.27283913, -1.71005484,\n       -1.70345999, -1.6863031 , -1.70351074, -1.70683961, -1.60755839,\n       -1.712789  , -1.32269255, -1.32869818, -1.20881803, -1.37076498,\n       -1.6888889 , -1.28594182, -1.29886195, -1.71297648, -1.68254624]), 'std_test_neg_mean_absolute_error': array([0.1242168 , 0.07318619, 0.03538168, 0.14578063, 0.02847434,\n       0.02671265, 0.03109469, 0.02666454, 0.02931348, 0.05032588,\n       0.0296704 , 0.09259332, 0.09888493, 0.19049472, 0.1056471 ,\n       0.02865976, 0.1210935 , 0.17805873, 0.02919572, 0.03165701]), 'rank_test_neg_mean_absolute_error': array([ 7,  9, 11,  2, 18, 15, 13, 16, 17, 10, 19,  5,  6,  1,  8, 14,  3,\n        4, 20, 12]), 'split0_train_neg_mean_absolute_error': array([-1.14181773, -1.36384245, -1.58060862, -0.67592133, -1.69946102,\n       -1.68672171, -1.66970143, -1.68672171, -1.69775109, -1.48436289,\n       -1.70351092, -0.81328599, -1.15859552, -0.2362352 , -1.15745877,\n       -1.67869946, -0.87611571, -0.56693135, -1.70423256, -1.65842972]), 'split1_train_neg_mean_absolute_error': array([-1.14314541, -1.3802969 , -1.58945767, -0.65390836, -1.70409261,\n       -1.69043563, -1.67355909, -1.69043563, -1.70289536, -1.47255326,\n       -1.70854484, -0.79961274, -1.16515468, -0.2303578 , -1.1784049 ,\n       -1.6818056 , -0.88791446, -0.58279196, -1.70938627, -1.66482409]), 'split2_train_neg_mean_absolute_error': array([-1.1363458 , -1.36312266, -1.59144697, -0.66135247, -1.70762753,\n       -1.69628343, -1.67311699, -1.69628343, -1.70535522, -1.49569356,\n       -1.71091616, -0.77212093, -1.12379969, -0.27535055, -1.13682998,\n       -1.68394966, -0.86582809, -0.56688956, -1.71188684, -1.66705059]), 'split3_train_neg_mean_absolute_error': array([-1.11191139, -1.3428819 , -1.57879499, -0.64248565, -1.70352355,\n       -1.6902875 , -1.66877236, -1.6902875 , -1.70119111, -1.46762543,\n       -1.70754314, -0.74370964, -1.10604706, -0.23577655, -1.12257656,\n       -1.67898102, -0.83092151, -0.5202273 , -1.70829248, -1.66020812]), 'split4_train_neg_mean_absolute_error': array([-1.145538  , -1.37003609, -1.59247941, -0.67049532, -1.70970773,\n       -1.6968593 , -1.67369544, -1.6968593 , -1.70783051, -1.48185116,\n       -1.71318117, -0.81943265, -1.15604135, -0.23971294, -1.17985673,\n       -1.68563568, -0.89269203, -0.54501131, -1.71418311, -1.66157411]), 'split5_train_neg_mean_absolute_error': array([-1.14863293, -1.37370653, -1.59388781, -0.64822701, -1.71002896,\n       -1.6976565 , -1.67739116, -1.6976565 , -1.70800293, -1.49559156,\n       -1.71356538, -0.80391114, -1.14041503, -0.27466903, -1.16073164,\n       -1.68580733, -0.89371444, -0.56373649, -1.71439447, -1.6660587 ]), 'split6_train_neg_mean_absolute_error': array([-1.14609408, -1.36586539, -1.59342907, -0.65069626, -1.71012781,\n       -1.69785324, -1.67459697, -1.69785324, -1.70765922, -1.49693297,\n       -1.71323724, -0.81762303, -1.1452134 , -0.26140017, -1.16446172,\n       -1.68368287, -0.91288226, -0.54189029, -1.71419746, -1.66444439]), 'split7_train_neg_mean_absolute_error': array([-1.1080495 , -1.3277635 , -1.57533053, -0.65054851, -1.70589176,\n       -1.69170622, -1.66862175, -1.69170622, -1.70396093, -1.46711825,\n       -1.70974034, -0.7560337 , -1.10836696, -0.26225131, -1.11701649,\n       -1.68005096, -0.84250703, -0.55053157, -1.71066843, -1.6594834 ]), 'split8_train_neg_mean_absolute_error': array([-1.1229144 , -1.36727352, -1.58526965, -0.65974662, -1.70627227,\n       -1.6920739 , -1.67424903, -1.6920739 , -1.7039636 , -1.48023212,\n       -1.71032199, -0.79531287, -1.12001163, -0.24281087, -1.14819344,\n       -1.67989121, -0.86854028, -0.55393635, -1.71128458, -1.66104854]), 'split9_train_neg_mean_absolute_error': array([-1.12697954, -1.363123  , -1.58851471, -0.65576945, -1.70669319,\n       -1.69350526, -1.67047027, -1.6935053 , -1.70469917, -1.47996341,\n       -1.71013749, -0.79130569, -1.13421202, -0.25927806, -1.14187105,\n       -1.68372811, -0.86868917, -0.54341092, -1.71099195, -1.65869173]), 'mean_train_neg_mean_absolute_error': array([-1.13314288, -1.36179119, -1.58692194, -0.6569151 , -1.70634264,\n       -1.69333827, -1.67241745, -1.69333827, -1.70433092, -1.48219246,\n       -1.71006987, -0.79123484, -1.13578573, -0.25178425, -1.15074013,\n       -1.68222319, -0.8739805 , -0.55353571, -1.71095181, -1.66218134]), 'std_train_neg_mean_absolute_error': array([0.01403545, 0.01456801, 0.00627846, 0.00972944, 0.0031873 ,\n       0.00354831, 0.002741  , 0.00354831, 0.00305742, 0.01060699,\n       0.00290782, 0.02467454, 0.01983574, 0.01587645, 0.02038499,\n       0.00255199, 0.02328159, 0.01657462, 0.002976  , 0.00299876])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GradientBoostingRegressor(criterion = 'mse')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[3, 4, 5, 6]", "estimator__n_estimators": "[50, 100, 150, 200]", "estimator__learning_rate": "[1e-1, 1e-2, 1e-3, 1e-4]", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10}}}]