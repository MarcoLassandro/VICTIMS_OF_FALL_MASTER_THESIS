[{"experiment_name": "Experiment_3_21_12_21", "dataset_variant": "complete", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.34605042016806725, "f1_micro": 0.34605042016806725, "f1_macro": 0.3293492222063651, "neg_root_mean_squared_error": -1.902412269908568, "neg_mean_absolute_error": -1.3432773109243699}, "mean_train_score": {"accuracy": 0.8736156351791531, "f1_micro": 0.8736156351791531, "f1_macro": 0.8670266725724147, "neg_root_mean_squared_error": -0.5907142422121513, "neg_mean_absolute_error": -0.27882736156351795}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 32.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 4.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.0625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 3, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 1e-05}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 10, 'estimator__estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([157.39499807, 138.51099896, 143.30800104, 149.11099672,\n       144.70900154, 147.24100161, 144.79800248, 147.43706942,\n       144.54254794, 150.26603389]), 'score_time': array([0.03799939, 0.0369997 , 0.03899837, 0.03900409, 0.03799987,\n       0.0379982 , 0.03799701, 0.03799725, 0.03599858, 0.03700113]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClass...\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.34285714, 0.35294118, 0.44117647, 0.17647059, 0.44117647,\n       0.38235294, 0.58823529, 0.29411765, 0.20588235, 0.23529412]), 'train_accuracy': array([1.        , 0.9771987 , 1.        , 0.77198697, 0.99348534,\n       1.        , 0.99674267, 0.98371336, 0.44625407, 0.56677524]), 'test_f1_micro': array([0.34285714, 0.35294118, 0.44117647, 0.17647059, 0.44117647,\n       0.38235294, 0.58823529, 0.29411765, 0.20588235, 0.23529412]), 'train_f1_micro': array([1.        , 0.9771987 , 1.        , 0.77198697, 0.99348534,\n       1.        , 0.99674267, 0.98371336, 0.44625407, 0.56677524]), 'test_f1_macro': array([0.28051948, 0.35095857, 0.43600289, 0.1511544 , 0.44050711,\n       0.37117605, 0.58423006, 0.28998779, 0.22750464, 0.16145125]), 'train_f1_macro': array([1.        , 0.97743091, 1.        , 0.77057913, 0.99328278,\n       1.        , 0.99673257, 0.98371499, 0.43250164, 0.51602472]), 'test_neg_root_mean_squared_error': array([-1.90488095, -1.65387246, -1.67156144, -2.22287572, -1.66274047,\n       -1.9326909 , -1.37198868, -2.21625015, -2.48525061, -1.90201132]), 'train_neg_root_mean_squared_error': array([-0.        , -0.4232648 , -0.        , -1.21740901, -0.23531807,\n       -0.        , -0.22829206, -0.25523828, -1.84496851, -1.7026517 ]), 'test_neg_mean_absolute_error': array([-1.28571429, -1.08823529, -1.08823529, -1.76470588, -1.05882353,\n       -1.26470588, -0.82352941, -1.61764706, -1.94117647, -1.5       ]), 'train_neg_mean_absolute_error': array([-0.        , -0.05537459, -0.        , -0.50488599, -0.01628664,\n       -0.        , -0.01302932, -0.02605863, -1.2019544 , -0.97068404])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_21_12_21", "dataset_variant": "only_totals", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3369747899159664, "f1_micro": 0.3369747899159664, "f1_macro": 0.3219131009046975, "neg_root_mean_squared_error": -2.0036153918135686, "neg_mean_absolute_error": -1.410924369747899}, "mean_train_score": {"accuracy": 0.9661216495284325, "f1_micro": 0.9661216495284325, "f1_macro": 0.965741902925296, "neg_root_mean_squared_error": -0.3325918110517905, "neg_mean_absolute_error": -0.07850375763769134}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.5, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 8.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.5, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 0.0625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}]", "cv_results": "{'fit_time': array([143.18502355, 150.32699847, 156.96100354, 135.88899922,\n       155.83799982, 147.65599918, 152.92208052, 154.84207392,\n       149.78900218, 144.8995502 ]), 'score_time': array([0.04299784, 0.03799987, 0.03999615, 0.03899837, 0.03800297,\n       0.03800154, 0.03999972, 0.03799987, 0.04000187, 0.03899837]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassifier(C=2,\n                                                                                          base_score=None,\n                                                                                          booster=None,\n                                                                                          colsample_bylevel=None,\n                                                                                          colsample_byno...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.42857143, 0.38235294, 0.41176471, 0.17647059, 0.52941176,\n       0.17647059, 0.41176471, 0.29411765, 0.23529412, 0.32352941]), 'train_accuracy': array([0.99346405, 0.99674267, 0.93485342, 0.94136808, 0.99674267,\n       0.86970684, 0.93159609, 0.99674267, 1.        , 1.        ]), 'test_f1_micro': array([0.42857143, 0.38235294, 0.41176471, 0.17647059, 0.52941176,\n       0.17647059, 0.41176471, 0.29411765, 0.23529412, 0.32352941]), 'train_f1_micro': array([0.99346405, 0.99674267, 0.93485342, 0.94136808, 0.99674267,\n       0.86970684, 0.93159609, 0.99674267, 1.        , 1.        ]), 'test_f1_macro': array([0.39247517, 0.37240696, 0.40560709, 0.16141636, 0.52777778,\n       0.14962815, 0.4017316 , 0.27835498, 0.22298253, 0.30675039]), 'train_f1_macro': array([0.99350349, 0.99699248, 0.9339703 , 0.94097963, 0.99702349,\n       0.8666805 , 0.931278  , 0.99699115, 1.        , 1.        ]), 'test_neg_root_mean_squared_error': array([-1.87464282, -2.02919862, -2.20293921, -1.940285  , -1.52431277,\n       -2.36394486, -1.73205081, -2.19625349, -2.06511643, -2.1074099 ]), 'train_neg_root_mean_squared_error': array([-0.08084521, -0.05707301, -0.65571902, -0.7105533 , -0.05707301,\n       -1.00162734, -0.7059542 , -0.05707301, -0.        , -0.        ]), 'test_neg_mean_absolute_error': array([-1.28571429, -1.29411765, -1.38235294, -1.58823529, -0.91176471,\n       -1.82352941, -1.17647059, -1.64705882, -1.5       , -1.5       ]), 'train_neg_mean_absolute_error': array([-0.00653595, -0.00325733, -0.14332248, -0.15309446, -0.00325733,\n       -0.31270358, -0.15960912, -0.00325733, -0.        , -0.        ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_3_21_12_21", "dataset_variant": "only_binary", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.35512605042016804, "f1_micro": 0.35512605042016804, "f1_macro": 0.3362219200034326, "neg_root_mean_squared_error": -1.9041267052813882, "neg_mean_absolute_error": -1.3222689075630252}, "mean_train_score": {"accuracy": 0.8230312320367886, "f1_micro": 0.8230312320367886, "f1_macro": 0.8219408723403238, "neg_root_mean_squared_error": -0.966540414318717, "neg_mean_absolute_error": -0.3865193417214877}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.5, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.001}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 32.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 0.03125, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.25, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.1}, {'scaler': StandardScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.015625, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 10, 'estimator__estimator__lambda': 1.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': StandardScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 8, 'estimator__estimator__lambda': 2.0, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}, {'scaler': MinMaxScaler(), 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__estimator__max_depth': 5, 'estimator__estimator__lambda': 0.5, 'estimator__estimator__gamma': 0, 'estimator__estimator__eta': 0.01}]", "cv_results": "{'fit_time': array([154.02199697, 147.19399714, 149.04399967, 150.75100422,\n       152.71699762, 158.30400062, 138.73800063, 140.42900229,\n       140.39199805, 145.67699885]), 'score_time': array([0.03700066, 0.03699875, 0.03800178, 0.03899908, 0.03800035,\n       0.03800058, 0.03800011, 0.03999782, 0.03700113, 0.04200244]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              OneVsRestClassifier(estimator=XGBClassi...\n        True,  True,  True,  True,  True])),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.35294118, 0.44117647, 0.26470588, 0.38235294,\n       0.38235294, 0.5       , 0.41176471, 0.26470588, 0.29411765]), 'train_accuracy': array([0.70588235, 0.77850163, 0.91856678, 1.        , 0.99674267,\n       0.80130293, 0.83061889, 0.69055375, 0.71009772, 0.7980456 ]), 'test_f1_micro': array([0.25714286, 0.35294118, 0.44117647, 0.26470588, 0.38235294,\n       0.38235294, 0.5       , 0.41176471, 0.26470588, 0.29411765]), 'train_f1_micro': array([0.70588235, 0.77850163, 0.91856678, 1.        , 0.99674267,\n       0.80130293, 0.83061889, 0.69055375, 0.71009772, 0.7980456 ]), 'test_f1_macro': array([0.22312258, 0.31446331, 0.43237477, 0.23671329, 0.39591837,\n       0.35500928, 0.497114  , 0.38567821, 0.24880952, 0.27301587]), 'train_f1_macro': array([0.70556315, 0.77639741, 0.91958424, 1.        , 0.99673257,\n       0.79936901, 0.83027486, 0.68580671, 0.70851601, 0.79716476]), 'test_neg_root_mean_squared_error': array([-1.8822479 , -1.2833779 , -1.62697843, -2.09340702, -1.62697843,\n       -2.09340702, -1.83911744, -2.30727749, -2.21625015, -2.07222529]), 'train_neg_root_mean_squared_error': array([-1.32842233, -1.2761914 , -0.68249399, -0.        , -0.22829206,\n       -1.18624033, -1.03991982, -1.30146497, -1.40497024, -1.21740901]), 'test_neg_mean_absolute_error': array([-1.42857143, -0.94117647, -1.05882353, -1.44117647, -1.11764706,\n       -1.38235294, -1.14705882, -1.55882353, -1.67647059, -1.47058824]), 'train_neg_mean_absolute_error': array([-0.61437908, -0.50814332, -0.16612378, -0.        , -0.01302932,\n       -0.46254072, -0.35830619, -0.63192182, -0.64495114, -0.46579805])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "OneVsRestClassifier(XGBClassifier(C = 2, kernel='rbf'))"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask, n_components = 2), MaskedSVD(mask=mask, n_components = 2)]", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__eta": "[0.1, 1e-2, 1e-3, 1e-5]", "estimator__estimator__gamma": "[0, 10, 20]", "estimator__estimator__max_depth": "[3, 5, 8, 10]", "estimator__estimator__lambda": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]