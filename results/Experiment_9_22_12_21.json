[{"experiment_name": "Experiment_9_22_12_21", "dataset_variant": "complete", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.24949579831932778, "f1_micro": 0.24949579831932778, "f1_macro": 0.2254073704073704, "neg_root_mean_squared_error": -1.8524234939501274, "neg_mean_absolute_error": -1.390420168067227}, "mean_train_score": {"accuracy": 0.40858721338698345, "f1_micro": 0.40858721338698345, "f1_macro": 0.3844999502504296, "neg_root_mean_squared_error": -0.8569154582320928, "neg_mean_absolute_error": -0.6412903706542334}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=3), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=11), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=7), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 0.1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 20, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=20), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=10), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=16), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}]", "cv_results": "{'fit_time': array([221.06390762, 211.34133577, 198.25832415, 222.89390254,\n       210.83632922, 234.8747561 , 208.79032564, 141.3319838 ,\n       131.3199656 , 132.49097037]), 'score_time': array([0.06099939, 0.08400774, 0.06000185, 0.03000236, 0.06300187,\n       0.03599691, 0.0529995 , 0.02899361, 0.03399849, 0.02799964]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=17)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.17142857, 0.38235294, 0.23529412, 0.20588235, 0.20588235,\n       0.20588235, 0.29411765, 0.26470588, 0.20588235, 0.32352941]), 'train_accuracy': array([0.3627451 , 0.42345277, 0.3257329 , 0.46905537, 0.43648208,\n       0.37785016, 0.39739414, 0.42345277, 0.47557003, 0.39413681]), 'test_f1_micro': array([0.17142857, 0.38235294, 0.23529412, 0.20588235, 0.20588235,\n       0.20588235, 0.29411765, 0.26470588, 0.20588235, 0.32352941]), 'train_f1_micro': array([0.3627451 , 0.42345277, 0.3257329 , 0.46905537, 0.43648208,\n       0.37785016, 0.39739414, 0.42345277, 0.47557003, 0.39413681]), 'test_f1_macro': array([0.14859307, 0.28222611, 0.2094033 , 0.17362637, 0.21621315,\n       0.18766234, 0.28122037, 0.24458874, 0.19342404, 0.31711622]), 'train_f1_macro': array([0.333038  , 0.36058742, 0.29863749, 0.45848441, 0.42331861,\n       0.35061683, 0.39411756, 0.4133811 , 0.46164868, 0.3511694 ]), 'test_neg_root_mean_squared_error': array([-1.58564993, -1.23669388, -1.940285  , -2.3701576 , -1.77399516,\n       -1.94784949, -1.79049779, -1.9326909 , -2.22287572, -1.72353945]), 'train_neg_root_mean_squared_error': array([-1.00813683, -0.96856117, -0.83879858, -0.72865947, -0.825095  ,\n       -1.06468328, -0.80713431, -0.75930707, -0.72417537, -0.84460349]), 'test_neg_mean_absolute_error': array([-1.25714286, -0.88235294, -1.41176471, -1.73529412, -1.44117647,\n       -1.44117647, -1.32352941, -1.44117647, -1.70588235, -1.26470588]), 'train_neg_mean_absolute_error': array([-0.76143791, -0.69055375, -0.68403909, -0.53094463, -0.60260586,\n       -0.78175896, -0.61889251, -0.57654723, -0.52442997, -0.64169381])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[100, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15]", "estimator__regressor__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__regressor__subsample": "[1.0, 0.5, 0.2]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_9_22_12_21", "dataset_variant": "only_totals", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2638655462184874, "f1_micro": 0.2638655462184874, "f1_macro": 0.24287371358799933, "neg_root_mean_squared_error": -1.7498446160554675, "neg_mean_absolute_error": -1.3083193277310925}, "mean_train_score": {"accuracy": 0.36558195482318884, "f1_micro": 0.36558195482318884, "f1_macro": 0.34911875327320796, "neg_root_mean_squared_error": -0.9577424777623511, "neg_mean_absolute_error": -0.7319282110238232}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}]", "cv_results": "{'fit_time': array([165.45884347, 155.25014567, 164.1678431 , 163.06614161,\n       156.44313836, 162.07514143, 153.75414133, 102.14949679,\n       110.15551257, 104.71648884]), 'score_time': array([0.04700017, 0.05399871, 0.05700088, 0.04900098, 0.05899906,\n       0.04900146, 0.05900025, 0.04000044, 0.02897978, 0.02899957]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=GradientBoostingRegressor(criterion='squared_error')))]),\n                   n_iter=20,\n                   param_dist...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.32352941, 0.29411765, 0.26470588, 0.17647059,\n       0.26470588, 0.20588235, 0.32352941, 0.17647059, 0.32352941]), 'train_accuracy': array([0.33660131, 0.36807818, 0.35504886, 0.38762215, 0.37785016,\n       0.37785016, 0.3029316 , 0.43648208, 0.32899023, 0.38436482]), 'test_f1_micro': array([0.28571429, 0.32352941, 0.29411765, 0.26470588, 0.17647059,\n       0.26470588, 0.20588235, 0.32352941, 0.17647059, 0.32352941]), 'train_f1_micro': array([0.33660131, 0.36807818, 0.35504886, 0.38762215, 0.37785016,\n       0.37785016, 0.3029316 , 0.43648208, 0.32899023, 0.38436482]), 'test_f1_macro': array([0.25512266, 0.28509824, 0.27875616, 0.24478458, 0.14047619,\n       0.23085248, 0.20748299, 0.29447537, 0.16855922, 0.32312925]), 'train_f1_macro': array([0.31696964, 0.34015778, 0.34206322, 0.37375317, 0.35426607,\n       0.36577354, 0.28036472, 0.42734848, 0.31373814, 0.37675277]), 'test_neg_root_mean_squared_error': array([-1.59463386, -1.67156144, -1.69774938, -2.07930984, -1.26025208,\n       -1.87867287, -1.59041245, -2.28164028, -2.07222529, -1.37198868]), 'train_neg_root_mean_squared_error': array([-1.39794434, -1.05546507, -0.8030885 , -0.78254575, -0.79493511,\n       -0.79493511, -1.4461    , -0.7506783 , -0.81915186, -0.93258074]), 'test_neg_mean_absolute_error': array([-1.17142857, -1.20588235, -1.17647059, -1.55882353, -1.05882353,\n       -1.35294118, -1.29411765, -1.61764706, -1.64705882, -1.        ]), 'train_neg_mean_absolute_error': array([-1.01960784, -0.78827362, -0.64495114, -0.61237785, -0.62540717,\n       -0.62540717, -1.06840391, -0.56351792, -0.67100977, -0.70032573])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[100, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15]", "estimator__regressor__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__regressor__subsample": "[1.0, 0.5, 0.2]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_9_22_12_21", "dataset_variant": "only_binary", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.21680672268907566, "f1_micro": 0.21680672268907566, "f1_macro": 0.19135973649366506, "neg_root_mean_squared_error": -1.93939209373266, "neg_mean_absolute_error": -1.4815126050420169}, "mean_train_score": {"accuracy": 0.38841199889293393, "f1_micro": 0.38841199889293393, "f1_macro": 0.36142038739634785, "neg_root_mean_squared_error": -0.8049856065275067, "neg_mean_absolute_error": -0.6246173170679781}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 100, 'estimator__regressor__max_depth': 5, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__subsample': 0.5, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__regressor__subsample': 0.2, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__regressor__learning_rate': 0.1, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__subsample': 1.0, 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__regressor__learning_rate': 0.01, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}]", "cv_results": "{'fit_time': array([217.07822824, 209.62512851, 182.89304042, 215.26623774,\n       193.48673058, 187.46278858, 172.53277922, 146.29074621,\n       127.21106386, 131.22940683]), 'score_time': array([0.03301334, 0.08700395, 0.09999943, 0.05000114, 0.10200262,\n       0.07505798, 0.1329968 , 0.03001738, 0.05799747, 0.0299983 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=18)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Gr...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.20588235, 0.23529412, 0.23529412, 0.14705882,\n       0.29411765, 0.23529412, 0.23529412, 0.20588235, 0.08823529]), 'train_accuracy': array([0.4248366 , 0.35830619, 0.38762215, 0.34527687, 0.43322476,\n       0.36807818, 0.31270358, 0.35504886, 0.40065147, 0.49837134]), 'test_f1_micro': array([0.28571429, 0.20588235, 0.23529412, 0.23529412, 0.14705882,\n       0.29411765, 0.23529412, 0.23529412, 0.20588235, 0.08823529]), 'train_f1_micro': array([0.4248366 , 0.35830619, 0.38762215, 0.34527687, 0.43322476,\n       0.36807818, 0.31270358, 0.35504886, 0.40065147, 0.49837134]), 'test_f1_macro': array([0.19837662, 0.15759241, 0.21904762, 0.22099567, 0.14034537,\n       0.23260732, 0.23675531, 0.22414966, 0.21672772, 0.06699967]), 'train_f1_macro': array([0.40420413, 0.31786849, 0.36950109, 0.31201233, 0.41948891,\n       0.33048185, 0.28158703, 0.31376393, 0.35990677, 0.50538933]), 'test_neg_root_mean_squared_error': array([-1.79682259, -1.89426379, -1.84709629, -2.242635  , -1.74894926,\n       -2.28164028, -1.63599223, -2.1074099 , -1.77399516, -2.06511643]), 'train_neg_root_mean_squared_error': array([-0.75839528, -0.80105793, -0.78254575, -0.80914963, -0.75284477,\n       -0.81915186, -0.96350338, -0.8030885 , -0.80511395, -0.75500502]), 'test_neg_mean_absolute_error': array([-1.28571429, -1.47058824, -1.35294118, -1.73529412, -1.47058824,\n       -1.55882353, -1.26470588, -1.61764706, -1.38235294, -1.67647059]), 'train_neg_mean_absolute_error': array([-0.5751634 , -0.64169381, -0.61237785, -0.65472313, -0.56677524,\n       -0.64495114, -0.76547231, -0.64495114, -0.61563518, -0.52442997])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = GradientBoostingRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[100, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15]", "estimator__regressor__learning_rate": "[1e-1, 1e-2, 1e-5]", "estimator__regressor__subsample": "[1.0, 0.5, 0.2]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]