[{"experiment_name": "Experiment_9_24_11_21", "dataset_variant": "complete", "estimator": "LogisticRegression()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.28445378151260503, "f1_micro": 0.2844537815126051, "f1_macro": 0.26700743234356683, "neg_root_mean_squared_error": -1.941523616805402, "neg_mean_absolute_error": -1.4439495798319324}, "mean_train_score": {"accuracy": 0.4392327180600796, "f1_micro": 0.4392327180600796, "f1_macro": 0.4251119599289021, "neg_root_mean_squared_error": -1.7983089420678184, "neg_mean_absolute_error": -1.1586776947478232}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 20, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=20), 'estimator__tol': 0.1, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.001, 'estimator__solver': 'saga', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 22, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=22), 'estimator__tol': 0.0001, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__tol': 0.0001, 'estimator__solver': 'saga', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__tol': 0.0001, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__multi_class': 'ovr', 'estimator__C': 0.6}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__tol': 0.1, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.2}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__tol': 0.0001, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.4}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__tol': 0.1, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'ovr', 'estimator__C': 0.2}]", "cv_results": "{'fit_time': array([59.5409224 , 65.05158639, 71.43958569, 67.36658311, 71.2875855 ,\n       66.83558702, 64.70858669, 52.17965984, 49.24299407, 48.17400122]), 'score_time': array([0.06799936, 0.02599883, 0.01000142, 0.02500057, 0.03200006,\n       0.08299971, 0.02999759, 0.00400305, 0.00300002, 0.00399923]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=20)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression(...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.32352941, 0.20588235, 0.26470588, 0.38235294,\n       0.26470588, 0.32352941, 0.32352941, 0.20588235, 0.26470588]), 'train_accuracy': array([0.44444444, 0.46905537, 0.51465798, 0.42996743, 0.4267101 ,\n       0.34527687, 0.4495114 , 0.40065147, 0.48534202, 0.4267101 ]), 'test_f1_micro': array([0.28571429, 0.32352941, 0.20588235, 0.26470588, 0.38235294,\n       0.26470588, 0.32352941, 0.32352941, 0.20588235, 0.26470588]), 'train_f1_micro': array([0.44444444, 0.46905537, 0.51465798, 0.42996743, 0.4267101 ,\n       0.34527687, 0.4495114 , 0.40065147, 0.48534202, 0.4267101 ]), 'test_f1_macro': array([0.24522536, 0.29433107, 0.17056277, 0.26096285, 0.39393939,\n       0.23267368, 0.31940837, 0.29004329, 0.22453102, 0.23839652]), 'train_f1_macro': array([0.430984  , 0.46261344, 0.50422939, 0.41824875, 0.41572188,\n       0.30325233, 0.44506587, 0.39392921, 0.46963983, 0.40743492]), 'test_neg_root_mean_squared_error': array([-1.38357714, -1.85504083, -2.16930458, -2.15570379, -1.42457424,\n       -1.82305497, -2.06511643, -1.99263349, -2.1760731 , -2.3701576 ]), 'train_neg_root_mean_squared_error': array([-1.77767565, -1.750756  , -1.71028694, -1.79121999, -1.80751237,\n       -1.94467451, -1.8343448 , -1.8084132 , -1.66101103, -1.89719491]), 'test_neg_mean_absolute_error': array([-1.05714286, -1.32352941, -1.76470588, -1.58823529, -0.97058824,\n       -1.32352941, -1.5       , -1.5       , -1.67647059, -1.73529412]), 'train_neg_mean_absolute_error': array([-1.14052288, -1.08469055, -1.01628664, -1.17589577, -1.18892508,\n       -1.34527687, -1.15635179, -1.20521173, -1.03908795, -1.23452769])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticRegression()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__multi_class": "['multinomial', 'ovr']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_9_24_11_21", "dataset_variant": "only_totals", "estimator": "LogisticRegression()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.31067226890756305, "f1_micro": 0.31067226890756305, "f1_macro": 0.27775754983627604, "neg_root_mean_squared_error": -1.9348545254768452, "neg_mean_absolute_error": -1.3997478991596637}, "mean_train_score": {"accuracy": 0.3440771965680952, "f1_micro": 0.3440771965680952, "f1_macro": 0.3129279070719745, "neg_root_mean_squared_error": -1.8863175631346436, "neg_mean_absolute_error": -1.3164186412893062}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__solver': 'sag', 'estimator__multi_class': 'ovr', 'estimator__C': 0.4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'ovr', 'estimator__C': 0.6}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.01, 'estimator__solver': 'saga', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.001, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.0001, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__tol': 0.1, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__tol': 0.1, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__tol': 0.1, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'ovr', 'estimator__C': 0.4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=1), 'estimator__tol': 0.1, 'estimator__solver': 'saga', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}]", "cv_results": "{'fit_time': array([49.80100012, 54.4059968 , 50.28500032, 48.44600153, 49.32400227,\n       48.93200278, 48.99199867, 35.7629981 , 41.03085995, 39.67699981]), 'score_time': array([0.0120008 , 0.00500178, 0.00699949, 0.02999902, 0.07099652,\n       0.01999593, 0.01900005, 0.00399947, 0.00299978, 0.0040009 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__C': [1.0, 0.6, 0.4, 0.2],\n                                        'estimator__multi_cla...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.37142857, 0.32352941, 0.35294118, 0.23529412, 0.29411765,\n       0.29411765, 0.26470588, 0.32352941, 0.29411765, 0.35294118]), 'train_accuracy': array([0.31699346, 0.3713355 , 0.35830619, 0.3257329 , 0.37459283,\n       0.35504886, 0.3257329 , 0.3713355 , 0.31596091, 0.3257329 ]), 'test_f1_micro': array([0.37142857, 0.32352941, 0.35294118, 0.23529412, 0.29411765,\n       0.29411765, 0.26470588, 0.32352941, 0.29411765, 0.35294118]), 'train_f1_micro': array([0.31699346, 0.3713355 , 0.35830619, 0.3257329 , 0.37459283,\n       0.35504886, 0.3257329 , 0.3713355 , 0.31596091, 0.3257329 ]), 'test_f1_macro': array([0.32534529, 0.26591153, 0.34397983, 0.21428571, 0.28823954,\n       0.27570208, 0.23590163, 0.26944881, 0.27460317, 0.28415791]), 'train_f1_macro': array([0.26481847, 0.35205067, 0.34686551, 0.26766948, 0.36191473,\n       0.32772625, 0.27681936, 0.36298678, 0.26991102, 0.29851679]), 'test_neg_root_mean_squared_error': array([-1.65615734, -1.84709629, -1.69774938, -2.77064444, -1.55298574,\n       -1.89426379, -1.80684971, -2.16930458, -2.11437656, -1.83911744]), 'train_neg_root_mean_squared_error': array([-1.95705528, -1.84496851, -1.75447311, -2.05621327, -1.77386014,\n       -1.83966432, -2.03791424, -1.72262205, -1.96467169, -1.91173302]), 'test_neg_mean_absolute_error': array([-1.08571429, -1.29411765, -1.17647059, -2.02941176, -1.17647059,\n       -1.35294118, -1.44117647, -1.58823529, -1.58823529, -1.26470588]), 'train_neg_mean_absolute_error': array([-1.40522876, -1.23452769, -1.22149837, -1.46579805, -1.21172638,\n       -1.26710098, -1.43648208, -1.18241042, -1.40390879, -1.33550489])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticRegression()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__multi_class": "['multinomial', 'ovr']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_9_24_11_21", "dataset_variant": "only_binary", "estimator": "LogisticRegression()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.3163865546218487, "f1_micro": 0.3163865546218487, "f1_macro": 0.30142603428317716, "neg_root_mean_squared_error": -1.8762004570374902, "neg_mean_absolute_error": -1.3652941176470588}, "mean_train_score": {"accuracy": 0.4245704796576611, "f1_micro": 0.4245704796576611, "f1_macro": 0.41168023871199766, "neg_root_mean_squared_error": -1.7959364448583464, "neg_mean_absolute_error": -1.177910838602542}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__tol': 0.0001, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.001, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__tol': 0.0001, 'estimator__solver': 'sag', 'estimator__multi_class': 'ovr', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__tol': 0.01, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9), 'estimator__tol': 0.01, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__tol': 0.0001, 'estimator__solver': 'sag', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__tol': 0.0001, 'estimator__solver': 'lbfgs', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.6}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__tol': 0.0001, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13), 'estimator__tol': 0.001, 'estimator__solver': 'saga', 'estimator__multi_class': 'ovr', 'estimator__C': 0.4}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__tol': 0.01, 'estimator__solver': 'newton-cg', 'estimator__multi_class': 'multinomial', 'estimator__C': 0.4}]", "cv_results": "{'fit_time': array([62.8375268 , 55.53952527, 65.32152557, 59.82552767, 59.51952744,\n       55.11252451, 66.09252405, 48.59299994, 47.42999911, 48.20996833]), 'score_time': array([0.01899838, 0.0359993 , 0.00699902, 0.05899811, 0.05299997,\n       0.03000164, 0.00500035, 0.00399876, 0.00399709, 0.00299859]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=9)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              LogisticRegression())]),\n                   n_iter=100, n_jo...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.42857143, 0.32352941, 0.26470588, 0.23529412, 0.41176471,\n       0.29411765, 0.38235294, 0.32352941, 0.20588235, 0.29411765]), 'train_accuracy': array([0.43137255, 0.4495114 , 0.47557003, 0.45602606, 0.4267101 ,\n       0.40716612, 0.39739414, 0.35179153, 0.43973941, 0.41042345]), 'test_f1_micro': array([0.42857143, 0.32352941, 0.26470588, 0.23529412, 0.41176471,\n       0.29411765, 0.38235294, 0.32352941, 0.20588235, 0.29411765]), 'train_f1_micro': array([0.43137255, 0.4495114 , 0.47557003, 0.45602606, 0.4267101 ,\n       0.40716612, 0.39739414, 0.35179153, 0.43973941, 0.41042345]), 'test_f1_macro': array([0.37350031, 0.30702948, 0.22380952, 0.23787879, 0.41949717,\n       0.27734488, 0.36428571, 0.32738531, 0.19119769, 0.29233148]), 'train_f1_macro': array([0.42343315, 0.44318316, 0.46690098, 0.44672329, 0.41182098,\n       0.38063969, 0.38312798, 0.34217331, 0.42342682, 0.39537303]), 'test_neg_root_mean_squared_error': array([-1.17108009, -1.81497043, -2.11437656, -2.1074099 , -1.41421356,\n       -1.9326909 , -1.82305497, -1.89426379, -2.1074099 , -2.38253449]), 'train_neg_root_mean_squared_error': array([-1.81766927, -1.80028952, -1.744232  , -1.71599109, -1.79757346,\n       -1.86341426, -1.84320214, -1.77569549, -1.75632871, -1.84496851]), 'test_neg_mean_absolute_error': array([-0.8       , -1.29411765, -1.64705882, -1.55882353, -0.94117647,\n       -1.38235294, -1.26470588, -1.41176471, -1.61764706, -1.73529412]), 'train_neg_mean_absolute_error': array([-1.18627451, -1.14332248, -1.08143322, -1.09446254, -1.19218241,\n       -1.23778502, -1.247557  , -1.23127036, -1.14332248, -1.22149837])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticRegression()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__solver": "['newton-cg', 'lbfgs', 'sag', 'saga']", "estimator__tol": "[1e-4, 1e-3, 1e-2, 1e-1]", "estimator__C": "[1.0, 0.6, 0.4, 0.2]", "estimator__multi_class": "['multinomial', 'ovr']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]