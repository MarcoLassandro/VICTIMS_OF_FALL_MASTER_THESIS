[{"experiment_name": "Experiment_6_20_11_21", "dataset_variant": "complete", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5044236809512292, "r2": 0.41153058885344285, "neg_mean_absolute_error": -1.188823030847118}, "mean_train_score": {"neg_root_mean_squared_error": -0.5883797960000345, "r2": 0.9112912999825159, "neg_mean_absolute_error": -0.4580760741619831}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}]", "cv_results": "{'fit_time': array([35.12000036, 34.64701986, 39.61800241, 39.93474936, 41.72997689,\n       40.25700307, 36.83399987, 37.02999973, 40.18878675, 39.51719093]), 'score_time': array([0.01400018, 0.03100014, 0.03099775, 0.01699996, 0.01400018,\n       0.03399754, 0.0250001 , 0.01300001, 0.02499938, 0.02999926]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.34414599, -1.30663042, -1.53520928, -1.82172636, -1.32079288,\n       -1.48478864, -1.32684759, -1.88095623, -1.59466496, -1.42847447]), 'train_neg_root_mean_squared_error': array([-0.57728579, -0.57318529, -0.55516392, -0.56017293, -0.66578138,\n       -0.55914969, -0.57976266, -0.6261813 , -0.62371017, -0.56340482]), 'test_r2': array([0.56051582, 0.5699239 , 0.39292806, 0.17620741, 0.54631386,\n       0.42665591, 0.5421448 , 0.08543744, 0.34265261, 0.47252607]), 'train_r2': array([0.91441697, 0.91595683, 0.92136511, 0.9196155 , 0.88704023,\n       0.92032599, 0.91434337, 0.90000563, 0.9007933 , 0.91905007]), 'test_neg_mean_absolute_error': array([-1.09641179, -1.04073175, -1.11905778, -1.46558236, -1.04204849,\n       -1.12052909, -1.10199627, -1.47655465, -1.2686516 , -1.15666652]), 'train_neg_mean_absolute_error': array([-0.44369109, -0.4491176 , -0.43694872, -0.42737412, -0.5275499 ,\n       -0.43459472, -0.45083176, -0.48676706, -0.48975334, -0.43413242])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_20_11_21", "dataset_variant": "only_totals", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.4980005659788929, "r2": 0.4148823692795676, "neg_mean_absolute_error": -1.1803971411433065}, "mean_train_score": {"neg_root_mean_squared_error": -0.602604104778312, "r2": 0.9068322186833381, "neg_mean_absolute_error": -0.4724321073384964}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}]", "cv_results": "{'fit_time': array([45.17012501, 43.25333953, 37.62100005, 41.36956406, 39.03900027,\n       36.325001  , 38.47099972, 34.34198689, 36.24801397, 36.28800106]), 'score_time': array([0.03199983, 0.02499938, 0.02398205, 0.02599955, 0.03100228,\n       0.02600002, 0.0250001 , 0.02600002, 0.02499962, 0.0250001 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.41440186, -1.3370796 , -1.55603671, -1.80873253, -1.2573001 ,\n       -1.44480051, -1.21056795, -1.91544754, -1.60457257, -1.43106628]), 'train_neg_root_mean_squared_error': array([-0.57579379, -0.63893457, -0.65344774, -0.54102843, -0.57837131,\n       -0.57323334, -0.66057349, -0.54679707, -0.63003761, -0.6278237 ]), 'test_r2': array([0.51337322, 0.54964571, 0.37634464, 0.18791723, 0.58888439,\n       0.4571225 , 0.61887765, 0.05158904, 0.33445907, 0.47061024]), 'train_r2': array([0.91485878, 0.89557004, 0.8910582 , 0.92501606, 0.914754  ,\n       0.91626184, 0.88880051, 0.92375213, 0.89877022, 0.8994804 ]), 'test_neg_mean_absolute_error': array([-1.14944336, -1.06348058, -1.15795912, -1.43867778, -1.01833646,\n       -1.10301518, -0.99606009, -1.45570131, -1.27285391, -1.14844362]), 'train_neg_mean_absolute_error': array([-0.44634483, -0.51009436, -0.51929096, -0.41016584, -0.45054272,\n       -0.44591524, -0.52258821, -0.42929803, -0.49554729, -0.49453361])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_20_11_21", "dataset_variant": "only_binary", "estimator": "RandomForestRegressor(criterion = 'squared_error')", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.546180735815264, "r2": 0.37950358711058746, "neg_mean_absolute_error": -1.2326248128368016}, "mean_train_score": {"neg_root_mean_squared_error": -0.6190347750238283, "r2": 0.9017449566943785, "neg_mean_absolute_error": -0.48619192434977043}, "best_params": "[{'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 250, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'sqrt', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 100, 'estimator__max_features': 'log2', 'estimator__max_depth': 10}, {'feature_extraction__n_components': 1, 'estimator__n_estimators': 250, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}, {'feature_extraction__n_components': 2, 'estimator__n_estimators': 200, 'estimator__max_features': 'log2', 'estimator__max_depth': 15}]", "cv_results": "{'fit_time': array([34.97001863, 34.14600539, 34.23399377, 33.84699678, 37.21900105,\n       37.85052419, 35.23700023, 37.09299994, 38.38735604, 37.074018  ]), 'score_time': array([0.0260005 , 0.0249989 , 0.0309999 , 0.01400089, 0.0309999 ,\n       0.01400018, 0.01400375, 0.01399994, 0.03499889, 0.0249846 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              RandomForestRegressor())]),\n                   n_iter=100, n_jobs=8,\n                   param_distributions={'estimator__max_depth': [10, 15],\n                                        'estimator__max_features': ['sqrt',\n                                                                    'log2'],\n                                        'estimator__n_estimators': [100, 200,\n                                                                    250],\n                                        'feature_extraction__n_components': [1,\n                                                                             2,\n                                                                             3]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.55063748, -1.27229943, -1.71079002, -1.82195527, -1.24858311,\n       -1.52171291, -1.40514906, -1.84561503, -1.6139335 , -1.47113155]), 'train_neg_root_mean_squared_error': array([-0.57982458, -0.5760097 , -0.64630418, -0.64137518, -0.67492487,\n       -0.6744811 , -0.59325999, -0.65133088, -0.56895837, -0.5838789 ]), 'test_r2': array([0.41511441, 0.59222703, 0.24612663, 0.17600037, 0.59456524,\n       0.39778507, 0.48651133, 0.11948192, 0.32667101, 0.44055286]), 'train_r2': array([0.91366256, 0.91512654, 0.89342711, 0.89462141, 0.88391626,\n       0.88406887, 0.91030863, 0.8918121 , 0.91744634, 0.91305975]), 'test_neg_mean_absolute_error': array([-1.20185629, -1.04236735, -1.25216338, -1.45331704, -1.01130028,\n       -1.1777768 , -1.16816188, -1.48926646, -1.29174788, -1.23829078]), 'train_neg_mean_absolute_error': array([-0.45068399, -0.44843988, -0.5182863 , -0.50710776, -0.534927  ,\n       -0.5306674 , -0.45586368, -0.51937372, -0.44248699, -0.45408252])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "RandomForestRegressor(criterion = 'squared_error')"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction__n_components": "[1, 2, 3]", "estimator__n_estimators": "[100, 200, 250]", "estimator__max_depth": "[10, 15]", "estimator__max_features": "['sqrt', 'log2']"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]