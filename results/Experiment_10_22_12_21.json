[{"experiment_name": "Experiment_10_22_12_21", "dataset_variant": "complete", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.24067226890756305, "f1_micro": 0.24067226890756305, "f1_macro": 0.21099055239811543, "neg_root_mean_squared_error": -1.7897175345947365, "neg_mean_absolute_error": -1.363949579831933}, "mean_train_score": {"accuracy": 0.3450501373187712, "f1_micro": 0.3450501373187712, "f1_macro": 0.32065906822794954, "neg_root_mean_squared_error": -1.0808314217876636, "neg_mean_absolute_error": -0.8195003299908453}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=15), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 8, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=8), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 5, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 2, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=6), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=6), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=7), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=11), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 15, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=15), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 8, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([297.37820697, 289.10368633, 292.83120656, 301.24434137,\n       287.39568305, 298.02120781, 298.06320882, 187.52187824,\n       192.51689434, 189.43636274]), 'score_time': array([0.07200003, 0.07299805, 0.06800032, 0.05200171, 0.07199931,\n       0.06399798, 0.07300019, 0.0430007 , 0.04198599, 0.03799748]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=15)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.17142857, 0.32352941, 0.20588235, 0.26470588, 0.17647059,\n       0.26470588, 0.20588235, 0.23529412, 0.23529412, 0.32352941]), 'train_accuracy': array([0.30392157, 0.35830619, 0.38762215, 0.29967427, 0.30618893,\n       0.35504886, 0.43322476, 0.28338762, 0.3257329 , 0.39739414]), 'test_f1_micro': array([0.17142857, 0.32352941, 0.20588235, 0.26470588, 0.17647059,\n       0.26470588, 0.20588235, 0.23529412, 0.23529412, 0.32352941]), 'train_f1_micro': array([0.30392157, 0.35830619, 0.38762215, 0.29967427, 0.30618893,\n       0.35504886, 0.43322476, 0.28338762, 0.3257329 , 0.39739414]), 'test_f1_macro': array([0.14080919, 0.26099773, 0.17664835, 0.22927231, 0.17630385,\n       0.23239142, 0.2031746 , 0.21474954, 0.19253762, 0.2830209 ]), 'train_f1_macro': array([0.27261411, 0.32893101, 0.3616804 , 0.29766562, 0.28787028,\n       0.34080976, 0.39968054, 0.25921465, 0.29813011, 0.3599942 ]), 'test_neg_root_mean_squared_error': array([-1.60356745, -1.55298574, -1.90201132, -2.02919862, -1.5718105 ,\n       -1.940285  , -1.62697843, -2.15570379, -2.        , -1.51463449]), 'train_neg_root_mean_squared_error': array([-1.10701861, -1.02095312, -0.94988427, -0.97191842, -1.28382572,\n       -1.06315246, -0.94644887, -1.09485025, -1.39332985, -0.97693265]), 'test_neg_mean_absolute_error': array([-1.25714286, -1.17647059, -1.44117647, -1.47058824, -1.29411765,\n       -1.35294118, -1.29411765, -1.64705882, -1.58823529, -1.11764706]), 'train_neg_mean_absolute_error': array([-0.86601307, -0.76872964, -0.70684039, -0.78175896, -0.98371336,\n       -0.80456026, -0.66775244, -0.87296417, -1.02931596, -0.71335505])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__max_depth": "[2, 5, 10]", "estimator__clf__min_samples_split": "[2, 4, 8, 16]", "estimator__clf__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__clf__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_10_22_12_21", "dataset_variant": "only_totals", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2581512605042017, "f1_micro": 0.2581512605042017, "f1_macro": 0.23503960325388898, "neg_root_mean_squared_error": -1.7662546220941244, "neg_mean_absolute_error": -1.3113445378151263}, "mean_train_score": {"accuracy": 0.34440080049392185, "f1_micro": 0.34440080049392174, "f1_macro": 0.3198476649279884, "neg_root_mean_squared_error": -1.0294074251617358, "neg_mean_absolute_error": -0.7856092056801004}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 8, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 4, 'estimator__clf__min_samples_leaf': 2, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([254.21314144, 239.18203187, 238.31803608, 238.06003857,\n       247.67371511, 228.26951265, 236.4330337 , 153.07240319,\n       158.94092321, 146.44587374]), 'score_time': array([0.08199835, 0.06500006, 0.06900024, 0.05900002, 0.08300185,\n       0.08600092, 0.07099962, 0.05200005, 0.04699969, 0.04000282]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassifier(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions=...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.22857143, 0.20588235, 0.32352941, 0.23529412, 0.26470588,\n       0.29411765, 0.29411765, 0.32352941, 0.23529412, 0.17647059]), 'train_accuracy': array([0.31045752, 0.38762215, 0.38436482, 0.26710098, 0.31921824,\n       0.41693811, 0.30618893, 0.29967427, 0.46905537, 0.28338762]), 'test_f1_micro': array([0.22857143, 0.20588235, 0.32352941, 0.23529412, 0.26470588,\n       0.29411765, 0.29411765, 0.32352941, 0.23529412, 0.17647059]), 'train_f1_micro': array([0.31045752, 0.38762215, 0.38436482, 0.26710098, 0.31921824,\n       0.41693811, 0.30618893, 0.29967427, 0.46905537, 0.28338762]), 'test_f1_macro': array([0.19353741, 0.17823129, 0.2989899 , 0.24376417, 0.26218821,\n       0.250999  , 0.2755102 , 0.27954545, 0.19756236, 0.17006803]), 'train_f1_macro': array([0.29845602, 0.35622466, 0.35073452, 0.25361842, 0.29620022,\n       0.3803705 , 0.28308551, 0.27795773, 0.43204164, 0.26978743]), 'test_neg_root_mean_squared_error': array([-1.54919334, -1.74052054, -1.61791442, -2.16251488, -1.55298574,\n       -1.74894926, -1.51463449, -2.10042013, -1.90972742, -1.765686  ]), 'train_neg_root_mean_squared_error': array([-1.05254128, -0.99182325, -0.96350338, -1.102263  , -1.03205939,\n       -0.94472649, -1.08288431, -1.05082564, -0.92204277, -1.15140475]), 'test_neg_mean_absolute_error': array([-1.14285714, -1.32352941, -1.14705882, -1.61764706, -1.17647059,\n       -1.23529412, -1.11764706, -1.47058824, -1.47058824, -1.41176471]), 'train_neg_mean_absolute_error': array([-0.82026144, -0.72964169, -0.71335505, -0.88925081, -0.80456026,\n       -0.68403909, -0.84690554, -0.83061889, -0.6286645 , -0.90879479])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__max_depth": "[2, 5, 10]", "estimator__clf__min_samples_split": "[2, 4, 8, 16]", "estimator__clf__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__clf__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_10_22_12_21", "dataset_variant": "only_binary", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2111764705882353, "f1_micro": 0.2111764705882353, "f1_macro": 0.20532440948407338, "neg_root_mean_squared_error": -1.7852829906183723, "neg_mean_absolute_error": -1.402016806722689}, "mean_train_score": {"accuracy": 0.3333471716591089, "f1_micro": 0.3333471716591089, "f1_macro": 0.30884878826265494, "neg_root_mean_squared_error": -1.0497427925781235, "neg_mean_absolute_error": -0.8051244384833195}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'gini'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__min_samples_split': 2, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'entropy'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 16, 'estimator__clf__max_depth': 2, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 4, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 1, 'estimator__clf__max_depth': 10, 'estimator__clf__criterion': 'gini'}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__min_samples_split': 8, 'estimator__clf__min_samples_leaf': 8, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__min_samples_split': 16, 'estimator__clf__min_samples_leaf': 8, 'estimator__clf__max_depth': 5, 'estimator__clf__criterion': 'entropy'}]", "cv_results": "{'fit_time': array([290.93852997, 296.85523844, 289.09152889, 294.57923841,\n       290.81155109, 270.99452925, 286.35252953, 168.5369482 ,\n       176.3539536 , 177.54894042]), 'score_time': array([0.11300182, 0.06900167, 0.08799887, 0.03799772, 0.11897779,\n       0.08600235, 0.10399914, 0.06799912, 0.04299736, 0.04700017]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=7)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=7)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=DecisionTreeClassi...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.2       , 0.20588235, 0.23529412, 0.11764706, 0.20588235,\n       0.29411765, 0.20588235, 0.29411765, 0.17647059, 0.17647059]), 'train_accuracy': array([0.37581699, 0.31596091, 0.27687296, 0.44299674, 0.34201954,\n       0.33224756, 0.31270358, 0.28664495, 0.30618893, 0.34201954]), 'test_f1_micro': array([0.2       , 0.20588235, 0.23529412, 0.11764706, 0.20588235,\n       0.29411765, 0.20588235, 0.29411765, 0.17647059, 0.17647059]), 'train_f1_micro': array([0.37581699, 0.31596091, 0.27687296, 0.44299674, 0.34201954,\n       0.33224756, 0.31270358, 0.28664495, 0.30618893, 0.34201954]), 'test_f1_macro': array([0.17490842, 0.18336425, 0.22580487, 0.11010101, 0.217917  ,\n       0.28583084, 0.21858697, 0.30309215, 0.16483516, 0.16880342]), 'train_f1_macro': array([0.35949785, 0.27672427, 0.25211922, 0.40245264, 0.31917979,\n       0.31550062, 0.29070737, 0.26429821, 0.28824105, 0.31976684]), 'test_neg_root_mean_squared_error': array([-1.62128697, -1.62697843, -1.69774938, -2.12824147, -1.79869234,\n       -1.91741247, -1.74052054, -1.92506684, -1.86295148, -1.53392998]), 'train_neg_root_mean_squared_error': array([-0.98019606, -1.00649357, -0.99510201, -0.90240359, -0.98853361,\n       -1.06926258, -1.25300941, -1.00325204, -1.04616564, -1.25300941]), 'test_neg_mean_absolute_error': array([-1.31428571, -1.29411765, -1.29411765, -1.70588235, -1.47058824,\n       -1.32352941, -1.38235294, -1.41176471, -1.52941176, -1.29411765]), 'train_neg_mean_absolute_error': array([-0.73202614, -0.79153094, -0.80781759, -0.63843648, -0.76221498,\n       -0.82410423, -0.94462541, -0.81107492, -0.82736156, -0.91205212])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = DecisionTreeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__max_depth": "[2, 5, 10]", "estimator__clf__min_samples_split": "[2, 4, 8, 16]", "estimator__clf__min_samples_leaf": "[1, 2, 4, 8, 16]", "estimator__clf__criterion": "['gini', 'entropy']"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]