[{"dataset_variant": "only_totals", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1, 2]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "2", "n_split_outer_kcv": 10}, "best_params": "{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}", "mean_test_score": 0.8270588235294116, "cv_results": "{'mean_fit_time': array([2.90800834e-01, 2.84099960e-01, 3.31000233e-01, 3.28900003e-01,\n       3.31500196e-01, 1.00016594e-03, 3.47700143e-01, 4.43300939e-01,\n       3.96800542e-01, 4.12999749e-01, 4.07700133e-01, 9.00435448e-04,\n       3.86600423e-01, 3.95199442e-01, 3.93599963e-01, 4.20700240e-01,\n       4.01099610e-01, 1.00014210e-03, 3.83800411e-01, 4.65198946e-01,\n       5.56300092e-01, 5.42099810e-01, 5.03300309e-01, 1.10006332e-03,\n       4.90500212e-01, 5.00000381e-01, 5.51800084e-01, 6.19200659e-01,\n       5.60900021e-01, 1.00002289e-03, 4.82899046e-01, 5.03499985e-01,\n       5.02200055e-01, 4.89800262e-01, 5.00119958e+00, 9.99855995e-04,\n       5.58800268e-01, 5.67299652e-01, 7.95499706e-01, 9.61198545e-01,\n       9.91298985e-01, 9.88700461e-01, 9.12000155e-01, 9.72700357e-01,\n       9.27100658e-01, 7.44501042e-01, 7.40299320e-01, 8.42899919e-01]), 'std_fit_time': array([4.95918908e-02, 1.41096749e-02, 1.59689387e-02, 3.57778773e-02,\n       1.36692546e-02, 1.20159179e-06, 3.25523125e-02, 2.95803640e-02,\n       1.84762091e-02, 2.34346783e-02, 1.90214312e-02, 3.00146323e-04,\n       3.20403947e-02, 4.11743671e-02, 3.04926386e-02, 3.10258096e-02,\n       2.04033206e-02, 1.00277619e-06, 4.48478568e-02, 6.21229517e-02,\n       4.38945244e-02, 3.92370048e-02, 4.68855119e-02, 2.99932506e-04,\n       2.59125048e-02, 3.60052572e-02, 6.66112928e-02, 2.54947444e-02,\n       4.18902671e-02, 9.72560790e-07, 3.14408408e-02, 4.97947528e-02,\n       3.50795529e-02, 4.10428938e-02, 7.35030048e+00, 8.53325375e-07,\n       1.28747836e-02, 2.60467284e-02, 1.03331134e-01, 3.27630153e-02,\n       4.50204674e-02, 5.02709016e-02, 3.62741555e-02, 4.32313602e-02,\n       3.31546930e-02, 8.63696408e-02, 1.23701415e-01, 1.39891041e-01]), 'mean_score_time': array([0.0029011 , 0.00279987, 0.00299935, 0.00280025, 0.00269988,\n       0.        , 0.00340044, 0.00269988, 0.0031997 , 0.00279944,\n       0.00319998, 0.        , 0.00620024, 0.00310047, 0.00310001,\n       0.00470002, 0.0028003 , 0.        , 0.00539994, 0.00380063,\n       0.00309958, 0.00450087, 0.00319932, 0.        , 0.00300038,\n       0.00359941, 0.00359998, 0.00479927, 0.0026998 , 0.        ,\n       0.00410068, 0.0031002 , 0.00260062, 0.00330007, 0.02500043,\n       0.        , 0.03909965, 0.04160056, 0.05780058, 0.06270227,\n       0.06730025, 0.07420185, 0.06860046, 0.06769903, 0.06339908,\n       0.04579995, 0.05000012, 0.05590119]), 'std_score_time': array([5.37046245e-04, 8.71979442e-04, 1.18359386e-03, 4.00318134e-04,\n       6.40523282e-04, 0.00000000e+00, 1.85406761e-03, 4.57700331e-04,\n       4.01139911e-04, 4.00508287e-04, 3.99566963e-04, 0.00000000e+00,\n       5.58167232e-03, 5.39014887e-04, 2.99982652e-04, 3.46557916e-03,\n       6.00204347e-04, 0.00000000e+00, 7.33740144e-03, 8.71842715e-04,\n       5.38248793e-04, 2.15705950e-03, 4.00675733e-04, 0.00000000e+00,\n       1.32852857e-06, 1.80053777e-03, 1.11390060e-03, 5.74130277e-03,\n       4.58433967e-04, 0.00000000e+00, 2.02291105e-03, 7.00059423e-04,\n       4.90038831e-04, 1.18745084e-03, 3.52786648e-02, 0.00000000e+00,\n       1.37506532e-03, 5.57171760e-03, 1.63259873e-02, 8.39267509e-03,\n       1.04312483e-02, 1.90120061e-02, 1.66389762e-02, 1.27747017e-02,\n       1.53447358e-02, 8.35213489e-03, 1.10887074e-02, 1.37370424e-02]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy'),\n                   RandomForestClassifier(criterion='entropy')],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --, --, --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 5, 5, 10, 10, 10, 10, 15,\n                   15, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150, 150, 150, 150, 150, 150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, eta=0.001,\n              gamma=None, gpu_id=None, importance_type='gain',\n              interaction_constraints=None, learning_rate=None,\n              max_delta_step=None, max_depth=10, min_child_weight=None,\n              missing=nan, monotone_constraints=None, n_estimators=100,\n              n_jobs=None, num_parallel_tree=None, random_state=None,\n              reg_alpha=None, reg_lambda=None, scale_pos_weight=None,\n              subsample=None, tree_method=None, validate_parameters=None,\n              verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy'), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.85714286, 0.82857143, 0.82857143, 0.8       , 0.82857143,\n              nan, 0.82857143, 0.82857143, 0.8       , 0.8       ,\n       0.82857143,        nan, 0.82857143, 0.82857143, 0.82857143,\n       0.8       , 0.82857143,        nan, 0.68571429, 0.74285714,\n       0.74285714, 0.74285714, 0.77142857,        nan, 0.65714286,\n       0.71428571, 0.71428571, 0.8       , 0.82857143,        nan,\n       0.65714286, 0.71428571, 0.71428571, 0.8       , 0.82857143,\n              nan, 0.68571429, 0.77142857, 0.77142857, 0.8       ,\n       0.8       , 0.77142857, 0.8       , 0.8       , 0.77142857,\n       0.82857143, 0.8       , 0.77142857]), 'split1_test_score': array([0.82352941, 0.79411765, 0.76470588, 0.79411765, 0.79411765,\n              nan, 0.76470588, 0.79411765, 0.79411765, 0.82352941,\n       0.79411765,        nan, 0.76470588, 0.82352941, 0.79411765,\n       0.82352941, 0.79411765,        nan, 0.82352941, 0.82352941,\n       0.82352941, 0.85294118, 0.85294118,        nan, 0.82352941,\n       0.82352941, 0.82352941, 0.88235294, 0.88235294,        nan,\n       0.82352941, 0.82352941, 0.82352941, 0.88235294, 0.88235294,\n              nan, 0.67647059, 0.76470588, 0.79411765, 0.76470588,\n       0.70588235, 0.79411765, 0.79411765, 0.79411765, 0.73529412,\n       0.76470588, 0.76470588, 0.82352941]), 'split2_test_score': array([0.79411765, 0.79411765, 0.85294118, 0.85294118, 0.82352941,\n              nan, 0.76470588, 0.85294118, 0.82352941, 0.82352941,\n       0.85294118,        nan, 0.85294118, 0.85294118, 0.82352941,\n       0.82352941, 0.85294118,        nan, 0.79411765, 0.91176471,\n       0.88235294, 0.88235294, 0.88235294,        nan, 0.85294118,\n       0.82352941, 0.85294118, 0.88235294, 0.88235294,        nan,\n       0.85294118, 0.82352941, 0.85294118, 0.88235294, 0.88235294,\n              nan, 0.76470588, 0.85294118, 0.85294118, 0.82352941,\n       0.70588235, 0.82352941, 0.82352941, 0.88235294, 0.76470588,\n       0.85294118, 0.82352941, 0.85294118]), 'split3_test_score': array([0.91176471, 0.79411765, 0.85294118, 0.88235294, 0.82352941,\n              nan, 0.91176471, 0.82352941, 0.82352941, 0.91176471,\n       0.79411765,        nan, 0.91176471, 0.82352941, 0.82352941,\n       0.91176471, 0.79411765,        nan, 0.85294118, 0.73529412,\n       0.79411765, 0.79411765, 0.79411765,        nan, 0.85294118,\n       0.79411765, 0.79411765, 0.82352941, 0.82352941,        nan,\n       0.85294118, 0.79411765, 0.79411765, 0.82352941, 0.82352941,\n              nan, 0.88235294, 0.85294118, 0.88235294, 0.88235294,\n       0.94117647, 0.88235294, 0.94117647, 0.94117647, 0.94117647,\n       0.85294118, 0.91176471, 0.88235294]), 'split4_test_score': array([0.70588235, 0.70588235, 0.73529412, 0.79411765, 0.79411765,\n              nan, 0.70588235, 0.73529412, 0.73529412, 0.76470588,\n       0.79411765,        nan, 0.79411765, 0.70588235, 0.73529412,\n       0.76470588, 0.79411765,        nan, 0.82352941, 0.79411765,\n       0.79411765, 0.82352941, 0.79411765,        nan, 0.79411765,\n       0.76470588, 0.76470588, 0.82352941, 0.79411765,        nan,\n       0.79411765, 0.76470588, 0.76470588, 0.82352941, 0.79411765,\n              nan, 0.64705882, 0.76470588, 0.76470588, 0.82352941,\n       0.70588235, 0.76470588, 0.79411765, 0.70588235, 0.67647059,\n       0.73529412, 0.76470588, 0.73529412]), 'split5_test_score': array([0.88235294, 0.88235294, 0.82352941, 0.85294118, 0.88235294,\n              nan, 0.91176471, 0.88235294, 0.85294118, 0.88235294,\n       0.91176471,        nan, 0.91176471, 0.94117647, 0.82352941,\n       0.88235294, 0.91176471,        nan, 0.82352941, 0.82352941,\n       0.82352941, 0.82352941, 0.82352941,        nan, 0.82352941,\n       0.82352941, 0.82352941, 0.91176471, 0.88235294,        nan,\n       0.82352941, 0.82352941, 0.82352941, 0.91176471, 0.88235294,\n              nan, 0.79411765, 0.82352941, 0.85294118, 0.85294118,\n       0.88235294, 0.88235294, 0.88235294, 0.85294118, 0.88235294,\n       0.85294118, 0.91176471, 0.88235294]), 'split6_test_score': array([0.67647059, 0.67647059, 0.64705882, 0.73529412, 0.67647059,\n              nan, 0.67647059, 0.67647059, 0.64705882, 0.70588235,\n       0.70588235,        nan, 0.67647059, 0.67647059, 0.64705882,\n       0.70588235, 0.70588235,        nan, 0.67647059, 0.64705882,\n       0.67647059, 0.70588235, 0.70588235,        nan, 0.67647059,\n       0.61764706, 0.64705882, 0.70588235, 0.70588235,        nan,\n       0.67647059, 0.61764706, 0.64705882, 0.70588235, 0.70588235,\n              nan, 0.67647059, 0.67647059, 0.76470588, 0.73529412,\n       0.73529412, 0.64705882, 0.73529412, 0.67647059, 0.67647059,\n       0.61764706, 0.70588235, 0.64705882]), 'split7_test_score': array([0.82352941, 0.79411765, 0.88235294, 0.85294118, 0.88235294,\n              nan, 0.82352941, 0.82352941, 0.85294118, 0.85294118,\n       0.88235294,        nan, 0.82352941, 0.82352941, 0.82352941,\n       0.85294118, 0.88235294,        nan, 0.85294118, 0.85294118,\n       0.88235294, 0.79411765, 0.79411765,        nan, 0.85294118,\n       0.85294118, 0.88235294, 0.79411765, 0.79411765,        nan,\n       0.85294118, 0.85294118, 0.88235294, 0.79411765, 0.79411765,\n              nan, 0.79411765, 0.85294118, 0.88235294, 0.85294118,\n       0.76470588, 0.82352941, 0.82352941, 0.85294118, 0.79411765,\n       0.88235294, 0.85294118, 0.91176471]), 'split8_test_score': array([0.82352941, 0.79411765, 0.76470588, 0.76470588, 0.82352941,\n              nan, 0.82352941, 0.79411765, 0.79411765, 0.79411765,\n       0.82352941,        nan, 0.82352941, 0.79411765, 0.79411765,\n       0.79411765, 0.82352941,        nan, 0.82352941, 0.79411765,\n       0.79411765, 0.79411765, 0.76470588,        nan, 0.79411765,\n       0.76470588, 0.76470588, 0.82352941, 0.76470588,        nan,\n       0.79411765, 0.76470588, 0.76470588, 0.82352941, 0.76470588,\n              nan, 0.70588235, 0.79411765, 0.76470588, 0.79411765,\n       0.82352941, 0.79411765, 0.82352941, 0.82352941, 0.82352941,\n       0.79411765, 0.79411765, 0.79411765]), 'split9_test_score': array([0.79411765, 0.79411765, 0.76470588, 0.82352941, 0.79411765,\n              nan, 0.82352941, 0.79411765, 0.79411765, 0.82352941,\n       0.79411765,        nan, 0.82352941, 0.76470588, 0.79411765,\n       0.82352941, 0.79411765,        nan, 0.79411765, 0.79411765,\n       0.82352941, 0.82352941, 0.82352941,        nan, 0.76470588,\n       0.76470588, 0.79411765, 0.82352941, 0.82352941,        nan,\n       0.76470588, 0.76470588, 0.79411765, 0.82352941, 0.82352941,\n              nan, 0.79411765, 0.82352941, 0.79411765, 0.79411765,\n       0.79411765, 0.79411765, 0.73529412, 0.79411765, 0.79411765,\n       0.82352941, 0.73529412, 0.79411765]), 'mean_test_score': array([0.8092437 , 0.78579832, 0.79168067, 0.81529412, 0.81226891,\n              nan, 0.80344538, 0.8005042 , 0.79176471, 0.81823529,\n       0.81815126,        nan, 0.82109244, 0.80344538, 0.7887395 ,\n       0.81823529, 0.81815126,        nan, 0.79504202, 0.79193277,\n       0.80369748, 0.80369748, 0.80067227,        nan, 0.7892437 ,\n       0.77436975, 0.78613445, 0.82705882, 0.81815126,        nan,\n       0.7892437 , 0.77436975, 0.78613445, 0.82705882, 0.81815126,\n              nan, 0.74210084, 0.79773109, 0.81243697, 0.81235294,\n       0.78588235, 0.79773109, 0.81529412, 0.81235294, 0.78596639,\n       0.8005042 , 0.80647059, 0.8094958 ]), 'std_test_score': array([0.06894342, 0.05468703, 0.06661852, 0.04348169, 0.05468025,\n              nan, 0.07345081, 0.05572791, 0.05806571, 0.05527221,\n       0.05398883,        nan, 0.06507963, 0.07105632, 0.05426281,\n       0.05527221, 0.05398883,        nan, 0.05997016, 0.06833561,\n       0.05806619, 0.04830756, 0.04659556,        nan, 0.06733584,\n       0.0650121 , 0.06485985, 0.05462676, 0.05398883,        nan,\n       0.06733584, 0.0650121 , 0.06485985, 0.05462676, 0.05398883,\n              nan, 0.07101954, 0.05297725, 0.04716495, 0.04179783,\n       0.07570659, 0.06338502, 0.05871755, 0.07452038, 0.07882519,\n       0.07434881, 0.06594797, 0.07548076]), 'rank_test_score': array([17, 39, 31, 10, 15, 47, 21, 24, 30,  4,  6, 46,  3, 21, 34,  4,  6,\n       43, 28, 29, 19, 19, 23, 48, 32, 40, 35,  1,  6, 45, 32, 40, 35,  1,\n        6, 44, 42, 27, 12, 13, 38, 26, 10, 13, 37, 24, 18, 16]), 'split0_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.88562092, 0.88888889,\n       0.88888889, 0.87254902, 0.87908497,        nan, 0.90196078,\n       0.89542484, 0.89542484, 0.88562092, 0.88235294,        nan,\n       0.90196078, 0.89542484, 0.89542484, 0.88562092, 0.88235294,\n              nan, 0.85947712, 0.88562092, 0.91176471, 0.89215686,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split1_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.85667752, 0.86319218,\n       0.86319218, 0.87296417, 0.87947883,        nan, 0.87296417,\n       0.87947883, 0.87947883, 0.88925081, 0.89576547,        nan,\n       0.87296417, 0.87947883, 0.87947883, 0.88925081, 0.89576547,\n              nan, 0.87947883, 0.88273616, 0.8990228 , 0.89250814,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.85993485, 0.86644951,\n       0.86970684, 0.87947883, 0.87947883,        nan, 0.87947883,\n       0.88599349, 0.89250814, 0.88925081, 0.90879479,        nan,\n       0.87947883, 0.88599349, 0.89250814, 0.88925081, 0.90879479,\n              nan, 0.87296417, 0.86319218, 0.88925081, 0.87947883,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split3_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.8762215 , 0.87947883,\n       0.88599349, 0.87947883, 0.86970684,        nan, 0.89576547,\n       0.90879479, 0.90553746, 0.89576547, 0.90553746,        nan,\n       0.89576547, 0.90879479, 0.90553746, 0.89576547, 0.90553746,\n              nan, 0.86970684, 0.87947883, 0.8990228 , 0.88273616,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split4_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.8762215 , 0.8762215 ,\n       0.87296417, 0.87296417, 0.86970684,        nan, 0.88925081,\n       0.88925081, 0.89250814, 0.87296417, 0.86970684,        nan,\n       0.88925081, 0.88925081, 0.89250814, 0.87296417, 0.86970684,\n              nan, 0.89250814, 0.87947883, 0.89250814, 0.87947883,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split5_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.86319218, 0.86644951,\n       0.86644951, 0.85667752, 0.85667752,        nan, 0.87947883,\n       0.88925081, 0.88925081, 0.88925081, 0.89250814,        nan,\n       0.87947883, 0.88925081, 0.88925081, 0.88925081, 0.89250814,\n              nan, 0.88599349, 0.88599349, 0.8990228 , 0.86970684,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split6_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.88273616, 0.89250814,\n       0.89576547, 0.87296417, 0.87296417,        nan, 0.89250814,\n       0.8990228 , 0.90553746, 0.88599349, 0.88599349,        nan,\n       0.89250814, 0.8990228 , 0.90553746, 0.88599349, 0.88599349,\n              nan, 0.89250814, 0.88925081, 0.90228013, 0.89576547,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.86970684, 0.86644951,\n       0.86644951, 0.8990228 , 0.8990228 ,        nan, 0.88925081,\n       0.88925081, 0.90228013, 0.90228013, 0.90228013,        nan,\n       0.88925081, 0.88925081, 0.90228013, 0.90228013, 0.90228013,\n              nan, 0.89576547, 0.89576547, 0.90228013, 0.89250814,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split8_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.87296417, 0.88273616,\n       0.88273616, 0.85993485, 0.86644951,        nan, 0.8762215 ,\n       0.88925081, 0.88925081, 0.91205212, 0.9218241 ,        nan,\n       0.8762215 , 0.88925081, 0.88925081, 0.91205212, 0.9218241 ,\n              nan, 0.8762215 , 0.88599349, 0.90228013, 0.89576547,\n       1.        , 0.99674267, 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split9_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.87947883, 0.87947883,\n       0.87947883, 0.89250814, 0.89250814,        nan, 0.90228013,\n       0.90553746, 0.91530945, 0.8990228 , 0.8990228 ,        nan,\n       0.90228013, 0.90553746, 0.91530945, 0.8990228 , 0.8990228 ,\n              nan, 0.88925081, 0.8990228 , 0.91856678, 0.8990228 ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'mean_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n              nan, 1.        , 1.        , 1.        , 1.        ,\n       1.        ,        nan, 1.        , 1.        , 1.        ,\n       1.        , 1.        ,        nan, 0.87227545, 0.87618531,\n       0.8771625 , 0.87585425, 0.87650785,        nan, 0.88791595,\n       0.89312555, 0.89670861, 0.89214515, 0.89637862,        nan,\n       0.88791595, 0.89312555, 0.89670861, 0.89214515, 0.89637862,\n              nan, 0.88138745, 0.8846533 , 0.90159992, 0.88791275,\n       1.        , 0.99967427, 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'std_train_score': array([0.        , 0.        , 0.        , 0.        , 0.        ,\n              nan, 0.        , 0.        , 0.        , 0.        ,\n       0.        ,        nan, 0.        , 0.        , 0.        ,\n       0.        , 0.        ,        nan, 0.00925053, 0.00972422,\n       0.0104686 , 0.01223751, 0.01177584,        nan, 0.00996263,\n       0.0085837 , 0.00988923, 0.01016299, 0.01399517,        nan,\n       0.00996263, 0.0085837 , 0.00988923, 0.01016299, 0.01399517,\n              nan, 0.01120221, 0.00934577, 0.0080478 , 0.00898624,\n       0.        , 0.0009772 , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        ])}"}, {"dataset_variant": "complete", "experiment_setup": {"dataset_variants": ["only_totals", "complete"], "only_BMI": "True", "use_special_mask": "False", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "clf": "[XGBClassifier(), GradientBoostingClassifier(), RandomForestClassifier(criterion = 'entropy')]", "floor_labels": "True", "params": [{"clf": "[XGBClassifier(verbose = 0)]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[2,3,4]", "scaler": "[MinMaxScaler()]", "clf__eta": "[0.3, 1e-3]", "clf__max_depth": "[5, 10, 15]"}, {"clf": "[RandomForestClassifier(criterion = 'entropy')]", "reduce_dim": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "reduce_dim__n_components": "[1, 2]", "scaler": "[MinMaxScaler()]", "clf__n_estimators": "[150]", "clf__max_depth": "[5, 10, 15]"}], "metrics": "['accuracy']", "binarize": "2", "n_split_outer_kcv": 10}, "best_params": "{'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}", "mean_test_score": 0.8300840336134453, "cv_results": "{'mean_fit_time': array([0.30909915, 0.40379994, 0.43749976, 0.65739927, 0.68280041,\n       0.41459751, 0.41070094, 0.40230031, 0.41569951, 0.58480096,\n       0.43089981, 0.38820043, 0.41270025, 0.38800092, 0.40440116,\n       0.42660089, 0.39799984, 0.39409943, 0.38489957, 0.40740063,\n       0.39699931, 0.40359976, 0.40739901, 0.40319989, 0.52620089,\n       0.50149951, 0.52699983, 0.47700016, 0.57549968, 0.6777005 ,\n       0.66990047, 0.55990045, 0.52809937, 0.47369943, 0.5965003 ,\n       7.00651262, 0.68809979, 0.74080055, 0.75970068, 0.72940013,\n       0.76649985, 0.76810408, 0.87581739, 0.93090122, 0.80209973,\n       0.79299955, 0.89739995, 0.87439983]), 'std_fit_time': array([0.03469101, 0.0524006 , 0.03258543, 0.07712417, 0.10144825,\n       0.03655907, 0.0188942 , 0.03192435, 0.02563218, 0.0358744 ,\n       0.03668359, 0.02876731, 0.02572212, 0.02067374, 0.02898367,\n       0.02930733, 0.01640137, 0.01966488, 0.02989486, 0.03245382,\n       0.04166991, 0.02134075, 0.02468563, 0.03404042, 0.0471466 ,\n       0.04006025, 0.03955995, 0.02825231, 0.08564178, 0.06168221,\n       0.02576977, 0.03988809, 0.03293691, 0.02357525, 0.04190053,\n       9.73683644, 0.04762417, 0.02629735, 0.02904183, 0.02001566,\n       0.02882442, 0.03127181, 0.03903567, 0.07294073, 0.01889229,\n       0.03812048, 0.05615906, 0.07293027]), 'mean_score_time': array([0.0060014 , 0.00590067, 0.00459995, 0.00730107, 0.0038003 ,\n       0.0028996 , 0.00369976, 0.00310018, 0.00359986, 0.00389974,\n       0.00309958, 0.00309927, 0.00369956, 0.004299  , 0.00339916,\n       0.00329978, 0.00290022, 0.00310104, 0.00290053, 0.00329967,\n       0.00350068, 0.00280027, 0.00360076, 0.00279992, 0.00359979,\n       0.00330031, 0.00260007, 0.00280015, 0.00300028, 0.00309975,\n       0.00299947, 0.00299938, 0.00300102, 0.00279999, 0.00319979,\n       0.01410058, 0.04979975, 0.05119882, 0.05439937, 0.04719949,\n       0.05450027, 0.05219951, 0.06369989, 0.0561995 , 0.05280044,\n       0.05519979, 0.06330037, 0.05509944]), 'std_score_time': array([5.46047260e-03, 5.28138220e-03, 2.20026122e-03, 8.84348354e-03,\n       1.32588561e-03, 2.99995757e-04, 9.00262067e-04, 2.99614045e-04,\n       1.62441121e-03, 2.11911404e-03, 5.38558157e-04, 5.38394046e-04,\n       1.41878399e-03, 2.96834863e-03, 1.01984765e-03, 7.80169099e-04,\n       3.00122898e-04, 5.38651335e-04, 3.00068362e-04, 4.58287617e-04,\n       2.24703145e-03, 4.00209967e-04, 1.85501621e-03, 6.00195331e-04,\n       1.11355394e-03, 6.40493319e-04, 4.89931248e-04, 6.00434062e-04,\n       4.46435176e-04, 5.39014571e-04, 8.98746339e-07, 4.46916234e-04,\n       4.46968720e-04, 6.00179884e-04, 7.48112106e-04, 2.08056814e-02,\n       7.40000252e-03, 1.06287318e-02, 8.11387758e-03, 9.08590879e-03,\n       1.10020483e-02, 9.83664009e-03, 1.31687035e-02, 1.29607766e-02,\n       1.09703814e-02, 8.19556584e-03, 1.46488250e-02, 1.58390439e-02]), 'param_clf': masked_array(data=[XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150),\n                   RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150)],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__eta': masked_array(data=[0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,\n                   0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,\n                   0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, --,\n                   --, --, --, --, --, --, --, --, --, --, --],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True],\n       fill_value='?',\n            dtype=object), 'param_clf__max_depth': masked_array(data=[5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 15, 15, 15,\n                   15, 15, 15, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10,\n                   15, 15, 15, 15, 15, 15, 5, 5, 5, 5, 10, 10, 10, 10, 15,\n                   15, 15, 15],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim': masked_array(data=[MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])),\n                   MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_reduce_dim__n_components': masked_array(data=[2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4, 2, 3, 4,\n                   1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_scaler': masked_array(data=[MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler(),\n                   MinMaxScaler(), MinMaxScaler(), MinMaxScaler()],\n             mask=[False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'param_clf__n_estimators': masked_array(data=[--, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n                   --, --, --, --, --, --, --, --, 150, 150, 150, 150,\n                   150, 150, 150, 150, 150, 150, 150, 150],\n             mask=[ True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True,  True,  True,  True,  True,\n                    True,  True,  True,  True, False, False, False, False,\n                   False, False, False, False, False, False, False, False],\n       fill_value='?',\n            dtype=object), 'params': [{'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.3, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 5, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 10, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 3, 'scaler': MinMaxScaler()}, {'clf': XGBClassifier(base_score=None, booster=None, colsample_bylevel=None,\n              colsample_bynode=None, colsample_bytree=None, gamma=None,\n              gpu_id=None, importance_type='gain', interaction_constraints=None,\n              learning_rate=None, max_delta_step=None, max_depth=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              n_estimators=100, n_jobs=None, num_parallel_tree=None,\n              random_state=None, reg_alpha=None, reg_lambda=None,\n              scale_pos_weight=None, subsample=None, tree_method=None,\n              validate_parameters=None, verbose=0, verbosity=None), 'clf__eta': 0.001, 'clf__max_depth': 15, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 4, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 5, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 10, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 1, 'scaler': MinMaxScaler()}, {'clf': RandomForestClassifier(criterion='entropy', max_depth=5, n_estimators=150), 'clf__max_depth': 15, 'clf__n_estimators': 150, 'reduce_dim': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'reduce_dim__n_components': 2, 'scaler': MinMaxScaler()}], 'split0_test_score': array([0.77142857, 0.77142857, 0.8       , 0.8       , 0.8       ,\n       0.88571429, 0.8       , 0.82857143, 0.8       , 0.8       ,\n       0.8       , 0.8       , 0.8       , 0.82857143, 0.8       ,\n       0.8       , 0.8       , 0.8       , 0.71428571, 0.71428571,\n       0.71428571, 0.8       , 0.82857143, 0.8       , 0.68571429,\n       0.68571429, 0.68571429, 0.77142857, 0.8       , 0.8       ,\n       0.68571429, 0.68571429, 0.68571429, 0.77142857, 0.8       ,\n       0.8       , 0.71428571, 0.8       , 0.8       , 0.77142857,\n       0.74285714, 0.8       , 0.77142857, 0.8       , 0.71428571,\n       0.8       , 0.8       , 0.8       ]), 'split1_test_score': array([0.79411765, 0.82352941, 0.82352941, 0.79411765, 0.82352941,\n       0.82352941, 0.85294118, 0.79411765, 0.85294118, 0.82352941,\n       0.82352941, 0.82352941, 0.82352941, 0.79411765, 0.82352941,\n       0.82352941, 0.82352941, 0.82352941, 0.82352941, 0.82352941,\n       0.82352941, 0.82352941, 0.85294118, 0.85294118, 0.82352941,\n       0.82352941, 0.82352941, 0.85294118, 0.88235294, 0.85294118,\n       0.82352941, 0.82352941, 0.82352941, 0.85294118, 0.88235294,\n       0.85294118, 0.70588235, 0.79411765, 0.76470588, 0.82352941,\n       0.76470588, 0.79411765, 0.82352941, 0.82352941, 0.76470588,\n       0.82352941, 0.79411765, 0.82352941]), 'split2_test_score': array([0.85294118, 0.85294118, 0.88235294, 0.88235294, 0.88235294,\n       0.91176471, 0.79411765, 0.85294118, 0.85294118, 0.85294118,\n       0.85294118, 0.88235294, 0.79411765, 0.85294118, 0.85294118,\n       0.85294118, 0.85294118, 0.88235294, 0.85294118, 0.88235294,\n       0.88235294, 0.94117647, 0.94117647, 0.94117647, 0.79411765,\n       0.79411765, 0.91176471, 0.94117647, 0.94117647, 0.91176471,\n       0.79411765, 0.79411765, 0.91176471, 0.94117647, 0.94117647,\n       0.91176471, 0.82352941, 0.85294118, 0.88235294, 0.88235294,\n       0.76470588, 0.85294118, 0.85294118, 0.85294118, 0.76470588,\n       0.85294118, 0.88235294, 0.88235294]), 'split3_test_score': array([0.94117647, 0.91176471, 0.88235294, 0.88235294, 0.82352941,\n       0.85294118, 0.91176471, 0.85294118, 0.88235294, 0.85294118,\n       0.85294118, 0.82352941, 0.94117647, 0.88235294, 0.88235294,\n       0.85294118, 0.85294118, 0.82352941, 0.79411765, 0.76470588,\n       0.79411765, 0.88235294, 0.88235294, 0.88235294, 0.85294118,\n       0.76470588, 0.73529412, 0.88235294, 0.85294118, 0.85294118,\n       0.85294118, 0.76470588, 0.73529412, 0.88235294, 0.85294118,\n       0.85294118, 0.82352941, 0.85294118, 0.88235294, 0.91176471,\n       0.94117647, 0.85294118, 0.88235294, 0.85294118, 0.91176471,\n       0.88235294, 0.88235294, 0.85294118]), 'split4_test_score': array([0.76470588, 0.76470588, 0.79411765, 0.76470588, 0.73529412,\n       0.79411765, 0.73529412, 0.76470588, 0.79411765, 0.73529412,\n       0.79411765, 0.79411765, 0.79411765, 0.76470588, 0.76470588,\n       0.73529412, 0.82352941, 0.79411765, 0.79411765, 0.79411765,\n       0.79411765, 0.73529412, 0.76470588, 0.76470588, 0.79411765,\n       0.79411765, 0.79411765, 0.76470588, 0.79411765, 0.88235294,\n       0.79411765, 0.79411765, 0.79411765, 0.76470588, 0.79411765,\n       0.88235294, 0.70588235, 0.79411765, 0.79411765, 0.82352941,\n       0.67647059, 0.70588235, 0.82352941, 0.76470588, 0.67647059,\n       0.76470588, 0.82352941, 0.70588235]), 'split5_test_score': array([0.85294118, 0.79411765, 0.88235294, 0.85294118, 0.88235294,\n       0.88235294, 0.82352941, 0.85294118, 0.85294118, 0.85294118,\n       0.91176471, 0.88235294, 0.82352941, 0.85294118, 0.88235294,\n       0.85294118, 0.91176471, 0.91176471, 0.85294118, 0.85294118,\n       0.85294118, 0.88235294, 0.91176471, 0.85294118, 0.85294118,\n       0.85294118, 0.85294118, 0.85294118, 0.85294118, 0.85294118,\n       0.85294118, 0.85294118, 0.85294118, 0.85294118, 0.85294118,\n       0.85294118, 0.79411765, 0.82352941, 0.85294118, 0.85294118,\n       0.85294118, 0.85294118, 0.91176471, 0.85294118, 0.85294118,\n       0.82352941, 0.94117647, 0.88235294]), 'split6_test_score': array([0.70588235, 0.67647059, 0.64705882, 0.70588235, 0.73529412,\n       0.67647059, 0.70588235, 0.61764706, 0.64705882, 0.70588235,\n       0.73529412, 0.64705882, 0.70588235, 0.61764706, 0.64705882,\n       0.70588235, 0.73529412, 0.64705882, 0.67647059, 0.64705882,\n       0.64705882, 0.70588235, 0.67647059, 0.67647059, 0.67647059,\n       0.64705882, 0.64705882, 0.70588235, 0.67647059, 0.67647059,\n       0.67647059, 0.64705882, 0.64705882, 0.70588235, 0.67647059,\n       0.67647059, 0.67647059, 0.67647059, 0.76470588, 0.76470588,\n       0.67647059, 0.67647059, 0.73529412, 0.67647059, 0.64705882,\n       0.64705882, 0.70588235, 0.64705882]), 'split7_test_score': array([0.85294118, 0.85294118, 0.88235294, 0.82352941, 0.88235294,\n       0.88235294, 0.79411765, 0.85294118, 0.88235294, 0.79411765,\n       0.85294118, 0.85294118, 0.79411765, 0.85294118, 0.88235294,\n       0.76470588, 0.85294118, 0.85294118, 0.82352941, 0.82352941,\n       0.82352941, 0.85294118, 0.85294118, 0.85294118, 0.82352941,\n       0.79411765, 0.79411765, 0.88235294, 0.88235294, 0.88235294,\n       0.82352941, 0.79411765, 0.79411765, 0.88235294, 0.88235294,\n       0.88235294, 0.73529412, 0.85294118, 0.91176471, 0.85294118,\n       0.76470588, 0.88235294, 0.85294118, 0.91176471, 0.79411765,\n       0.88235294, 0.88235294, 0.88235294]), 'split8_test_score': array([0.82352941, 0.76470588, 0.76470588, 0.79411765, 0.82352941,\n       0.70588235, 0.82352941, 0.79411765, 0.76470588, 0.79411765,\n       0.79411765, 0.70588235, 0.82352941, 0.76470588, 0.76470588,\n       0.79411765, 0.79411765, 0.70588235, 0.76470588, 0.73529412,\n       0.73529412, 0.79411765, 0.76470588, 0.73529412, 0.73529412,\n       0.67647059, 0.67647059, 0.76470588, 0.73529412, 0.73529412,\n       0.73529412, 0.67647059, 0.67647059, 0.76470588, 0.73529412,\n       0.73529412, 0.76470588, 0.79411765, 0.79411765, 0.82352941,\n       0.79411765, 0.79411765, 0.82352941, 0.79411765, 0.79411765,\n       0.79411765, 0.79411765, 0.79411765]), 'split9_test_score': array([0.82352941, 0.79411765, 0.82352941, 0.85294118, 0.82352941,\n       0.82352941, 0.82352941, 0.76470588, 0.85294118, 0.88235294,\n       0.82352941, 0.82352941, 0.82352941, 0.76470588, 0.85294118,\n       0.88235294, 0.82352941, 0.82352941, 0.82352941, 0.82352941,\n       0.76470588, 0.79411765, 0.79411765, 0.82352941, 0.76470588,\n       0.73529412, 0.76470588, 0.79411765, 0.79411765, 0.79411765,\n       0.76470588, 0.73529412, 0.76470588, 0.79411765, 0.79411765,\n       0.79411765, 0.76470588, 0.82352941, 0.76470588, 0.79411765,\n       0.79411765, 0.85294118, 0.76470588, 0.79411765, 0.79411765,\n       0.76470588, 0.79411765, 0.79411765]), 'mean_test_score': array([0.81831933, 0.80067227, 0.81823529, 0.81529412, 0.82117647,\n       0.82386555, 0.80647059, 0.79756303, 0.81823529, 0.80941176,\n       0.82411765, 0.80352941, 0.81235294, 0.79756303, 0.81529412,\n       0.80647059, 0.82705882, 0.80647059, 0.79201681, 0.78613445,\n       0.78319328, 0.82117647, 0.82697479, 0.81823529, 0.78033613,\n       0.75680672, 0.76857143, 0.8212605 , 0.82117647, 0.82411765,\n       0.78033613, 0.75680672, 0.76857143, 0.8212605 , 0.82117647,\n       0.82411765, 0.75084034, 0.80647059, 0.82117647, 0.83008403,\n       0.77722689, 0.80647059, 0.82420168, 0.81235294, 0.77142857,\n       0.80352941, 0.83      , 0.80647059]), 'std_test_score': array([0.06086471, 0.06105931, 0.070414  , 0.05249485, 0.0514294 ,\n       0.07467861, 0.05445229, 0.06912392, 0.06791252, 0.05288886,\n       0.04521766, 0.07084268, 0.05438871, 0.0727815 , 0.07074492,\n       0.05445229, 0.04411373, 0.0745668 , 0.05527247, 0.0674746 ,\n       0.06641314, 0.06743958, 0.07492335, 0.07282961, 0.0605546 ,\n       0.06476719, 0.07948816, 0.06839639, 0.0735741 , 0.06937437,\n       0.0605546 , 0.06476719, 0.07948816, 0.06839639, 0.0735741 ,\n       0.06937437, 0.04896536, 0.04945726, 0.05308477, 0.04425597,\n       0.07425496, 0.06462294, 0.0518955 , 0.06041666, 0.07464815,\n       0.06577723, 0.06386892, 0.0745668 ]), 'rank_test_score': array([17, 34, 18, 21, 15,  9, 26, 35, 18, 25,  6, 32, 23, 35, 21, 26,  3,\n       26, 37, 38, 39, 12,  4, 18, 40, 46, 44, 10, 12,  6, 40, 46, 44, 10,\n       12,  6, 48, 26, 15,  1, 42, 26,  5, 23, 43, 32,  2, 26]), 'split0_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.88888889, 0.88888889,\n       0.88888889, 0.88235294, 0.88562092, 0.88235294, 0.89869281,\n       0.90522876, 0.90522876, 0.88562092, 0.88562092, 0.88888889,\n       0.89869281, 0.90522876, 0.90522876, 0.88562092, 0.88562092,\n       0.88888889, 0.87254902, 0.89869281, 0.89542484, 0.89215686,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split1_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.85667752, 0.85667752,\n       0.85667752, 0.87947883, 0.87947883, 0.8762215 , 0.87296417,\n       0.87296417, 0.87296417, 0.90228013, 0.89250814, 0.90553746,\n       0.87296417, 0.87296417, 0.87296417, 0.90228013, 0.89250814,\n       0.90553746, 0.86319218, 0.88925081, 0.8990228 , 0.89250814,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split2_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.88599349, 0.88925081,\n       0.88599349, 0.88599349, 0.88925081, 0.8990228 , 0.90228013,\n       0.90879479, 0.88273616, 0.88599349, 0.89576547, 0.8990228 ,\n       0.90228013, 0.90879479, 0.88273616, 0.88599349, 0.89576547,\n       0.8990228 , 0.8762215 , 0.86970684, 0.8990228 , 0.88925081,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split3_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.89250814, 0.89576547,\n       0.90228013, 0.85993485, 0.85993485, 0.85993485, 0.8990228 ,\n       0.90228013, 0.91530945, 0.86644951, 0.87947883, 0.87947883,\n       0.8990228 , 0.90228013, 0.91530945, 0.86644951, 0.87947883,\n       0.87947883, 0.8534202 , 0.89576547, 0.90228013, 0.89250814,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split4_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.87947883, 0.87947883,\n       0.87947883, 0.88925081, 0.88925081, 0.88599349, 0.88925081,\n       0.88599349, 0.88599349, 0.89250814, 0.89576547, 0.89250814,\n       0.88925081, 0.88599349, 0.88599349, 0.89250814, 0.89576547,\n       0.89250814, 0.8762215 , 0.87947883, 0.90228013, 0.88925081,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split5_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.86319218, 0.86319218,\n       0.86319218, 0.86970684, 0.86970684, 0.86644951, 0.87947883,\n       0.87947883, 0.87947883, 0.90228013, 0.88599349, 0.8990228 ,\n       0.87947883, 0.87947883, 0.87947883, 0.90228013, 0.88599349,\n       0.8990228 , 0.87947883, 0.88925081, 0.8990228 , 0.88599349,\n       1.        , 1.        , 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'split6_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.89250814, 0.89576547,\n       0.89576547, 0.88273616, 0.88599349, 0.89576547, 0.90879479,\n       0.90553746, 0.90879479, 0.88273616, 0.88599349, 0.89576547,\n       0.90879479, 0.90553746, 0.90879479, 0.88273616, 0.88599349,\n       0.89576547, 0.88925081, 0.90228013, 0.90879479, 0.8990228 ,\n       1.        , 1.        , 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'split7_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.86970684, 0.86644951,\n       0.88273616, 0.88925081, 0.88925081, 0.88925081, 0.89576547,\n       0.89250814, 0.90228013, 0.89250814, 0.89250814, 0.89250814,\n       0.89576547, 0.89250814, 0.90228013, 0.89250814, 0.89250814,\n       0.89250814, 0.8990228 , 0.90553746, 0.90879479, 0.90228013,\n       1.        , 1.        , 1.        , 0.99674267, 1.        ,\n       1.        , 1.        , 1.        ]), 'split8_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.87296417, 0.87296417,\n       0.87947883, 0.87296417, 0.88273616, 0.88925081, 0.88273616,\n       0.90228013, 0.90553746, 0.90228013, 0.91205212, 0.90879479,\n       0.88273616, 0.90228013, 0.90553746, 0.90228013, 0.91205212,\n       0.90879479, 0.87296417, 0.89576547, 0.90553746, 0.90879479,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'split9_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.88599349, 0.88599349,\n       0.88599349, 0.87947883, 0.87296417, 0.87947883, 0.90228013,\n       0.90228013, 0.92508143, 0.88599349, 0.88925081, 0.90553746,\n       0.90228013, 0.90228013, 0.92508143, 0.88599349, 0.88925081,\n       0.90553746, 0.88925081, 0.90228013, 0.90879479, 0.90228013,\n       1.        , 1.        , 0.99674267, 1.        , 1.        ,\n       1.        , 1.        , 1.        ]), 'mean_train_score': array([1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 1.        , 1.        ,\n       1.        , 1.        , 1.        , 0.87879117, 0.87944263,\n       0.8820485 , 0.87911477, 0.88041877, 0.8823721 , 0.89312661,\n       0.8957346 , 0.89834047, 0.88986502, 0.89149369, 0.89670648,\n       0.89312661, 0.8957346 , 0.89834047, 0.88986502, 0.89149369,\n       0.89670648, 0.87715718, 0.89280088, 0.90289753, 0.89540461,\n       1.        , 1.        , 0.99967427, 0.9990228 , 1.        ,\n       1.        , 1.        , 1.        ]), 'std_train_score': array([0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.        , 0.        ,\n       0.        , 0.        , 0.        , 0.01196376, 0.01324514,\n       0.01299353, 0.00877991, 0.00942505, 0.01169417, 0.01096151,\n       0.01171912, 0.01619489, 0.0105994 , 0.00839991, 0.00840758,\n       0.01096151, 0.01171912, 0.01619489, 0.0105994 , 0.00839991,\n       0.00840758, 0.01255006, 0.01063129, 0.00461461, 0.00691786,\n       0.        , 0.        , 0.0009772 , 0.0014927 , 0.        ,\n       0.        , 0.        , 0.        ])}"}]