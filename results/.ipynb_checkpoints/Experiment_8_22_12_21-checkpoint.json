[{"experiment_name": "Experiment_8_22_12_21", "dataset_variant": "complete", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2610924369747899, "f1_micro": 0.2610924369747899, "f1_macro": 0.24711027068169927, "neg_root_mean_squared_error": -1.8138922729393692, "neg_mean_absolute_error": -1.3524369747899159}, "mean_train_score": {"accuracy": 0.3297311106853165, "f1_micro": 0.3297311106853165, "f1_macro": 0.2980611425828874, "neg_root_mean_squared_error": -1.0859122475479777, "neg_mean_absolute_error": -0.8302399352792149}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=13), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 0.0001}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 20, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=20), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=5), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=10), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=16), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=11), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=16), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}]", "cv_results": "{'fit_time': array([331.97477651, 334.79377794, 329.82577705, 301.89877915,\n       327.92578006, 346.36877942, 327.92778802, 200.15527248,\n       201.17545104, 205.28747535]), 'score_time': array([0.06500077, 0.08900023, 0.10499978, 0.08900166, 0.10499716,\n       0.06299806, 0.11299086, 0.05300117, 0.05300236, 0.04997706]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.22857143, 0.17647059, 0.32352941, 0.26470588, 0.08823529,\n       0.26470588, 0.20588235, 0.38235294, 0.32352941, 0.35294118]), 'train_accuracy': array([0.2745098 , 0.26384365, 0.33876221, 0.33876221, 0.29641694,\n       0.33224756, 0.41368078, 0.3029316 , 0.33876221, 0.39739414]), 'test_f1_micro': array([0.22857143, 0.17647059, 0.32352941, 0.26470588, 0.08823529,\n       0.26470588, 0.20588235, 0.38235294, 0.32352941, 0.35294118]), 'train_f1_micro': array([0.2745098 , 0.26384365, 0.33876221, 0.33876221, 0.29641694,\n       0.33224756, 0.41368078, 0.3029316 , 0.33876221, 0.39739414]), 'test_f1_macro': array([0.19960754, 0.14739229, 0.3122449 , 0.24936334, 0.11190476,\n       0.24828505, 0.19752628, 0.35600907, 0.29400758, 0.3547619 ]), 'train_f1_macro': array([0.24374433, 0.25411177, 0.29942617, 0.30706351, 0.26260106,\n       0.30264399, 0.37938822, 0.27164715, 0.28874727, 0.37123795]), 'test_neg_root_mean_squared_error': array([-1.59463386, -1.65387246, -1.69774938, -2.3136424 , -1.75733756,\n       -1.87867287, -1.75733756, -2.        , -1.9326909 , -1.55298574]), 'train_neg_root_mean_squared_error': array([-1.03532383, -1.14288623, -1.01294552, -0.99017979, -1.05237439,\n       -1.31639623, -0.98853361, -1.28382572, -0.99673735, -1.03991982]), 'test_neg_mean_absolute_error': array([-1.17142857, -1.32352941, -1.17647059, -1.70588235, -1.5       ,\n       -1.35294118, -1.38235294, -1.35294118, -1.44117647, -1.11764706]), 'train_neg_mean_absolute_error': array([-0.83660131, -0.9218241 , -0.77850163, -0.76547231, -0.83387622,\n       -0.97068404, -0.71009772, -0.96416938, -0.76547231, -0.75570033])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_8_22_12_21", "dataset_variant": "only_totals", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2785714285714286, "f1_micro": 0.2785714285714286, "f1_macro": 0.25721738578881437, "neg_root_mean_squared_error": -1.7505948403238285, "neg_mean_absolute_error": -1.2938655462184876}, "mean_train_score": {"accuracy": 0.3580986140384493, "f1_micro": 0.3580986140384493, "f1_macro": 0.327141955012726, "neg_root_mean_squared_error": -1.095857356198825, "neg_mean_absolute_error": -0.8165410572480892}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 0.1}]", "cv_results": "{'fit_time': array([253.39432406, 277.10387588, 279.33287477, 262.0938251 ,\n       273.94987464, 279.94887686, 269.05682731, 175.19788146,\n       172.70837426, 167.19135571]), 'score_time': array([0.08797956, 0.09500265, 0.08800077, 0.0849998 , 0.10800123,\n       0.07700229, 0.09699988, 0.04900384, 0.04998016, 0.05900002]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=RandomForestRegressor()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__clf__C...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.28571429, 0.23529412, 0.38235294, 0.20588235, 0.23529412,\n       0.20588235, 0.35294118, 0.29411765, 0.23529412, 0.35294118]), 'train_accuracy': array([0.3627451 , 0.3713355 , 0.32899023, 0.30618893, 0.40716612,\n       0.32247557, 0.36156352, 0.34527687, 0.36482085, 0.41042345]), 'test_f1_micro': array([0.28571429, 0.23529412, 0.38235294, 0.20588235, 0.23529412,\n       0.20588235, 0.35294118, 0.29411765, 0.23529412, 0.35294118]), 'train_f1_micro': array([0.3627451 , 0.3713355 , 0.32899023, 0.30618893, 0.40716612,\n       0.32247557, 0.36156352, 0.34527687, 0.36482085, 0.41042345]), 'test_f1_macro': array([0.24816453, 0.18809524, 0.35411255, 0.18764172, 0.21669759,\n       0.17496392, 0.3305837 , 0.28681319, 0.24272949, 0.34237191]), 'train_f1_macro': array([0.32551376, 0.33335204, 0.31519304, 0.27080204, 0.37753561,\n       0.28351535, 0.32866829, 0.32917517, 0.33331938, 0.37434487]), 'test_neg_root_mean_squared_error': array([-1.45405836, -1.66274047, -1.70638938, -2.3136424 , -1.59963231,\n       -1.89426379, -1.58113883, -2.14887111, -1.83911744, -1.30609431]), 'train_neg_root_mean_squared_error': array([-1.04631317, -1.07078467, -1.10668681, -1.10521417, -1.07533799,\n       -1.03521072, -1.41075441, -1.04772127, -1.05082564, -1.0097247 ]), 'test_neg_mean_absolute_error': array([-1.08571429, -1.29411765, -1.14705882, -1.76470588, -1.26470588,\n       -1.35294118, -1.14705882, -1.55882353, -1.38235294, -0.94117647]), 'train_neg_mean_absolute_error': array([-0.78104575, -0.79478827, -0.84690554, -0.86319218, -0.77198697,\n       -0.80456026, -0.99348534, -0.7980456 , -0.78501629, -0.72638436])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_8_22_12_21", "dataset_variant": "only_binary", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.24361344537815124, "f1_micro": 0.24361344537815124, "f1_macro": 0.2296435310721025, "neg_root_mean_squared_error": -1.7486045044801908, "neg_mean_absolute_error": -1.3257983193277312}, "mean_train_score": {"accuracy": 0.3704743352281195, "f1_micro": 0.3704743352281195, "f1_macro": 0.33313129910554473, "neg_root_mean_squared_error": -1.025224980706303, "neg_mean_absolute_error": -0.7644152775116562}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 0.1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'rbf', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 1}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.1, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=11), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__kernel': 'linear', 'estimator__clf__C': 2}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__kernel': 'sigmoid', 'estimator__clf__C': 2}]", "cv_results": "{'fit_time': array([271.45605826, 274.22705364, 272.82505703, 274.01605654,\n       277.44205451, 260.8520546 , 250.63805676, 178.6950202 ,\n       179.23602009, 170.73802042]), 'score_time': array([0.08200049, 0.08900237, 0.10700011, 0.06100035, 0.05900168,\n       0.07899952, 0.0839994 , 0.05099988, 0.05399919, 0.04799986]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=12)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=SVC(),\n                                                               regressor=Ra...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.17142857, 0.20588235, 0.32352941, 0.20588235, 0.11764706,\n       0.29411765, 0.26470588, 0.35294118, 0.23529412, 0.26470588]), 'train_accuracy': array([0.35620915, 0.3257329 , 0.39087948, 0.34201954, 0.33876221,\n       0.38110749, 0.36156352, 0.38436482, 0.37459283, 0.4495114 ]), 'test_f1_micro': array([0.17142857, 0.20588235, 0.32352941, 0.20588235, 0.11764706,\n       0.29411765, 0.26470588, 0.35294118, 0.23529412, 0.26470588]), 'train_f1_micro': array([0.35620915, 0.3257329 , 0.39087948, 0.34201954, 0.33876221,\n       0.38110749, 0.36156352, 0.38436482, 0.37459283, 0.4495114 ]), 'test_f1_macro': array([0.16746032, 0.15934066, 0.2976912 , 0.20068027, 0.13741497,\n       0.27835498, 0.26065363, 0.34268509, 0.22596372, 0.22619048]), 'train_f1_macro': array([0.32190501, 0.28385717, 0.37528538, 0.30737896, 0.29239442,\n       0.34916919, 0.31977671, 0.35258335, 0.34111958, 0.38784323]), 'test_neg_root_mean_squared_error': array([-1.52127766, -1.66274047, -1.79869234, -2.28164028, -1.62697843,\n       -1.87867287, -1.62697843, -1.90201132, -1.66274047, -1.52431277]), 'train_neg_root_mean_squared_error': array([-0.99179642, -1.01935663, -1.03521072, -1.27363646, -1.01775764,\n       -0.98026122, -1.04772127, -1.03835249, -1.00162734, -0.84652961]), 'test_neg_mean_absolute_error': array([-1.22857143, -1.29411765, -1.23529412, -1.73529412, -1.41176471,\n       -1.29411765, -1.23529412, -1.32352941, -1.29411765, -1.20588235]), 'train_neg_mean_absolute_error': array([-0.75490196, -0.79153094, -0.75895765, -0.93159609, -0.78175896,\n       -0.72638436, -0.78501629, -0.76547231, -0.74267101, -0.60586319])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestRegressor(criterion = 'squared_error'), clf = SVC())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 0.1]", "estimator__clf__kernel": "['linear', 'rbf', 'sigmoid']", "estimator__clf__C": "[1e-4, 1e-1, 1, 2]"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]