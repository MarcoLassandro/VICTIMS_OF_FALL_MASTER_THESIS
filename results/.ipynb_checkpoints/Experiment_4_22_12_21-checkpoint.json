[{"experiment_name": "Experiment_4_22_12_21", "dataset_variant": "complete", "estimator": "GranularBinaryClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.1584873949579832, "f1_micro": 0.1584873949579832, "f1_macro": 0.07190027911865114, "neg_root_mean_squared_error": -3.475621003766828, "neg_mean_absolute_error": -2.873865546218487}, "mean_train_score": {"accuracy": 0.17726469523748695, "f1_micro": 0.17726469523748695, "f1_macro": 0.08041796924062225, "neg_root_mean_squared_error": -3.4542498693932906, "neg_mean_absolute_error": -2.8367088203359523}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 21, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=21), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'sparse_cg', 'estimator__estimator__alpha': 1.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=12), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 2.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 0.5}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=8), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'sparse_cg', 'estimator__estimator__alpha': 0.125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'saga', 'estimator__estimator__alpha': 0.125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 11, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=11), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 0.015625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 20, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=20), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__alpha': 0.03125}]", "cv_results": "{'fit_time': array([48.42569041, 47.16866922, 46.8046701 , 46.47066188, 46.77069187,\n       46.42666793, 46.44966912, 25.42259264, 25.73560643, 25.41760659]), 'score_time': array([0.02400041, 0.01800203, 0.02500105, 0.02400136, 0.0189867 ,\n       0.02300215, 0.02300024, 0.01199961, 0.01199961, 0.01498365]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=11)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinary...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=20)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.11428571, 0.17647059, 0.17647059, 0.08823529, 0.20588235,\n       0.20588235, 0.17647059, 0.20588235, 0.08823529, 0.14705882]), 'train_accuracy': array([0.20261438, 0.15960912, 0.16938111, 0.17915309, 0.17263844,\n       0.17263844, 0.16938111, 0.17263844, 0.19218241, 0.18241042]), 'test_f1_micro': array([0.11428571, 0.17647059, 0.17647059, 0.08823529, 0.20588235,\n       0.20588235, 0.17647059, 0.20588235, 0.08823529, 0.14705882]), 'train_f1_micro': array([0.20261438, 0.15960912, 0.16938111, 0.17915309, 0.17263844,\n       0.17263844, 0.16938111, 0.17263844, 0.19218241, 0.18241042]), 'test_f1_macro': array([0.04931973, 0.07746032, 0.07826087, 0.03845016, 0.09254658,\n       0.1031746 , 0.07977737, 0.09273183, 0.03957947, 0.06770186]), 'train_f1_macro': array([0.09211916, 0.07175734, 0.07622275, 0.08057219, 0.07760683,\n       0.08029867, 0.07605595, 0.07838044, 0.08666418, 0.08450216]), 'test_neg_root_mean_squared_error': array([-3.52541791, -3.52720519, -3.48947999, -4.09087938, -3.40846697,\n       -3.02441049, -3.45985379, -3.11542651, -3.78075623, -3.33431358]), 'train_neg_root_mean_squared_error': array([-3.32793681, -3.6956705 , -3.44807929, -3.41437849, -3.46833043,\n       -3.38274988, -3.47958214, -3.41962148, -3.52099335, -3.38515633]), 'test_neg_mean_absolute_error': array([-2.88571429, -2.91176471, -2.88235294, -3.61764706, -2.79411765,\n       -2.38235294, -2.85294118, -2.47058824, -3.23529412, -2.70588235]), 'train_neg_mean_absolute_error': array([-2.69607843, -3.1237785 , -2.82736156, -2.79153094, -2.85016287,\n       -2.752443  , -2.86319218, -2.79478827, -2.91205212, -2.75570033])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__estimator__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_22_12_21", "dataset_variant": "only_totals", "estimator": "GranularBinaryClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.17016806722689076, "f1_micro": 0.17016806722689076, "f1_macro": 0.07677540768182654, "neg_root_mean_squared_error": -3.386265956489597, "neg_mean_absolute_error": -2.7792436974789916}, "mean_train_score": {"accuracy": 0.17367205296885313, "f1_micro": 0.17367205296885313, "f1_macro": 0.07860563112259357, "neg_root_mean_squared_error": -3.4172652411473314, "neg_mean_absolute_error": -2.795059717698154}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'sag', 'estimator__estimator__alpha': 0.0625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 0.015625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 0.03125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 0.03125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 32.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'sparse_cg', 'estimator__estimator__alpha': 0.5}]", "cv_results": "{'fit_time': array([46.71481919, 46.66181946, 46.2138195 , 45.93583012, 46.45681977,\n       45.49381995, 46.05779338, 25.83136082, 25.38736081, 25.37738013]), 'score_time': array([0.0239985 , 0.0129993 , 0.03100061, 0.02198792, 0.02399993,\n       0.023     , 0.03400159, 0.01299953, 0.01300073, 0.01300001]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=RidgeClassifier()))]),\n                   n_iter=20,\n                   param_distributions={'estimator__estimator__alp...\n                                        'feature_extraction': [MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1),\n                                                               MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.14285714, 0.20588235, 0.17647059, 0.08823529, 0.17647059,\n       0.20588235, 0.17647059, 0.20588235, 0.14705882, 0.17647059]), 'train_accuracy': array([0.17320261, 0.15960912, 0.16938111, 0.17915309, 0.16938111,\n       0.19218241, 0.16938111, 0.17589577, 0.17589577, 0.17263844]), 'test_f1_micro': array([0.14285714, 0.20588235, 0.17647059, 0.08823529, 0.17647059,\n       0.20588235, 0.17647059, 0.20588235, 0.14705882, 0.17647059]), 'train_f1_micro': array([0.17320261, 0.15960912, 0.16938111, 0.17915309, 0.16938111,\n       0.19218241, 0.16938111, 0.17589577, 0.17589577, 0.17263844]), 'test_f1_macro': array([0.05714286, 0.09589947, 0.07826087, 0.03896104, 0.07977737,\n       0.09586466, 0.07977737, 0.09437621, 0.06578947, 0.08190476]), 'train_f1_macro': array([0.07818174, 0.07163816, 0.07625912, 0.08083455, 0.0763178 ,\n       0.08897889, 0.07616815, 0.08054773, 0.07925519, 0.07787497]), 'test_neg_root_mean_squared_error': array([-3.66839786, -3.04379794, -3.48947999, -4.17626346, -3.40846697,\n       -2.90537028, -3.45985379, -2.94058818, -3.28096112, -3.48947999]), 'train_neg_root_mean_squared_error': array([-3.44944819, -3.57743562, -3.45374272, -3.37407244, -3.46269086,\n       -3.11191888, -3.47958214, -3.38515633, -3.48192167, -3.39668357]), 'test_neg_mean_absolute_error': array([-3.05714286, -2.38235294, -2.88235294, -3.73529412, -2.79411765,\n       -2.26470588, -2.85294118, -2.29411765, -2.64705882, -2.88235294]), 'train_neg_mean_absolute_error': array([-2.83333333, -2.98045603, -2.83387622, -2.74592834, -2.84364821,\n       -2.45928339, -2.86319218, -2.75570033, -2.86644951, -2.76872964])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__estimator__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_4_22_12_21", "dataset_variant": "only_binary", "estimator": "GranularBinaryClassifier(RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.15840336134453778, "f1_micro": 0.15840336134453778, "f1_macro": 0.07237236011939494, "neg_root_mean_squared_error": -3.5558976643637896, "neg_mean_absolute_error": -2.9666386554621846}, "mean_train_score": {"accuracy": 0.17139405164888974, "f1_micro": 0.17139405164888974, "f1_macro": 0.07782325611134776, "neg_root_mean_squared_error": -3.486444454680579, "neg_mean_absolute_error": -2.8752262034020992}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__alpha': 2.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 4.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__alpha': 4.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'sag', 'estimator__estimator__alpha': 1.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'saga', 'estimator__estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 0.0625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__estimator__tol': 0.001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 0.03125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'cholesky', 'estimator__estimator__alpha': 32.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__estimator__tol': 0.01, 'estimator__estimator__solver': 'sparse_cg', 'estimator__estimator__alpha': 0.125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__estimator__tol': 0.0001, 'estimator__estimator__solver': 'svd', 'estimator__estimator__alpha': 16.0}]", "cv_results": "{'fit_time': array([41.23748708, 43.30201435, 42.92503619, 42.5690155 , 42.71001172,\n       41.94101238, 41.73051691, 29.37928939, 29.81976604, 29.36876297]), 'score_time': array([0.02200127, 0.02299786, 0.02597547, 0.02400017, 0.02099991,\n       0.02399921, 0.02496839, 0.0179987 , 0.01699042, 0.01300335]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=1)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              GranularBinaryClassifier(estimator=Ridg...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.14285714, 0.14705882, 0.20588235, 0.08823529, 0.20588235,\n       0.17647059, 0.14705882, 0.17647059, 0.14705882, 0.14705882]), 'train_accuracy': array([0.17973856, 0.14332248, 0.16286645, 0.17915309, 0.17263844,\n       0.18566775, 0.17589577, 0.16286645, 0.17915309, 0.17263844]), 'test_f1_micro': array([0.14285714, 0.14705882, 0.20588235, 0.08823529, 0.20588235,\n       0.17647059, 0.14705882, 0.17647059, 0.14705882, 0.14705882]), 'train_f1_micro': array([0.17973856, 0.14332248, 0.16286645, 0.17915309, 0.17263844,\n       0.18566775, 0.17589577, 0.16286645, 0.17915309, 0.17263844]), 'test_f1_macro': array([0.05726601, 0.06583851, 0.09338281, 0.03845016, 0.09254658,\n       0.0833872 , 0.06658048, 0.09177489, 0.06578947, 0.06870748]), 'train_f1_macro': array([0.08137408, 0.06393755, 0.07327249, 0.08057219, 0.07764099,\n       0.08409811, 0.07928611, 0.07665209, 0.08076919, 0.08062977]), 'test_neg_root_mean_squared_error': array([-3.89505181, -3.67423461, -3.48947999, -4.09087938, -3.40846697,\n       -3.19466467, -3.51048849, -3.28096112, -3.28096112, -3.73378849]), 'train_neg_root_mean_squared_error': array([-3.54476508, -3.76379114, -3.66780162, -3.41437849, -3.46269086,\n       -3.31858845, -3.44571679, -3.45939687, -3.42533196, -3.36198328]), 'test_neg_mean_absolute_error': array([-3.34285714, -3.08823529, -2.88235294, -3.61764706, -2.79411765,\n       -2.55882353, -2.91176471, -2.64705882, -2.64705882, -3.17647059]), 'train_neg_mean_absolute_error': array([-2.94444444, -3.20846906, -3.08794788, -2.79153094, -2.84364821,\n       -2.68078176, -2.82410423, -2.84039088, -2.80130293, -2.72964169])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "GranularBinaryClassifier(RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedPCA(mask=mask), MaskedSVD(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__estimator__tol": "[1e-4, 1e-3, 1e-2]", "estimator__estimator__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]