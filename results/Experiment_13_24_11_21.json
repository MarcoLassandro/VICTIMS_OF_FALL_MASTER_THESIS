[{"experiment_name": "Experiment_13_24_11_21", "dataset_variant": "complete", "estimator": "LogisticIT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.791553602525417, "accuracy": 0.26117647058823523, "f1_micro": 0.26117647058823523, "f1_macro": 0.2165167033565972, "neg_mean_absolute_error": -1.3284873949579832}, "mean_train_score": {"neg_root_mean_squared_error": -1.70396158267499, "accuracy": 0.28053160460709803, "f1_micro": 0.28053160460709803, "f1_macro": 0.2380985702530855, "neg_mean_absolute_error": -1.2580890336590662}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 23, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=23), 'estimator__alpha': 32.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 12, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=12), 'estimator__alpha': 32.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__alpha': 32.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 4.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__alpha': 8.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__alpha': 32.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True])), 'estimator__alpha': 16.0}]", "cv_results": "{'fit_time': array([92.25005507, 93.92605877, 95.88105798, 95.15105438, 93.25605559,\n       91.54805732, 94.69105434, 91.54699683, 91.15701747, 87.59199357]), 'score_time': array([0.06099987, 0.06199932, 0.02300286, 0.03499961, 0.10299945,\n       0.04399848, 0.09500003, 0.00400209, 0.00299978, 0.00400043]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n                                                                         n_components=23)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=7)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_i...\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.70712791, -1.35038121, -1.92506684, -2.32631999, -1.46528455,\n       -1.72353945, -1.70638938, -2.11437656, -1.82305497, -1.77399516]), 'train_neg_root_mean_squared_error': array([-1.70351425, -1.69305922, -1.69209698, -1.72922758, -1.74796298,\n       -1.68631201, -1.66688381, -1.66786059, -1.71314139, -1.73955702]), 'test_accuracy': array([0.2       , 0.26470588, 0.23529412, 0.17647059, 0.35294118,\n       0.32352941, 0.23529412, 0.23529412, 0.29411765, 0.29411765]), 'train_accuracy': array([0.23202614, 0.22149837, 0.28338762, 0.3029316 , 0.31596091,\n       0.29641694, 0.28664495, 0.33876221, 0.23778502, 0.28990228]), 'test_f1_micro': array([0.2       , 0.26470588, 0.23529412, 0.17647059, 0.35294118,\n       0.32352941, 0.23529412, 0.23529412, 0.29411765, 0.29411765]), 'train_f1_micro': array([0.23202614, 0.22149837, 0.28338762, 0.3029316 , 0.31596091,\n       0.29641694, 0.28664495, 0.33876221, 0.23778502, 0.28990228]), 'test_f1_macro': array([0.12083149, 0.17967033, 0.19255625, 0.16875477, 0.32732426,\n       0.28552876, 0.24242424, 0.2468254 , 0.15873016, 0.24252137]), 'train_f1_macro': array([0.15715393, 0.15401668, 0.26870333, 0.28430711, 0.29169573,\n       0.2623309 , 0.25241267, 0.31056638, 0.13375588, 0.2660431 ]), 'test_neg_mean_absolute_error': array([-1.31428571, -1.05882353, -1.41176471, -1.76470588, -1.02941176,\n       -1.14705882, -1.32352941, -1.64705882, -1.32352941, -1.26470588]), 'train_neg_mean_absolute_error': array([-1.33333333, -1.33550489, -1.247557  , -1.23778502, -1.25081433,\n       -1.22801303, -1.20846906, -1.16612378, -1.31270358, -1.26058632])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticIT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "accuracy", "f1_micro", "f1_macro", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_13_24_11_21", "dataset_variant": "only_totals", "estimator": "LogisticIT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.743927624152628, "accuracy": 0.3105042016806722, "f1_micro": 0.3105042016806722, "f1_macro": 0.2764120520002873, "neg_mean_absolute_error": -1.2442857142857142}, "mean_train_score": {"neg_root_mean_squared_error": -1.7102001981094563, "accuracy": 0.3046549998935514, "f1_micro": 0.3046549998935514, "f1_macro": 0.2766138192979859, "neg_mean_absolute_error": -1.2333173660343615}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 2.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 16.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 4.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 32.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 8.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 1.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])), 'estimator__alpha': 16.0}, {'scaler': RobustScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 1.0}]", "cv_results": "{'fit_time': array([72.38822126, 75.19621825, 73.84921646, 75.89421487, 75.11021614,\n       71.15821433, 74.0772121 , 70.464993  , 70.75899673, 69.26399922]), 'score_time': array([0.08400083, 0.02100205, 0.09300017, 0.02699947, 0.03499913,\n       0.15800047, 0.09700131, 0.0040009 , 0.00300002, 0.00299835]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   param_distributions={'estimator__alpha': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2...\n                                                                         n_components=3),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.50237907, -1.36122782, -1.89426379, -2.26222171, -1.44507276,\n       -1.80684971, -1.58113883, -2.0219385 , -1.95538472, -1.60879933]), 'train_neg_root_mean_squared_error': array([-1.76846006, -1.69498206, -1.69594266, -1.65117666, -1.74609849,\n       -1.71599109, -1.76003405, -1.65216273, -1.67759716, -1.73955702]), 'test_accuracy': array([0.42857143, 0.29411765, 0.29411765, 0.23529412, 0.32352941,\n       0.26470588, 0.29411765, 0.23529412, 0.29411765, 0.44117647]), 'train_accuracy': array([0.29084967, 0.26058632, 0.33224756, 0.30618893, 0.3029316 ,\n       0.29641694, 0.32899023, 0.31921824, 0.3029316 , 0.30618893]), 'test_f1_micro': array([0.42857143, 0.29411765, 0.29411765, 0.23529412, 0.32352941,\n       0.26470588, 0.29411765, 0.23529412, 0.29411765, 0.44117647]), 'train_f1_micro': array([0.29084967, 0.26058632, 0.33224756, 0.30618893, 0.3029316 ,\n       0.29641694, 0.32899023, 0.31921824, 0.3029316 , 0.30618893]), 'test_f1_macro': array([0.38452103, 0.22829234, 0.25964036, 0.20634921, 0.26534735,\n       0.22144205, 0.29134833, 0.24504832, 0.2670068 , 0.39512472]), 'train_f1_macro': array([0.26349136, 0.21472746, 0.30782796, 0.28451849, 0.2755398 ,\n       0.26901732, 0.30036234, 0.29365153, 0.28010293, 0.276899  ]), 'test_neg_mean_absolute_error': array([-0.94285714, -1.02941176, -1.29411765, -1.64705882, -1.02941176,\n       -1.26470588, -1.20588235, -1.55882353, -1.41176471, -1.05882353]), 'train_neg_mean_absolute_error': array([-1.28431373, -1.29641694, -1.2019544 , -1.18241042, -1.25081433,\n       -1.25081433, -1.24104235, -1.17263844, -1.21172638, -1.24104235])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticIT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "accuracy", "f1_micro", "f1_macro", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_13_24_11_21", "dataset_variant": "only_binary", "estimator": "LogisticIT()", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.7519056967128885, "accuracy": 0.25521008403361345, "f1_micro": 0.25521008403361345, "f1_macro": 0.21205226195495985, "neg_mean_absolute_error": -1.3256302521008405}, "mean_train_score": {"neg_root_mean_squared_error": -1.6843678003945157, "accuracy": 0.27889761767899346, "f1_micro": 0.27889761767899346, "f1_macro": 0.23864254244169336, "neg_mean_absolute_error": -1.2486417151008071}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__alpha': 32.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=9), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 16, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=16), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 18, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=18), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 10, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=10), 'estimator__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=14), 'estimator__alpha': 16.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__alpha': 16.0}]", "cv_results": "{'fit_time': array([86.62053299, 89.4665308 , 85.66352773, 86.3455267 , 87.4535265 ,\n       85.55552816, 87.54353046, 82.33500147, 82.8039968 , 83.71201777]), 'score_time': array([0.07900071, 0.0200007 , 0.10099888, 0.11999869, 0.03299952,\n       0.07900047, 0.04799867, 0.00700068, 0.00399947, 0.00399828]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=8)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=19)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=16)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=18)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=10)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=14)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator', LogisticIT())]),\n                   n_iter=100, n_jobs=7,\n                   par...\n        True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [MinMaxScaler(),\n                                                   StandardScaler(),\n                                                   RobustScaler()]},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'accuracy',\n                            'f1_micro', 'f1_macro', 'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.64750894, -1.17573506, -1.74052054, -2.30089497, -1.48522131,\n       -1.5718105 , -1.765686  , -2.02919862, -1.95538472, -1.84709629]), 'train_neg_root_mean_squared_error': array([-1.6793634 , -1.69305922, -1.69690272, -1.71314139, -1.73486944,\n       -1.60211586, -1.67370933, -1.67370933, -1.63631428, -1.74049302]), 'test_accuracy': array([0.22857143, 0.35294118, 0.26470588, 0.17647059, 0.23529412,\n       0.35294118, 0.20588235, 0.17647059, 0.29411765, 0.26470588]), 'train_accuracy': array([0.21568627, 0.24429967, 0.28013029, 0.30944625, 0.28664495,\n       0.28338762, 0.28990228, 0.31270358, 0.28013029, 0.28664495]), 'test_f1_micro': array([0.22857143, 0.35294118, 0.26470588, 0.17647059, 0.23529412,\n       0.35294118, 0.20588235, 0.17647059, 0.29411765, 0.26470588]), 'train_f1_micro': array([0.21568627, 0.24429967, 0.28013029, 0.30944625, 0.28664495,\n       0.28338762, 0.28990228, 0.31270358, 0.28013029, 0.28664495]), 'test_f1_macro': array([0.13678805, 0.31285241, 0.19394331, 0.17452678, 0.20119048,\n       0.34066354, 0.20039683, 0.1547619 , 0.23728965, 0.16810967]), 'train_f1_macro': array([0.14066688, 0.21044388, 0.24866682, 0.28983088, 0.25752604,\n       0.22977922, 0.24382961, 0.28804896, 0.2360044 , 0.24162875]), 'test_neg_mean_absolute_error': array([-1.28571429, -0.85294118, -1.32352941, -1.76470588, -1.14705882,\n       -1.11764706, -1.41176471, -1.58823529, -1.41176471, -1.35294118]), 'train_neg_mean_absolute_error': array([-1.33006536, -1.28990228, -1.25081433, -1.23452769, -1.27687296,\n       -1.17915309, -1.23127036, -1.20521173, -1.21172638, -1.27687296])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "LogisticIT()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 100, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[MinMaxScaler(), StandardScaler(), RobustScaler()]", "estimator__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["neg_root_mean_squared_error", "accuracy", "f1_micro", "f1_macro", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]