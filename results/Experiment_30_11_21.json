[{"experiment_name": "Experiment_30_11_21", "dataset_variant": "complete", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6127863395140434, "r2": 0.3235055719333765, "neg_mean_absolute_error": -1.251723760964104}, "mean_train_score": {"neg_root_mean_squared_error": -1.474836419009239, "r2": 0.44202689048267346, "neg_mean_absolute_error": -1.1094343525244161}, "best_params": "[{'feature_extraction__n_components': 4, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 16, 'estimator__tol': 0.0001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.01, 'estimator__C': 2.0}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 0.25}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.01, 'estimator__C': 1.0}, {'feature_extraction__n_components': 6, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 19, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 1e-05, 'estimator__C': 0.0625}, {'feature_extraction__n_components': 21, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.001, 'estimator__C': 2.0}, {'feature_extraction__n_components': 6, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.001, 'estimator__C': 0.03125}]", "cv_results": "{'fit_time': array([17.3960433 , 14.54705048, 13.85101271, 14.12399626, 15.08399773,\n       14.8759985 , 16.45199561,  8.55800152,  8.95400095,  9.37999654]), 'score_time': array([0.00699687, 0.00599456, 0.01099968, 0.08199644, 0.00999928,\n       0.02599692, 0.00400019, 0.00400209, 0.00299978, 0.00200248]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20...\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.33052836, -1.40359861, -1.81183801, -1.84444483, -1.36540304,\n       -1.60168716, -1.48689861, -1.95056655, -1.7251863 , -1.60771194]), 'train_neg_root_mean_squared_error': array([-1.56504946, -1.27307365, -1.52001596, -1.40929995, -1.57293727,\n       -1.31526404, -1.54936738, -1.50646718, -1.5110542 , -1.52583511]), 'test_r2': array([0.5693756 , 0.5037213 , 0.15444138, 0.15553251, 0.51514955,\n       0.3328224 , 0.42502524, 0.01649271, 0.23064277, 0.33185225]), 'train_r2': array([0.37098345, 0.58540946, 0.41051997, 0.49121424, 0.36950256,\n       0.5591545 , 0.38825654, 0.42124509, 0.41771524, 0.40626788]), 'test_neg_mean_absolute_error': array([-1.0219369 , -1.01361661, -1.40781373, -1.48589915, -1.07605968,\n       -1.2052286 , -1.13750398, -1.59874452, -1.29691486, -1.27351958]), 'train_neg_mean_absolute_error': array([-1.20225514, -0.85130242, -1.16399102, -1.11837843, -1.20440381,\n       -0.92828529, -1.19070084, -1.11555586, -1.10917487, -1.21029585])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_30_11_21", "dataset_variant": "only_totals", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5422016810110821, "r2": 0.3768974239621529, "neg_mean_absolute_error": -1.2120804800261593}, "mean_train_score": {"neg_root_mean_squared_error": -1.4970956880652904, "r2": 0.42594849164894144, "neg_mean_absolute_error": -1.1391504892158815}, "best_params": "[{'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.1, 'estimator__C': 0.25}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 4.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 0.0625}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 32.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.1, 'estimator__C': 0.03125}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.0001, 'estimator__C': 8.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.01, 'estimator__C': 0.5}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 2.0}]", "cv_results": "{'fit_time': array([10.3970015 , 14.48699665, 10.08700037,  9.5500021 , 10.38399839,\n       11.19501066, 11.00400805,  7.11400175,  9.91101193,  6.64499497]), 'score_time': array([0.04599905, 0.00299978, 0.00299621, 0.06999826, 0.00399995,\n       0.00799704, 0.06200242, 0.05199671, 0.00599098, 0.00800037]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_distributions={'estimator__C': array([1.5625e-02, 3.1250e-02, 6.2500e-02, 1.2500e-01, 2.5...\n       1.6000e+01, 3.2000e+01]),\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([1, 2, 3])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.38417735, -1.40593428, -1.77201834, -1.92758772, -1.31351326,\n       -1.45528785, -1.38023335, -1.87888862, -1.72394993, -1.18042611]), 'train_neg_root_mean_squared_error': array([-1.49760439, -1.58544625, -1.53251021, -1.35694674, -1.57242994,\n       -1.54031868, -1.58283297, -1.40504061, -1.52903075, -1.36879634]), 'test_r2': array([0.53394857, 0.50206825, 0.1911995 , 0.07768367, 0.55130111,\n       0.44921276, 0.50455996, 0.08744697, 0.2317451 , 0.63980834]), 'train_r2': array([0.42402962, 0.35699347, 0.4007893 , 0.52831325, 0.36990921,\n       0.39538115, 0.3615444 , 0.49655377, 0.4037783 , 0.52219245]), 'test_neg_mean_absolute_error': array([-1.06734794, -1.07465374, -1.35295021, -1.5079505 , -1.03533369,\n       -1.14280952, -1.06650577, -1.56102613, -1.36547122, -0.94675608]), 'train_neg_mean_absolute_error': array([-1.18019421, -1.22774037, -1.20409224, -0.98555815, -1.18324513,\n       -1.23303535, -1.23394857, -1.063111  , -1.15485487, -0.925725  ])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_30_11_21", "dataset_variant": "only_binary", "estimator": "SVR()", "task": "Regression", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.5698339642734382, "r2": 0.35984559645861597, "neg_mean_absolute_error": -1.251711589052113}, "mean_train_score": {"neg_root_mean_squared_error": -1.4408456555754217, "r2": 0.46556678230208914, "neg_mean_absolute_error": -1.0809217013204595}, "best_params": "[{'feature_extraction__n_components': 8, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.25}, {'feature_extraction__n_components': 3, 'estimator__tol': 0.0001, 'estimator__kernel': 'linear', 'estimator__epsilon': 1e-05, 'estimator__C': 2.0}, {'feature_extraction__n_components': 12, 'estimator__tol': 0.001, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.001, 'estimator__C': 0.125}, {'feature_extraction__n_components': 13, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__kernel': 'linear', 'estimator__epsilon': 0.01, 'estimator__C': 2.0}, {'feature_extraction__n_components': 13, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 1.0}, {'feature_extraction__n_components': 8, 'estimator__tol': 0.001, 'estimator__kernel': 'sigmoid', 'estimator__epsilon': 0.1, 'estimator__C': 0.25}, {'feature_extraction__n_components': 5, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.0001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 8, 'estimator__tol': 0.001, 'estimator__kernel': 'rbf', 'estimator__epsilon': 0.001, 'estimator__C': 0.5}, {'feature_extraction__n_components': 2, 'estimator__tol': 0.01, 'estimator__kernel': 'rbf', 'estimator__epsilon': 1e-05, 'estimator__C': 0.5}]", "cv_results": "{'fit_time': array([21.91656637, 16.42651772, 16.40551949, 27.74855852, 23.43655801,\n       14.99051738, 20.54351664, 12.42805099, 11.00803208, 11.10403919]), 'score_time': array([0.05400062, 0.00400376, 0.00300002, 0.00299978, 0.00700164,\n       0.00600004, 0.10399675, 0.01898956, 0.00699973, 0.00400639]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              GroupedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', RobustScaler()),\n                                             ('estimator', SVR())]),\n                   n_iter=20, n_jobs=7,\n                   param_dist...\n                                        'estimator__epsilon': [0.1, 0.01, 0.001,\n                                                               0.0001, 1e-05],\n                                        'estimator__kernel': ['linear', 'poly',\n                                                              'rbf',\n                                                              'sigmoid'],\n                                        'estimator__tol': [0.0001, 0.001, 0.01],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n                   refit='neg_root_mean_squared_error', return_train_score=True,\n                   scoring=['neg_root_mean_squared_error', 'r2',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_neg_root_mean_squared_error': array([-1.41966483, -1.34175034, -1.79686187, -1.95287259, -1.35874416,\n       -1.55354896, -1.53343885, -1.81508607, -1.51988576, -1.4064862 ]), 'train_neg_root_mean_squared_error': array([-1.46602982, -1.57623181, -1.51154243, -1.20457629, -1.57790233,\n       -1.24698908, -1.60173193, -1.37358885, -1.3828379 , -1.46702612]), 'test_r2': array([0.50974502, 0.54649383, 0.16836191, 0.05332825, 0.51986712,\n       0.37232337, 0.38846827, 0.14837091, 0.40285757, 0.48863972]), 'train_r2': array([0.44806041, 0.36444592, 0.41707392, 0.62829646, 0.36551588,\n       0.6037349 , 0.34620712, 0.51884073, 0.51233915, 0.45115333]), 'test_neg_mean_absolute_error': array([-1.2301105 , -1.03342748, -1.36648467, -1.50954381, -1.06684617,\n       -1.14148457, -1.25558941, -1.55460938, -1.24296617, -1.11605374]), 'train_neg_mean_absolute_error': array([-1.16135311, -1.20799861, -1.14300348, -0.79645031, -1.21028019,\n       -0.8418751 , -1.28619689, -1.01684281, -1.0382465 , -1.10697001])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedPCA(mask=mask)", "scaler": "RobustScaler()", "estimator": "SVR()"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__kernel": "['linear', 'poly', 'rbf', 'sigmoid']", "estimator__C": "2.0**np.arange(-6, +6)", "estimator__epsilon": "[0.1, 1e-2, 1e-3, 1e-4, 1e-5]", "estimator__tol": "[1e-4, 1e-3, 1e-2]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]