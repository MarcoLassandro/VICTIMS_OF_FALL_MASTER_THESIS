[{"experiment_name": "Experiment_6_22_12_21", "dataset_variant": "complete", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2610084033613445, "f1_micro": 0.2610084033613445, "f1_macro": 0.22459767749573145, "neg_root_mean_squared_error": -2.062799372391342, "neg_mean_absolute_error": -1.50781512605042}, "mean_train_score": {"accuracy": 0.41186157416278135, "f1_micro": 0.41186157416278124, "f1_macro": 0.391475753148467, "neg_root_mean_squared_error": -0.9330872224955812, "neg_mean_absolute_error": -0.6565423346320071}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=3), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'saga', 'estimator__clf__alpha': 0.0625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 24, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=24), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 4.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 4.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=4), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 8.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True])), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 0.125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 0.125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 14, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=14), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=13), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 0.03125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 17, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=17), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'svd', 'estimator__clf__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 9, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n          n_components=9), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 4.0}]", "cv_results": "{'fit_time': array([310.05856419, 317.2115643 , 310.30056143, 334.72056246,\n       335.92556477, 312.45056295, 292.97665238, 208.661551  ,\n       199.37763333, 204.10769033]), 'score_time': array([0.06900001, 0.09999752, 0.0679996 , 0.05999899, 0.06099963,\n       0.08200121, 0.13999104, 0.06099701, 0.07404971, 0.04100084]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=9)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimat...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True]),\n                                                                         n_components=9)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.25714286, 0.26470588, 0.35294118, 0.11764706, 0.23529412,\n       0.35294118, 0.23529412, 0.32352941, 0.17647059, 0.29411765]), 'train_accuracy': array([0.41503268, 0.43322476, 0.38436482, 0.42019544, 0.40716612,\n       0.42345277, 0.40716612, 0.43322476, 0.39087948, 0.40390879]), 'test_f1_micro': array([0.25714286, 0.26470588, 0.35294118, 0.11764706, 0.23529412,\n       0.35294118, 0.23529412, 0.32352941, 0.17647059, 0.29411765]), 'train_f1_micro': array([0.41503268, 0.43322476, 0.38436482, 0.42019544, 0.40716612,\n       0.42345277, 0.40716612, 0.43322476, 0.39087948, 0.40390879]), 'test_f1_macro': array([0.19392637, 0.25869131, 0.2785964 , 0.07936508, 0.20748299,\n       0.32995622, 0.21131646, 0.26782107, 0.18707483, 0.23174603]), 'train_f1_macro': array([0.40243055, 0.41941345, 0.3666908 , 0.40753997, 0.39271621,\n       0.39794311, 0.37779932, 0.40348434, 0.3687307 , 0.37800909]), 'test_neg_root_mean_squared_error': array([-1.81265393, -1.72353945, -2.03643287, -2.60655283, -1.90201132,\n       -2.12132034, -2.01465221, -2.15570379, -1.94784949, -2.30727749]), 'train_neg_root_mean_squared_error': array([-0.76483156, -0.75284477, -0.78462423, -0.76144899, -0.76995706,\n       -0.75930707, -1.35059403, -0.75284477, -1.35059403, -1.28382572]), 'test_neg_mean_absolute_error': array([-1.34285714, -1.26470588, -1.32352941, -2.08823529, -1.44117647,\n       -1.38235294, -1.58823529, -1.52941176, -1.5       , -1.61764706]), 'train_neg_mean_absolute_error': array([-0.58496732, -0.56677524, -0.61563518, -0.57980456, -0.59283388,\n       -0.57654723, -0.82736156, -0.56677524, -0.84039088, -0.81433225])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 1e-2]", "estimator__clf__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__clf__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_22_12_21", "dataset_variant": "only_totals", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.29294117647058826, "f1_micro": 0.2929411764705883, "f1_macro": 0.25174435275275614, "neg_root_mean_squared_error": -1.9768831481906286, "neg_mean_absolute_error": -1.4057142857142855}, "mean_train_score": {"accuracy": 0.3883875157011773, "f1_micro": 0.3883875157011773, "f1_macro": 0.37140262712856453, "neg_root_mean_squared_error": -0.917933900011586, "neg_mean_absolute_error": -0.6749036639628707}, "best_params": "[{'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'svd', 'estimator__clf__alpha': 0.0625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'saga', 'estimator__clf__alpha': 0.0625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 0.03125}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 0.015625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'svd', 'estimator__clf__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'saga', 'estimator__clf__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'saga', 'estimator__clf__alpha': 0.5}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 0.125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 3, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=3), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 2.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 8.0}]", "cv_results": "{'fit_time': array([305.18019438, 305.92820859, 281.33221078, 281.85020828,\n       293.67020512, 298.22420931, 307.02401328, 195.40282202,\n       189.88082576, 192.38789725]), 'score_time': array([0.07800174, 0.07299805, 0.08999848, 0.0789988 , 0.09000182,\n       0.08799767, 0.06800008, 0.04800272, 0.06699991, 0.03999996]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True])),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=3)],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),\n                                                               regressor=RandomForestClassifier(criterion='entropy')))]),\n                   n_iter=20,\n                   param_d...\n                                        'feature_extraction': [MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True]),\n                                                                         n_components=4),\n                                                               MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([1, 2, 3, 4]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.4       , 0.35294118, 0.32352941, 0.20588235, 0.26470588,\n       0.26470588, 0.35294118, 0.23529412, 0.20588235, 0.32352941]), 'train_accuracy': array([0.3496732 , 0.41368078, 0.38762215, 0.38762215, 0.41368078,\n       0.41042345, 0.34201954, 0.36807818, 0.36807818, 0.44299674]), 'test_f1_micro': array([0.4       , 0.35294118, 0.32352941, 0.20588235, 0.26470588,\n       0.26470588, 0.35294118, 0.23529412, 0.20588235, 0.32352941]), 'train_f1_micro': array([0.3496732 , 0.41368078, 0.38762215, 0.38762215, 0.41368078,\n       0.41042345, 0.34201954, 0.36807818, 0.36807818, 0.44299674]), 'test_f1_macro': array([0.36110444, 0.29074357, 0.28110937, 0.13968254, 0.24264069,\n       0.24047619, 0.31317571, 0.20154845, 0.1875109 , 0.25945166]), 'train_f1_macro': array([0.31752156, 0.40135551, 0.37370906, 0.3716164 , 0.40094009,\n       0.39933414, 0.31058414, 0.35252654, 0.35611429, 0.43032453]), 'test_neg_root_mean_squared_error': array([-1.63007449, -1.79049779, -2.28164028, -2.2557117 , -2.03643287,\n       -1.72353945, -1.67156144, -2.413199  , -2.242635  , -1.72353945]), 'train_neg_root_mean_squared_error': array([-1.45296631, -0.77206943, -0.78876475, -0.78254575, -0.76571484,\n       -0.76783888, -1.51324231, -0.79493511, -0.79493511, -0.74632651]), 'test_neg_mean_absolute_error': array([-1.05714286, -1.20588235, -1.5       , -1.73529412, -1.44117647,\n       -1.20588235, -1.20588235, -1.82352941, -1.67647059, -1.20588235]), 'train_neg_mean_absolute_error': array([-0.95424837, -0.58957655, -0.61563518, -0.61237785, -0.58631922,\n       -0.58957655, -0.98045603, -0.63192182, -0.63192182, -0.55700326])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 1e-2]", "estimator__clf__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__clf__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_6_22_12_21", "dataset_variant": "only_binary", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())", "task": "Classification", "hp_optimizer": "RandomizeSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"accuracy": 0.2436974789915966, "f1_micro": 0.2436974789915966, "f1_macro": 0.200440705419697, "neg_root_mean_squared_error": -2.0380705693515764, "neg_mean_absolute_error": -1.521764705882353}, "mean_train_score": {"accuracy": 0.41935023738051147, "f1_micro": 0.41935023738051147, "f1_macro": 0.3971059434361563, "neg_root_mean_squared_error": -0.972980598985627, "neg_mean_absolute_error": -0.6689233782546679}, "best_params": "[{'scaler': StandardScaler(), 'feature_extraction__n_components': 1, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=1), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 10, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 32.0}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 2, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True])), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 0.0625}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 19, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=19), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'svd', 'estimator__clf__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 16.0}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 13, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=13), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 0.125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 6, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=6), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 20, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 0.25}, {'scaler': MinMaxScaler(), 'feature_extraction__n_components': 7, 'feature_extraction': MaskedPCA(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=7), 'estimator__regressor__n_estimators': 250, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sparse_cg', 'estimator__clf__alpha': 0.25}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 8, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=8), 'estimator__regressor__n_estimators': 150, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.001, 'estimator__clf__solver': 'sag', 'estimator__clf__alpha': 0.03125}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 4, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=4), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 5, 'estimator__clf__tol': 0.0001, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 0.015625}, {'scaler': StandardScaler(), 'feature_extraction__n_components': 5, 'feature_extraction': MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n          n_components=5), 'estimator__regressor__n_estimators': 200, 'estimator__regressor__max_depth': 15, 'estimator__clf__tol': 0.01, 'estimator__clf__solver': 'cholesky', 'estimator__clf__alpha': 16.0}]", "cv_results": "{'fit_time': array([305.5712409 , 299.03323722, 327.21438932, 331.30810475,\n       335.93813562, 338.84313393, 331.46713591, 239.85918808,\n       238.38746357, 222.80513549]), 'score_time': array([0.08800054, 0.09301138, 0.13899946, 0.07100034, 0.08299923,\n       0.07200122, 0.10299945, 0.05199528, 0.05800676, 0.0510006 ]), 'estimator': [RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=6)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=13)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]),\n                                                                         n_components=7)],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1), RandomizedSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n                   estimator=Pipeline(steps=[('feature_extraction',\n                                              MaskedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                             ('scaler', MinMaxScaler()),\n                                             ('estimator',\n                                              ChainedEstimator(clf=RidgeClassifier(),...\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))],\n                                        'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19]),\n                                        'scaler': [StandardScaler(),\n                                                   MinMaxScaler()]},\n                   refit='accuracy', return_train_score=True,\n                   scoring=['accuracy', 'f1_micro', 'f1_macro',\n                            'neg_root_mean_squared_error',\n                            'neg_mean_absolute_error'],\n                   verbose=1)], 'test_accuracy': array([0.14285714, 0.35294118, 0.20588235, 0.11764706, 0.35294118,\n       0.26470588, 0.23529412, 0.26470588, 0.20588235, 0.29411765]), 'train_accuracy': array([0.40522876, 0.38110749, 0.42019544, 0.45602606, 0.42996743,\n       0.42996743, 0.42019544, 0.42996743, 0.38110749, 0.43973941]), 'test_f1_micro': array([0.14285714, 0.35294118, 0.20588235, 0.11764706, 0.35294118,\n       0.26470588, 0.23529412, 0.26470588, 0.20588235, 0.29411765]), 'train_f1_micro': array([0.40522876, 0.38110749, 0.42019544, 0.45602606, 0.42996743,\n       0.42996743, 0.42019544, 0.42996743, 0.38110749, 0.43973941]), 'test_f1_macro': array([0.1292517 , 0.30351474, 0.15586081, 0.0821662 , 0.28901099,\n       0.23373452, 0.20891489, 0.19675325, 0.16071429, 0.24448567]), 'train_f1_macro': array([0.39555977, 0.35541624, 0.3952822 , 0.43683706, 0.40268195,\n       0.40730933, 0.40491332, 0.40450172, 0.34729435, 0.42126348]), 'test_neg_root_mean_squared_error': array([-2.11119465, -1.66274047, -1.72353945, -2.61218862, -1.6803361 ,\n       -2.15570379, -2.05798302, -2.242635  , -2.2557117 , -1.87867287]), 'train_neg_root_mean_squared_error': array([-0.77121413, -1.37450021, -1.22540959, -0.73754589, -1.27491457,\n       -0.75500502, -0.76144899, -0.75500502, -1.32625701, -0.74850557]), 'test_neg_mean_absolute_error': array([-1.6       , -1.17647059, -1.32352941, -2.11764706, -1.17647059,\n       -1.52941176, -1.52941176, -1.67647059, -1.73529412, -1.35294118]), 'train_neg_mean_absolute_error': array([-0.59477124, -0.87947883, -0.77198697, -0.54397394, -0.77850163,\n       -0.57003257, -0.57980456, -0.57003257, -0.84039088, -0.56026059])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1, "percentage": 1, "total_dmg": 1}, "task": "Classification", "pipe": {"feature_extraction": "MaskedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "ChainedEstimator(regressor = RandomForestClassifier(criterion = 'entropy'), clf = RidgeClassifier())"}, "hp_optimizer": {"type": "RandomizeSearchCV", "n_iter": 20, "params": [{"feature_extraction": "[MaskedSVD(mask=mask), MaskedPCA(mask=mask)]", "feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "scaler": "[StandardScaler(), MinMaxScaler()]", "estimator__regressor__n_estimators": "[150, 200, 250]", "estimator__regressor__max_depth": "[5, 10, 15, 20]", "estimator__clf__tol": "[1e-4, 1e-3, 1e-2]", "estimator__clf__solver": "['svd', 'cholesky', 'sparse_cg', 'sag', 'saga']", "estimator__clf__alpha": "2.0**np.arange(-6, +6)"}], "metrics": ["accuracy", "f1_micro", "f1_macro", "neg_root_mean_squared_error", "neg_mean_absolute_error"], "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]