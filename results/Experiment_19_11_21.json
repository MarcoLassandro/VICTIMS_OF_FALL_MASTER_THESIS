[{"experiment_name": "Experiment_19_11_21", "dataset_variant": "complete", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.6758255831587596, "r2": 0.26537269515713846, "neg_mean_absolute_error": -1.3303503328966493}, "mean_train_score": {"neg_root_mean_squared_error": -1.1844019314535184, "r2": 0.6410865723945449, "neg_mean_absolute_error": -0.8904083235320872}, "best_params": "[{'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 3}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 4}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 5}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}]", "cv_results": "{'fit_time': array([8.27899861, 7.67900014, 7.8990128 , 8.06601048, 9.72706842,\n       8.86100435, 8.41058254, 8.84700251, 8.45100212, 8.56855226]), 'score_time': array([0.00199986, 0.00199962, 0.00198722, 0.00299406, 0.00099969,\n       0.00200033, 0.00100064, 0.00199986, 0.00300074, 0.00100327]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.53919752, -1.26702465, -1.57468462, -1.77151361, -1.63759471,\n       -1.55119812, -1.68850465, -2.27884787, -1.79707367, -1.65261641]), 'train_neg_root_mean_squared_error': array([-1.27388976, -1.16437124, -1.18112336, -1.10429409, -1.2135167 ,\n       -1.24681766, -1.14274594, -1.12875001, -1.15767481, -1.23083576]), 'test_r2': array([ 0.42371266,  0.59560116,  0.361307  ,  0.22099439,  0.30257274,\n        0.37422154,  0.25853511, -0.34241472,  0.16518969,  0.29400738]), 'train_r2': array([0.58325573, 0.65318708, 0.64407104, 0.68760968, 0.62472292,\n       0.60384384, 0.66721795, 0.67508417, 0.65821854, 0.61365477]), 'test_neg_mean_absolute_error': array([-1.13745744, -1.02842092, -1.14802388, -1.40642957, -1.27217507,\n       -1.18957281, -1.41624727, -1.83222291, -1.40823433, -1.46471913]), 'train_neg_mean_absolute_error': array([-0.96796025, -0.89265695, -0.87708603, -0.83271217, -0.89137256,\n       -0.96607679, -0.86292094, -0.83145527, -0.87571335, -0.90612891])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 10, 30]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_19_11_21", "dataset_variant": "only_totals", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.7276232250511527, "r2": 0.22256457173304006, "neg_mean_absolute_error": -1.3447254328051468}, "mean_train_score": {"neg_root_mean_squared_error": -1.1781251720892896, "r2": 0.6453082760307021, "neg_mean_absolute_error": -0.8839940512022564}, "best_params": "[{'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 3}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}]", "cv_results": "{'fit_time': array([1.2400465 , 1.14254761, 1.08254194, 1.12605619, 1.09899831,\n       1.10999775, 1.11104465, 1.18407822, 1.28399944, 1.3906827 ]), 'score_time': array([0.00200176, 0.002002  , 0.00300169, 0.00200367, 0.00099635,\n       0.00100017, 0.00200033, 0.00200629, 0.00398421, 0.00200009]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([1, 2, 3])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-2.15756321, -1.24899984, -1.62029914, -2.13725494, -1.67687818,\n       -1.67598153, -1.65259366, -1.92584272, -1.56071655, -1.62010247]), 'train_neg_root_mean_squared_error': array([-1.22089947, -1.21733901, -1.16000881, -1.13798764, -1.13065925,\n       -1.20830906, -1.1475277 , -1.19501169, -1.1689261 , -1.194583  ]), 'test_r2': array([-0.1323415 ,  0.60702534,  0.32376851, -0.13387258,  0.26871091,\n        0.26949276,  0.28973857,  0.04126701,  0.37034289,  0.32151382]), 'train_r2': array([0.61720545, 0.62091603, 0.65668294, 0.66825593, 0.67422032,\n       0.62793691, 0.6644271 , 0.63581702, 0.65154279, 0.63607826]), 'test_neg_mean_absolute_error': array([-1.58045425, -1.0113989 , -1.24092559, -1.69754109, -1.35386024,\n       -1.29099836, -1.30250852, -1.53482172, -1.11263371, -1.32211196]), 'train_neg_mean_absolute_error': array([-0.92624358, -0.91825295, -0.85783391, -0.8507822 , -0.850846  ,\n       -0.91183488, -0.84714794, -0.89804143, -0.88207564, -0.89688199])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 10, 30]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}, {"experiment_name": "Experiment_19_11_21", "dataset_variant": "only_binary", "estimator": "DecisionTreeRegressor()", "task": "Regression", "hp_optimizer": "GridSearchCV", "cv_type": "n_split_inner_cv", "mean_test_score": {"neg_root_mean_squared_error": -1.7684498647647622, "r2": 0.18888603490663997, "neg_mean_absolute_error": -1.3881005210211108}, "mean_train_score": {"neg_root_mean_squared_error": -1.207335769532242, "r2": 0.6272001437336574, "neg_mean_absolute_error": -0.920206110267521}, "best_params": "[{'estimator__max_depth': 5, 'feature_extraction__n_components': 5}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 8}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 2}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 4}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}, {'estimator__max_depth': 5, 'feature_extraction__n_components': 1}]", "cv_results": "{'fit_time': array([11.19513702, 10.77408028,  8.8640554 ,  9.63112354,  8.81599474,\n        9.05879045,  7.78604794,  5.80199981,  5.54800081,  5.88400435]), 'score_time': array([0.00400305, 0.00099897, 0.00100017, 0.0030036 , 0.00100183,\n       0.00399327, 0.00099707, 0.00100017, 0.0019989 , 0.00200033]), 'estimator': [GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1), GridSearchCV(cv=StratifiedKFold(n_splits=10, random_state=42, shuffle=True),\n             estimator=Pipeline(steps=[('feature_extraction',\n                                        GroupedSVD(mask=array([False, False, False,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True]))),\n                                       ('scaler', MinMaxScaler()),\n                                       ('estimator', DecisionTreeRegressor())]),\n             param_grid={'estimator__max_depth': [5, 10, 30],\n                         'feature_extraction__n_components': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])},\n             refit='neg_root_mean_squared_error', return_train_score=True,\n             scoring=['neg_root_mean_squared_error', 'r2',\n                      'neg_mean_absolute_error'],\n             verbose=1)], 'test_neg_root_mean_squared_error': array([-1.9403495 , -1.32435341, -1.88788324, -1.88696189, -1.69314652,\n       -1.58413843, -1.72140934, -2.17841461, -1.67556716, -1.79227456]), 'train_neg_root_mean_squared_error': array([-1.20100172, -1.26990908, -1.24693853, -1.20169989, -1.1232118 ,\n       -1.20626401, -1.20847506, -1.1289398 , -1.26765085, -1.21926696]), 'test_r2': array([ 0.08417964,  0.55817777,  0.08197344,  0.11615145,  0.25445278,\n        0.34736205,  0.22935498, -0.22669649,  0.27426225,  0.16964249]), 'train_r2': array([0.62958105, 0.58746805, 0.60329936, 0.63006952, 0.67849788,\n       0.62919528, 0.62783468, 0.67497489, 0.59019746, 0.62088327]), 'test_neg_mean_absolute_error': array([-1.53398749, -1.06377407, -1.35177414, -1.45552551, -1.31672782,\n       -1.17077683, -1.34592213, -1.78182546, -1.34346776, -1.51722401]), 'train_neg_mean_absolute_error': array([-0.93277606, -0.96912463, -0.97523447, -0.92197206, -0.86484324,\n       -0.91383596, -0.91353735, -0.8412545 , -0.94606127, -0.92342157])}", "experiment_setup": {"dataset_settings": {"dataset_variants": ["complete", "only_totals", "only_binary"], "type_of_labels": "floors", "only_BMI": 1}, "task": "Regression", "pipe": {"feature_extraction": "GroupedSVD(mask=mask)", "scaler": "MinMaxScaler()", "estimator": "DecisionTreeRegressor()"}, "hp_optimizer": {"type": "GridSearchCV", "params": [{"feature_extraction__n_components": "np.arange(1, X[:, mask].shape[1])", "estimator__max_depth": "[5, 10, 30]"}], "metrics": ["neg_root_mean_squared_error", "r2", "neg_mean_absolute_error"], "hp_otimizer": "GridSearchCV", "n_split_outer_cv": 10, "n_split_inner_cv": 10}}}]